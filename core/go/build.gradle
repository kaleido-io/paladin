/*
 * Copyright Â© 2024 Kaleido, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.tools.ant.filters.LineContains

ext {
    goFilesBuildOnly = fileTree(".") {
        include "core.go"
        include "internal/**/*.go"
        include "pkg/**/*.go"
    }

    goFiles = fileTree(".") {
        include "core.go"
        include "internal/**/*.go"
        include "pkg/**/*.go"
        include "componenttest/**/*.go"
        include "mocks/**/*.go"
    }

    targetCoverage = 94.4
    maxCoverageBarGap = 1
    coverageExcludedPackages = [
        'github.com/LF-Decentralized-Trust-labs/paladin/core/internal/privatetxnmgr/ptmgrtypes/mock_transaction_flow.go',
        'github.com/LF-Decentralized-Trust-labs/paladin/core/pkg/proto',
        'github.com/LF-Decentralized-Trust-labs/paladin/core/pkg/proto/transaction',
        'github.com/LF-Decentralized-Trust-labs/paladin/toolkit/prototk',
        'github.com/LF-Decentralized-Trust-labs/paladin/core/internal/plugins/loader',
        'github.com/LF-Decentralized-Trust-labs/paladin/core/pkg/testbed',
    ]
}

configurations {
    // Resolvable configurations
    compiledContracts {
        canBeConsumed = false
        canBeResolved = true
    }
    toolkitProtoDefinitions {
        canBeConsumed = false
        canBeResolved = true
    }

    // Consumable configurations
    libcore {
        canBeConsumed = true
        canBeResolved = false
    }
    goSource {
        canBeConsumed = true
        canBeResolved = false
    }
}

dependencies {
    compiledContracts project(path: ":solidity", configuration: "compiledContracts")
    toolkitProtoDefinitions project(path: ":toolkit:proto", configuration: "protoDefinitions")
}

task copyTestContracts(type: Copy) {
    inputs.files(configurations.compiledContracts)
    from fileTree(configurations.compiledContracts.asPath) {
        include 'contracts/testcontracts/SimpleStorage.sol/SimpleStorage.json'
    }
    into 'componenttest/abis'

    // Flatten all paths into the destination folder
    eachFile { path = name }
    includeEmptyDirs = false
}

task copyTestDomainContracts(type: Copy) {
    inputs.files(configurations.compiledContracts)
    from fileTree(configurations.compiledContracts.asPath) {
        include 'contracts/domains/componenttest/SimpleDomain.sol/SimpleDomain.json'
        include 'contracts/domains/componenttest/SimpleToken.sol/SimpleToken.json'
    }
    into 'componenttest/domains/abis'

    // Flatten all paths into the destination folder
    eachFile { path = name }
    includeEmptyDirs = false
}

task copyTestbedContracts(type: Copy) {
    inputs.files(configurations.compiledContracts)
    from fileTree(configurations.compiledContracts.asPath) {
        include 'contracts/domains/testbed_sim/SIMDomain.sol/SIMDomain.json'
        include 'contracts/domains/testbed_sim/SIMToken.sol/SIMToken.json'
        include 'contracts/domains/interfaces/IPaladinContractRegistry.sol/IPaladinContractRegistry_V0.json'
    }
    into 'pkg/testbed/abis'

    // Flatten all paths into the destination folder
    eachFile { path = name }
    includeEmptyDirs = false
}

task copyDomainManagerContracts(type: Copy) {
    inputs.files(configurations.compiledContracts)
    from fileTree(configurations.compiledContracts.asPath) {
        include 'contracts/domains/interfaces/IPaladinContract.sol/IPaladinContract_V0.json'
        include 'contracts/domains/interfaces/IPaladinContractRegistry.sol/IPaladinContractRegistry_V0.json'
    }
    into 'internal/domainmgr/abis'

    // Flatten all paths into the destination folder
    eachFile { path = name }
    includeEmptyDirs = false
}

task copyContracts(dependsOn:[
    copyTestContracts,
    copyTestDomainContracts,
    copyTestbedContracts,
    copyDomainManagerContracts,
])

task protoc(type: ProtoCompile, dependsOn: [
        ":transports:grpc:protoc",
        ":toolkit:go:protoc",
        ":installProtocGenGo",
        ":installProtocGenGoRPC",
        copyTestContracts,
    ]) {
    protocPath "bin"
    protoPath projectDir
    protoFiles fileTree("pkg/proto") {
        include "**/*.proto"
    }
    plugins {
        go {
            out projectDir
        }
        go_grpc {
            out projectDir
        }
    }
}

task goGet(type:Exec, dependsOn:[protoc, copyContracts, ":toolkit:go:goGet"]) {
    workingDir '.'

    inputs.files('go.mod')
    inputs.files(goFiles)
    outputs.files('go.sum')

    executable 'go'
    args 'get'
}

task makeMocks(type: Exec, dependsOn: [":installMockery", protoc, goGet]) {
   executable "mockery"
}

task clean(type: Delete, dependsOn: ':testinfra:stopTestInfra') {
    delete "${buildDir}"
    delete fileTree("bin") {
        exclude "README.md", ".gitignore"
    }
    delete fileTree(".") {
        include "**/*.pb.go"
    }
    delete 'coverage'
    delete 'mocks'
    delete 'internal/domainmgr/abis'
    delete 'componenttest/abis'
}

task lint(type: Exec, dependsOn:[
        protoc,
        makeMocks,
        copyContracts,
        ":installGolangCILint"
    ]) {
    workingDir '.'

    helpers.lockResource(it, "lint.lock")
    inputs.files(goFiles)
    environment 'GOGC', '20'

    executable "golangci-lint"
    args 'run'
    args '-v'
    args '--color=always'
    args '--timeout', '5m'
}

task buildSharedLibrary(type:GoLib, dependsOn:[goGet]) {
    baseName "core"
    sources goFilesBuildOnly
    mainFile 'core.go'
}

task buildTestbed(type:Exec, dependsOn: [goGet, makeMocks, copyContracts]) {
    workingDir '.'

    inputs.files(goFiles)
    inputs.dir("testbed")
    outputs.dir("bin")

    environment("CGO_ENABLED", "1")

    executable 'go'
    args 'build'
    args '-o', 'bin/'
    args './testbed'
}

task buildTestPluginsSharedLibraryGRPCTransport(type:Exec) {

    workingDir '.'

    def libName;
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        libName = "grpctransport.dll"
    } else if (Os.isFamily(Os.FAMILY_MAC)) {
        libName = "grpctransport.so"
    } else {
        libName = "grpctransport.so"
    }

    inputs.files(fileTree("${projectDir}").matching {
        include "internal/plugins/grpctransport/*.go"
    })
    outputs.files([libName, 'libgrpctransport.h'])

    environment("CGO_ENABLED", "1")

    executable 'go'
    args 'build'
    args '-o', libName
    args '-buildmode=plugin'
    args 'internal/plugins/grpctransport/main.go'
}

task buildTestPluginsSharedLibraries {
    dependsOn buildTestPluginsSharedLibraryGRPCTransport
}

abstract class UnitTests extends Exec {
    UnitTests() {
        inputs.files(project.goFiles)
        outputs.dir('coverage')

        workingDir '.'
        executable 'go'
        args 'test'
        args './pkg/...', './internal/...'
        args '-cover'
        args '-covermode=atomic'
        args '-timeout=90s' // TODO: Implement fast DB reset to bring this back down
        if (project.findProperty('verboseTests') == 'true') {
            args '-v'
        }
        args "-test.gocoverdir=${project.projectDir}/coverage"
    }
}

abstract class ComponentTest extends Exec {
    ComponentTest() {
        inputs.files(project.goFiles)
        inputs.files(project.fileTree("testbed") {
            include "**/*.json"
        })
        outputs.dir('coverage')

        workingDir '.'
        executable 'go'
        args 'test'
        args './componenttest', './pkg/testbed'
        args '-cover'
        args "-coverpkg=github.com/LF-Decentralized-Trust-labs/paladin/core/..." // toolkit handled seperately
        args '-covermode=atomic'
        args '-timeout=120s'
        if (project.findProperty('verboseTests') == 'true') {
            args '-v'
        }
        args "-test.gocoverdir=${project.projectDir}/coverage"

        project.helpers.dumpLogsOnFailure(this, ':testinfra:startTestInfra')
    }
}

task setupCoverage(dependsOn: [protoc, copyContracts, makeMocks]) {
    inputs.files(goFiles)
    outputs.dir('coverage')
    doLast {
        delete fileTree (project.mkdir('coverage')) {
            include "coverage.txt"
            include "covcounters.*"
            include "covmeta.*"
        }
    }
}

task unitTestSQLite(type: UnitTests, dependsOn: [
        makeMocks,
        ':testinfra:startTestInfra',
        setupCoverage,
        goGet,
    ]) {
}

task unitTestPostgres(type: UnitTests, dependsOn: [
        makeMocks,
        ':testinfra:startTestInfra',
        setupCoverage,
        goGet,
    ]) {
    args '-tags', "testdbpostgres"
    mustRunAfter 'unitTestSQLite' // these tests cannot run concurrently
}

task componentTestSQLite(type: ComponentTest, dependsOn: [
        makeMocks,
        ':testinfra:startTestInfra',
        setupCoverage,
        goGet,
        copyContracts, // Ensure this task depends on copying the test contracts
    ]) {
    mustRunAfter 'unitTestPostgres' // these tests cannot run concurrently
}

task buildCoverageTxt(type: Exec, dependsOn: [
        protoc,
        unitTestSQLite,
        unitTestPostgres,
        componentTestSQLite,
        // componentTestPostgres
    ]) {
    inputs.files(fileTree(project.mkdir('coverage')) {
        include "covcounters.*"
        include "covmeta.*"
    })
    outputs.files('coverage/coverage_unfiltered.txt')
    executable 'go'
    args 'tool', 'covdata', 'textfmt'
    args '-i', "${projectDir}/coverage"
    args '-o', "${projectDir}/coverage/coverage_unfiltered.txt"
}

task aggregateCoverage(type: Copy, dependsOn: buildCoverageTxt) {
    from 'coverage/coverage_unfiltered.txt'
    into 'coverage'
    outputs.files('coverage/coverage.txt')
    eachFile { fcd ->
        fcd.setRelativePath(fcd.relativePath.replaceLastName('coverage.txt'))
    }
    filter(LineContains, negate: true, contains: getProject().ext.coverageExcludedPackages, matchAny: true) 
}

task checkCoverage(type: GoCheckCoverage, dependsOn: [aggregateCoverage]) {
    coverageFile('coverage/coverage.txt')
    target = targetCoverage
    maxGap = maxCoverageBarGap
}

task test {
    finalizedBy checkCoverage
}

task testcov(type: Exec, dependsOn: [test, aggregateCoverage]) {
    inputs.files('coverage/coverage.txt')
    workingDir '.'
    executable 'go'
    args 'tool'
    args 'cover'
    args '-html=coverage/coverage.txt'
}

task build {
    dependsOn lint
    dependsOn test
    dependsOn aggregateCoverage
    dependsOn checkCoverage
}

task assemble {
    dependsOn buildSharedLibrary
}

dependencies {
    libcore files(buildSharedLibrary)
    goSource files(goFilesBuildOnly, protoc, copyContracts)
}
