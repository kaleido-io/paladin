// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package componentmgr

import (
	"github.com/LF-Decentralized-Trust-labs/paladin/core/internal/components"
	"github.com/LF-Decentralized-Trust-labs/paladin/core/internal/metrics"
	"github.com/LF-Decentralized-Trust-labs/paladin/core/pkg/blockindexer"
	"github.com/LF-Decentralized-Trust-labs/paladin/core/pkg/ethclient"
	"github.com/LF-Decentralized-Trust-labs/paladin/core/pkg/persistence"
	"github.com/LF-Decentralized-Trust-labs/paladin/toolkit/pkg/rpcserver"
	mock "github.com/stretchr/testify/mock"
)

// NewMockComponentManager creates a new instance of MockComponentManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockComponentManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockComponentManager {
	mock := &MockComponentManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockComponentManager is an autogenerated mock type for the ComponentManager type
type MockComponentManager struct {
	mock.Mock
}

type MockComponentManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockComponentManager) EXPECT() *MockComponentManager_Expecter {
	return &MockComponentManager_Expecter{mock: &_m.Mock}
}

// BlockIndexer provides a mock function for the type MockComponentManager
func (_mock *MockComponentManager) BlockIndexer() blockindexer.BlockIndexer {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for BlockIndexer")
	}

	var r0 blockindexer.BlockIndexer
	if returnFunc, ok := ret.Get(0).(func() blockindexer.BlockIndexer); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(blockindexer.BlockIndexer)
		}
	}
	return r0
}

// MockComponentManager_BlockIndexer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockIndexer'
type MockComponentManager_BlockIndexer_Call struct {
	*mock.Call
}

// BlockIndexer is a helper method to define mock.On call
func (_e *MockComponentManager_Expecter) BlockIndexer() *MockComponentManager_BlockIndexer_Call {
	return &MockComponentManager_BlockIndexer_Call{Call: _e.mock.On("BlockIndexer")}
}

func (_c *MockComponentManager_BlockIndexer_Call) Run(run func()) *MockComponentManager_BlockIndexer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponentManager_BlockIndexer_Call) Return(blockIndexer blockindexer.BlockIndexer) *MockComponentManager_BlockIndexer_Call {
	_c.Call.Return(blockIndexer)
	return _c
}

func (_c *MockComponentManager_BlockIndexer_Call) RunAndReturn(run func() blockindexer.BlockIndexer) *MockComponentManager_BlockIndexer_Call {
	_c.Call.Return(run)
	return _c
}

// CompleteStart provides a mock function for the type MockComponentManager
func (_mock *MockComponentManager) CompleteStart() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CompleteStart")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockComponentManager_CompleteStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompleteStart'
type MockComponentManager_CompleteStart_Call struct {
	*mock.Call
}

// CompleteStart is a helper method to define mock.On call
func (_e *MockComponentManager_Expecter) CompleteStart() *MockComponentManager_CompleteStart_Call {
	return &MockComponentManager_CompleteStart_Call{Call: _e.mock.On("CompleteStart")}
}

func (_c *MockComponentManager_CompleteStart_Call) Run(run func()) *MockComponentManager_CompleteStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponentManager_CompleteStart_Call) Return(err error) *MockComponentManager_CompleteStart_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockComponentManager_CompleteStart_Call) RunAndReturn(run func() error) *MockComponentManager_CompleteStart_Call {
	_c.Call.Return(run)
	return _c
}

// DomainManager provides a mock function for the type MockComponentManager
func (_mock *MockComponentManager) DomainManager() components.DomainManager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for DomainManager")
	}

	var r0 components.DomainManager
	if returnFunc, ok := ret.Get(0).(func() components.DomainManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(components.DomainManager)
		}
	}
	return r0
}

// MockComponentManager_DomainManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DomainManager'
type MockComponentManager_DomainManager_Call struct {
	*mock.Call
}

// DomainManager is a helper method to define mock.On call
func (_e *MockComponentManager_Expecter) DomainManager() *MockComponentManager_DomainManager_Call {
	return &MockComponentManager_DomainManager_Call{Call: _e.mock.On("DomainManager")}
}

func (_c *MockComponentManager_DomainManager_Call) Run(run func()) *MockComponentManager_DomainManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponentManager_DomainManager_Call) Return(domainManager components.DomainManager) *MockComponentManager_DomainManager_Call {
	_c.Call.Return(domainManager)
	return _c
}

func (_c *MockComponentManager_DomainManager_Call) RunAndReturn(run func() components.DomainManager) *MockComponentManager_DomainManager_Call {
	_c.Call.Return(run)
	return _c
}

// EthClientFactory provides a mock function for the type MockComponentManager
func (_mock *MockComponentManager) EthClientFactory() ethclient.EthClientFactory {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for EthClientFactory")
	}

	var r0 ethclient.EthClientFactory
	if returnFunc, ok := ret.Get(0).(func() ethclient.EthClientFactory); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ethclient.EthClientFactory)
		}
	}
	return r0
}

// MockComponentManager_EthClientFactory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EthClientFactory'
type MockComponentManager_EthClientFactory_Call struct {
	*mock.Call
}

// EthClientFactory is a helper method to define mock.On call
func (_e *MockComponentManager_Expecter) EthClientFactory() *MockComponentManager_EthClientFactory_Call {
	return &MockComponentManager_EthClientFactory_Call{Call: _e.mock.On("EthClientFactory")}
}

func (_c *MockComponentManager_EthClientFactory_Call) Run(run func()) *MockComponentManager_EthClientFactory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponentManager_EthClientFactory_Call) Return(ethClientFactory ethclient.EthClientFactory) *MockComponentManager_EthClientFactory_Call {
	_c.Call.Return(ethClientFactory)
	return _c
}

func (_c *MockComponentManager_EthClientFactory_Call) RunAndReturn(run func() ethclient.EthClientFactory) *MockComponentManager_EthClientFactory_Call {
	_c.Call.Return(run)
	return _c
}

// GroupManager provides a mock function for the type MockComponentManager
func (_mock *MockComponentManager) GroupManager() components.GroupManager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GroupManager")
	}

	var r0 components.GroupManager
	if returnFunc, ok := ret.Get(0).(func() components.GroupManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(components.GroupManager)
		}
	}
	return r0
}

// MockComponentManager_GroupManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GroupManager'
type MockComponentManager_GroupManager_Call struct {
	*mock.Call
}

// GroupManager is a helper method to define mock.On call
func (_e *MockComponentManager_Expecter) GroupManager() *MockComponentManager_GroupManager_Call {
	return &MockComponentManager_GroupManager_Call{Call: _e.mock.On("GroupManager")}
}

func (_c *MockComponentManager_GroupManager_Call) Run(run func()) *MockComponentManager_GroupManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponentManager_GroupManager_Call) Return(groupManager components.GroupManager) *MockComponentManager_GroupManager_Call {
	_c.Call.Return(groupManager)
	return _c
}

func (_c *MockComponentManager_GroupManager_Call) RunAndReturn(run func() components.GroupManager) *MockComponentManager_GroupManager_Call {
	_c.Call.Return(run)
	return _c
}

// IdentityResolver provides a mock function for the type MockComponentManager
func (_mock *MockComponentManager) IdentityResolver() components.IdentityResolver {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IdentityResolver")
	}

	var r0 components.IdentityResolver
	if returnFunc, ok := ret.Get(0).(func() components.IdentityResolver); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(components.IdentityResolver)
		}
	}
	return r0
}

// MockComponentManager_IdentityResolver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IdentityResolver'
type MockComponentManager_IdentityResolver_Call struct {
	*mock.Call
}

// IdentityResolver is a helper method to define mock.On call
func (_e *MockComponentManager_Expecter) IdentityResolver() *MockComponentManager_IdentityResolver_Call {
	return &MockComponentManager_IdentityResolver_Call{Call: _e.mock.On("IdentityResolver")}
}

func (_c *MockComponentManager_IdentityResolver_Call) Run(run func()) *MockComponentManager_IdentityResolver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponentManager_IdentityResolver_Call) Return(identityResolver components.IdentityResolver) *MockComponentManager_IdentityResolver_Call {
	_c.Call.Return(identityResolver)
	return _c
}

func (_c *MockComponentManager_IdentityResolver_Call) RunAndReturn(run func() components.IdentityResolver) *MockComponentManager_IdentityResolver_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function for the type MockComponentManager
func (_mock *MockComponentManager) Init() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockComponentManager_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockComponentManager_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
func (_e *MockComponentManager_Expecter) Init() *MockComponentManager_Init_Call {
	return &MockComponentManager_Init_Call{Call: _e.mock.On("Init")}
}

func (_c *MockComponentManager_Init_Call) Run(run func()) *MockComponentManager_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponentManager_Init_Call) Return(err error) *MockComponentManager_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockComponentManager_Init_Call) RunAndReturn(run func() error) *MockComponentManager_Init_Call {
	_c.Call.Return(run)
	return _c
}

// KeyManager provides a mock function for the type MockComponentManager
func (_mock *MockComponentManager) KeyManager() components.KeyManager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for KeyManager")
	}

	var r0 components.KeyManager
	if returnFunc, ok := ret.Get(0).(func() components.KeyManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(components.KeyManager)
		}
	}
	return r0
}

// MockComponentManager_KeyManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KeyManager'
type MockComponentManager_KeyManager_Call struct {
	*mock.Call
}

// KeyManager is a helper method to define mock.On call
func (_e *MockComponentManager_Expecter) KeyManager() *MockComponentManager_KeyManager_Call {
	return &MockComponentManager_KeyManager_Call{Call: _e.mock.On("KeyManager")}
}

func (_c *MockComponentManager_KeyManager_Call) Run(run func()) *MockComponentManager_KeyManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponentManager_KeyManager_Call) Return(keyManager components.KeyManager) *MockComponentManager_KeyManager_Call {
	_c.Call.Return(keyManager)
	return _c
}

func (_c *MockComponentManager_KeyManager_Call) RunAndReturn(run func() components.KeyManager) *MockComponentManager_KeyManager_Call {
	_c.Call.Return(run)
	return _c
}

// MetricsManager provides a mock function for the type MockComponentManager
func (_mock *MockComponentManager) MetricsManager() metrics.Metrics {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for MetricsManager")
	}

	var r0 metrics.Metrics
	if returnFunc, ok := ret.Get(0).(func() metrics.Metrics); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metrics.Metrics)
		}
	}
	return r0
}

// MockComponentManager_MetricsManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MetricsManager'
type MockComponentManager_MetricsManager_Call struct {
	*mock.Call
}

// MetricsManager is a helper method to define mock.On call
func (_e *MockComponentManager_Expecter) MetricsManager() *MockComponentManager_MetricsManager_Call {
	return &MockComponentManager_MetricsManager_Call{Call: _e.mock.On("MetricsManager")}
}

func (_c *MockComponentManager_MetricsManager_Call) Run(run func()) *MockComponentManager_MetricsManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponentManager_MetricsManager_Call) Return(metrics1 metrics.Metrics) *MockComponentManager_MetricsManager_Call {
	_c.Call.Return(metrics1)
	return _c
}

func (_c *MockComponentManager_MetricsManager_Call) RunAndReturn(run func() metrics.Metrics) *MockComponentManager_MetricsManager_Call {
	_c.Call.Return(run)
	return _c
}

// Persistence provides a mock function for the type MockComponentManager
func (_mock *MockComponentManager) Persistence() persistence.Persistence {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Persistence")
	}

	var r0 persistence.Persistence
	if returnFunc, ok := ret.Get(0).(func() persistence.Persistence); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(persistence.Persistence)
		}
	}
	return r0
}

// MockComponentManager_Persistence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Persistence'
type MockComponentManager_Persistence_Call struct {
	*mock.Call
}

// Persistence is a helper method to define mock.On call
func (_e *MockComponentManager_Expecter) Persistence() *MockComponentManager_Persistence_Call {
	return &MockComponentManager_Persistence_Call{Call: _e.mock.On("Persistence")}
}

func (_c *MockComponentManager_Persistence_Call) Run(run func()) *MockComponentManager_Persistence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponentManager_Persistence_Call) Return(persistence1 persistence.Persistence) *MockComponentManager_Persistence_Call {
	_c.Call.Return(persistence1)
	return _c
}

func (_c *MockComponentManager_Persistence_Call) RunAndReturn(run func() persistence.Persistence) *MockComponentManager_Persistence_Call {
	_c.Call.Return(run)
	return _c
}

// PluginManager provides a mock function for the type MockComponentManager
func (_mock *MockComponentManager) PluginManager() components.PluginManager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for PluginManager")
	}

	var r0 components.PluginManager
	if returnFunc, ok := ret.Get(0).(func() components.PluginManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(components.PluginManager)
		}
	}
	return r0
}

// MockComponentManager_PluginManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PluginManager'
type MockComponentManager_PluginManager_Call struct {
	*mock.Call
}

// PluginManager is a helper method to define mock.On call
func (_e *MockComponentManager_Expecter) PluginManager() *MockComponentManager_PluginManager_Call {
	return &MockComponentManager_PluginManager_Call{Call: _e.mock.On("PluginManager")}
}

func (_c *MockComponentManager_PluginManager_Call) Run(run func()) *MockComponentManager_PluginManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponentManager_PluginManager_Call) Return(pluginManager components.PluginManager) *MockComponentManager_PluginManager_Call {
	_c.Call.Return(pluginManager)
	return _c
}

func (_c *MockComponentManager_PluginManager_Call) RunAndReturn(run func() components.PluginManager) *MockComponentManager_PluginManager_Call {
	_c.Call.Return(run)
	return _c
}

// PrivateTxManager provides a mock function for the type MockComponentManager
func (_mock *MockComponentManager) PrivateTxManager() components.PrivateTxManager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for PrivateTxManager")
	}

	var r0 components.PrivateTxManager
	if returnFunc, ok := ret.Get(0).(func() components.PrivateTxManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(components.PrivateTxManager)
		}
	}
	return r0
}

// MockComponentManager_PrivateTxManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrivateTxManager'
type MockComponentManager_PrivateTxManager_Call struct {
	*mock.Call
}

// PrivateTxManager is a helper method to define mock.On call
func (_e *MockComponentManager_Expecter) PrivateTxManager() *MockComponentManager_PrivateTxManager_Call {
	return &MockComponentManager_PrivateTxManager_Call{Call: _e.mock.On("PrivateTxManager")}
}

func (_c *MockComponentManager_PrivateTxManager_Call) Run(run func()) *MockComponentManager_PrivateTxManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponentManager_PrivateTxManager_Call) Return(privateTxManager components.PrivateTxManager) *MockComponentManager_PrivateTxManager_Call {
	_c.Call.Return(privateTxManager)
	return _c
}

func (_c *MockComponentManager_PrivateTxManager_Call) RunAndReturn(run func() components.PrivateTxManager) *MockComponentManager_PrivateTxManager_Call {
	_c.Call.Return(run)
	return _c
}

// PublicTxManager provides a mock function for the type MockComponentManager
func (_mock *MockComponentManager) PublicTxManager() components.PublicTxManager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for PublicTxManager")
	}

	var r0 components.PublicTxManager
	if returnFunc, ok := ret.Get(0).(func() components.PublicTxManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(components.PublicTxManager)
		}
	}
	return r0
}

// MockComponentManager_PublicTxManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublicTxManager'
type MockComponentManager_PublicTxManager_Call struct {
	*mock.Call
}

// PublicTxManager is a helper method to define mock.On call
func (_e *MockComponentManager_Expecter) PublicTxManager() *MockComponentManager_PublicTxManager_Call {
	return &MockComponentManager_PublicTxManager_Call{Call: _e.mock.On("PublicTxManager")}
}

func (_c *MockComponentManager_PublicTxManager_Call) Run(run func()) *MockComponentManager_PublicTxManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponentManager_PublicTxManager_Call) Return(publicTxManager components.PublicTxManager) *MockComponentManager_PublicTxManager_Call {
	_c.Call.Return(publicTxManager)
	return _c
}

func (_c *MockComponentManager_PublicTxManager_Call) RunAndReturn(run func() components.PublicTxManager) *MockComponentManager_PublicTxManager_Call {
	_c.Call.Return(run)
	return _c
}

// RPCServer provides a mock function for the type MockComponentManager
func (_mock *MockComponentManager) RPCServer() rpcserver.RPCServer {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for RPCServer")
	}

	var r0 rpcserver.RPCServer
	if returnFunc, ok := ret.Get(0).(func() rpcserver.RPCServer); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rpcserver.RPCServer)
		}
	}
	return r0
}

// MockComponentManager_RPCServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RPCServer'
type MockComponentManager_RPCServer_Call struct {
	*mock.Call
}

// RPCServer is a helper method to define mock.On call
func (_e *MockComponentManager_Expecter) RPCServer() *MockComponentManager_RPCServer_Call {
	return &MockComponentManager_RPCServer_Call{Call: _e.mock.On("RPCServer")}
}

func (_c *MockComponentManager_RPCServer_Call) Run(run func()) *MockComponentManager_RPCServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponentManager_RPCServer_Call) Return(rPCServer rpcserver.RPCServer) *MockComponentManager_RPCServer_Call {
	_c.Call.Return(rPCServer)
	return _c
}

func (_c *MockComponentManager_RPCServer_Call) RunAndReturn(run func() rpcserver.RPCServer) *MockComponentManager_RPCServer_Call {
	_c.Call.Return(run)
	return _c
}

// RegistryManager provides a mock function for the type MockComponentManager
func (_mock *MockComponentManager) RegistryManager() components.RegistryManager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for RegistryManager")
	}

	var r0 components.RegistryManager
	if returnFunc, ok := ret.Get(0).(func() components.RegistryManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(components.RegistryManager)
		}
	}
	return r0
}

// MockComponentManager_RegistryManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegistryManager'
type MockComponentManager_RegistryManager_Call struct {
	*mock.Call
}

// RegistryManager is a helper method to define mock.On call
func (_e *MockComponentManager_Expecter) RegistryManager() *MockComponentManager_RegistryManager_Call {
	return &MockComponentManager_RegistryManager_Call{Call: _e.mock.On("RegistryManager")}
}

func (_c *MockComponentManager_RegistryManager_Call) Run(run func()) *MockComponentManager_RegistryManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponentManager_RegistryManager_Call) Return(registryManager components.RegistryManager) *MockComponentManager_RegistryManager_Call {
	_c.Call.Return(registryManager)
	return _c
}

func (_c *MockComponentManager_RegistryManager_Call) RunAndReturn(run func() components.RegistryManager) *MockComponentManager_RegistryManager_Call {
	_c.Call.Return(run)
	return _c
}

// StartManagers provides a mock function for the type MockComponentManager
func (_mock *MockComponentManager) StartManagers() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for StartManagers")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockComponentManager_StartManagers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartManagers'
type MockComponentManager_StartManagers_Call struct {
	*mock.Call
}

// StartManagers is a helper method to define mock.On call
func (_e *MockComponentManager_Expecter) StartManagers() *MockComponentManager_StartManagers_Call {
	return &MockComponentManager_StartManagers_Call{Call: _e.mock.On("StartManagers")}
}

func (_c *MockComponentManager_StartManagers_Call) Run(run func()) *MockComponentManager_StartManagers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponentManager_StartManagers_Call) Return(err error) *MockComponentManager_StartManagers_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockComponentManager_StartManagers_Call) RunAndReturn(run func() error) *MockComponentManager_StartManagers_Call {
	_c.Call.Return(run)
	return _c
}

// StateManager provides a mock function for the type MockComponentManager
func (_mock *MockComponentManager) StateManager() components.StateManager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for StateManager")
	}

	var r0 components.StateManager
	if returnFunc, ok := ret.Get(0).(func() components.StateManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(components.StateManager)
		}
	}
	return r0
}

// MockComponentManager_StateManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StateManager'
type MockComponentManager_StateManager_Call struct {
	*mock.Call
}

// StateManager is a helper method to define mock.On call
func (_e *MockComponentManager_Expecter) StateManager() *MockComponentManager_StateManager_Call {
	return &MockComponentManager_StateManager_Call{Call: _e.mock.On("StateManager")}
}

func (_c *MockComponentManager_StateManager_Call) Run(run func()) *MockComponentManager_StateManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponentManager_StateManager_Call) Return(stateManager components.StateManager) *MockComponentManager_StateManager_Call {
	_c.Call.Return(stateManager)
	return _c
}

func (_c *MockComponentManager_StateManager_Call) RunAndReturn(run func() components.StateManager) *MockComponentManager_StateManager_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockComponentManager
func (_mock *MockComponentManager) Stop() {
	_mock.Called()
	return
}

// MockComponentManager_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockComponentManager_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockComponentManager_Expecter) Stop() *MockComponentManager_Stop_Call {
	return &MockComponentManager_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockComponentManager_Stop_Call) Run(run func()) *MockComponentManager_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponentManager_Stop_Call) Return() *MockComponentManager_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockComponentManager_Stop_Call) RunAndReturn(run func()) *MockComponentManager_Stop_Call {
	_c.Run(run)
	return _c
}

// TransportManager provides a mock function for the type MockComponentManager
func (_mock *MockComponentManager) TransportManager() components.TransportManager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for TransportManager")
	}

	var r0 components.TransportManager
	if returnFunc, ok := ret.Get(0).(func() components.TransportManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(components.TransportManager)
		}
	}
	return r0
}

// MockComponentManager_TransportManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransportManager'
type MockComponentManager_TransportManager_Call struct {
	*mock.Call
}

// TransportManager is a helper method to define mock.On call
func (_e *MockComponentManager_Expecter) TransportManager() *MockComponentManager_TransportManager_Call {
	return &MockComponentManager_TransportManager_Call{Call: _e.mock.On("TransportManager")}
}

func (_c *MockComponentManager_TransportManager_Call) Run(run func()) *MockComponentManager_TransportManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponentManager_TransportManager_Call) Return(transportManager components.TransportManager) *MockComponentManager_TransportManager_Call {
	_c.Call.Return(transportManager)
	return _c
}

func (_c *MockComponentManager_TransportManager_Call) RunAndReturn(run func() components.TransportManager) *MockComponentManager_TransportManager_Call {
	_c.Call.Return(run)
	return _c
}

// TxManager provides a mock function for the type MockComponentManager
func (_mock *MockComponentManager) TxManager() components.TXManager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for TxManager")
	}

	var r0 components.TXManager
	if returnFunc, ok := ret.Get(0).(func() components.TXManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(components.TXManager)
		}
	}
	return r0
}

// MockComponentManager_TxManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TxManager'
type MockComponentManager_TxManager_Call struct {
	*mock.Call
}

// TxManager is a helper method to define mock.On call
func (_e *MockComponentManager_Expecter) TxManager() *MockComponentManager_TxManager_Call {
	return &MockComponentManager_TxManager_Call{Call: _e.mock.On("TxManager")}
}

func (_c *MockComponentManager_TxManager_Call) Run(run func()) *MockComponentManager_TxManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponentManager_TxManager_Call) Return(tXManager components.TXManager) *MockComponentManager_TxManager_Call {
	_c.Call.Return(tXManager)
	return _c
}

func (_c *MockComponentManager_TxManager_Call) RunAndReturn(run func() components.TXManager) *MockComponentManager_TxManager_Call {
	_c.Call.Return(run)
	return _c
}

// newMockstoppable creates a new instance of mockstoppable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockstoppable(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockstoppable {
	mock := &mockstoppable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockstoppable is an autogenerated mock type for the stoppable type
type mockstoppable struct {
	mock.Mock
}

type mockstoppable_Expecter struct {
	mock *mock.Mock
}

func (_m *mockstoppable) EXPECT() *mockstoppable_Expecter {
	return &mockstoppable_Expecter{mock: &_m.Mock}
}

// Stop provides a mock function for the type mockstoppable
func (_mock *mockstoppable) Stop() {
	_mock.Called()
	return
}

// mockstoppable_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type mockstoppable_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *mockstoppable_Expecter) Stop() *mockstoppable_Stop_Call {
	return &mockstoppable_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *mockstoppable_Stop_Call) Run(run func()) *mockstoppable_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockstoppable_Stop_Call) Return() *mockstoppable_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockstoppable_Stop_Call) RunAndReturn(run func()) *mockstoppable_Stop_Call {
	_c.Run(run)
	return _c
}

// newMockcloseable creates a new instance of mockcloseable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockcloseable(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockcloseable {
	mock := &mockcloseable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockcloseable is an autogenerated mock type for the closeable type
type mockcloseable struct {
	mock.Mock
}

type mockcloseable_Expecter struct {
	mock *mock.Mock
}

func (_m *mockcloseable) EXPECT() *mockcloseable_Expecter {
	return &mockcloseable_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type mockcloseable
func (_mock *mockcloseable) Close() {
	_mock.Called()
	return
}

// mockcloseable_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type mockcloseable_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *mockcloseable_Expecter) Close() *mockcloseable_Close_Call {
	return &mockcloseable_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *mockcloseable_Close_Call) Run(run func()) *mockcloseable_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockcloseable_Close_Call) Return() *mockcloseable_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockcloseable_Close_Call) RunAndReturn(run func()) *mockcloseable_Close_Call {
	_c.Run(run)
	return _c
}
