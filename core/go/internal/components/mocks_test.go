// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package components

import (
	"context"

	"github.com/LF-Decentralized-Trust-labs/paladin/config/pkg/pldconf"
	"github.com/LF-Decentralized-Trust-labs/paladin/core/internal/metrics"
	"github.com/LF-Decentralized-Trust-labs/paladin/core/pkg/blockindexer"
	"github.com/LF-Decentralized-Trust-labs/paladin/core/pkg/ethclient"
	"github.com/LF-Decentralized-Trust-labs/paladin/core/pkg/persistence"
	"github.com/LF-Decentralized-Trust-labs/paladin/sdk/go/pkg/pldapi"
	"github.com/LF-Decentralized-Trust-labs/paladin/sdk/go/pkg/pldtypes"
	"github.com/LF-Decentralized-Trust-labs/paladin/sdk/go/pkg/query"
	"github.com/LF-Decentralized-Trust-labs/paladin/toolkit/pkg/plugintk"
	"github.com/LF-Decentralized-Trust-labs/paladin/toolkit/pkg/prototk"
	"github.com/LF-Decentralized-Trust-labs/paladin/toolkit/pkg/rpcserver"
	"github.com/LF-Decentralized-Trust-labs/paladin/toolkit/pkg/signer"
	"github.com/LF-Decentralized-Trust-labs/paladin/toolkit/pkg/signerapi"
	"github.com/google/uuid"
	"github.com/hyperledger/firefly-signer/pkg/abi"
	mock "github.com/stretchr/testify/mock"
)

// NewMockPreInitComponents creates a new instance of MockPreInitComponents. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPreInitComponents(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPreInitComponents {
	mock := &MockPreInitComponents{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPreInitComponents is an autogenerated mock type for the PreInitComponents type
type MockPreInitComponents struct {
	mock.Mock
}

type MockPreInitComponents_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPreInitComponents) EXPECT() *MockPreInitComponents_Expecter {
	return &MockPreInitComponents_Expecter{mock: &_m.Mock}
}

// BlockIndexer provides a mock function for the type MockPreInitComponents
func (_mock *MockPreInitComponents) BlockIndexer() blockindexer.BlockIndexer {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for BlockIndexer")
	}

	var r0 blockindexer.BlockIndexer
	if returnFunc, ok := ret.Get(0).(func() blockindexer.BlockIndexer); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(blockindexer.BlockIndexer)
		}
	}
	return r0
}

// MockPreInitComponents_BlockIndexer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockIndexer'
type MockPreInitComponents_BlockIndexer_Call struct {
	*mock.Call
}

// BlockIndexer is a helper method to define mock.On call
func (_e *MockPreInitComponents_Expecter) BlockIndexer() *MockPreInitComponents_BlockIndexer_Call {
	return &MockPreInitComponents_BlockIndexer_Call{Call: _e.mock.On("BlockIndexer")}
}

func (_c *MockPreInitComponents_BlockIndexer_Call) Run(run func()) *MockPreInitComponents_BlockIndexer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPreInitComponents_BlockIndexer_Call) Return(blockIndexer blockindexer.BlockIndexer) *MockPreInitComponents_BlockIndexer_Call {
	_c.Call.Return(blockIndexer)
	return _c
}

func (_c *MockPreInitComponents_BlockIndexer_Call) RunAndReturn(run func() blockindexer.BlockIndexer) *MockPreInitComponents_BlockIndexer_Call {
	_c.Call.Return(run)
	return _c
}

// EthClientFactory provides a mock function for the type MockPreInitComponents
func (_mock *MockPreInitComponents) EthClientFactory() ethclient.EthClientFactory {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for EthClientFactory")
	}

	var r0 ethclient.EthClientFactory
	if returnFunc, ok := ret.Get(0).(func() ethclient.EthClientFactory); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ethclient.EthClientFactory)
		}
	}
	return r0
}

// MockPreInitComponents_EthClientFactory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EthClientFactory'
type MockPreInitComponents_EthClientFactory_Call struct {
	*mock.Call
}

// EthClientFactory is a helper method to define mock.On call
func (_e *MockPreInitComponents_Expecter) EthClientFactory() *MockPreInitComponents_EthClientFactory_Call {
	return &MockPreInitComponents_EthClientFactory_Call{Call: _e.mock.On("EthClientFactory")}
}

func (_c *MockPreInitComponents_EthClientFactory_Call) Run(run func()) *MockPreInitComponents_EthClientFactory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPreInitComponents_EthClientFactory_Call) Return(ethClientFactory ethclient.EthClientFactory) *MockPreInitComponents_EthClientFactory_Call {
	_c.Call.Return(ethClientFactory)
	return _c
}

func (_c *MockPreInitComponents_EthClientFactory_Call) RunAndReturn(run func() ethclient.EthClientFactory) *MockPreInitComponents_EthClientFactory_Call {
	_c.Call.Return(run)
	return _c
}

// KeyManager provides a mock function for the type MockPreInitComponents
func (_mock *MockPreInitComponents) KeyManager() KeyManager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for KeyManager")
	}

	var r0 KeyManager
	if returnFunc, ok := ret.Get(0).(func() KeyManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(KeyManager)
		}
	}
	return r0
}

// MockPreInitComponents_KeyManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KeyManager'
type MockPreInitComponents_KeyManager_Call struct {
	*mock.Call
}

// KeyManager is a helper method to define mock.On call
func (_e *MockPreInitComponents_Expecter) KeyManager() *MockPreInitComponents_KeyManager_Call {
	return &MockPreInitComponents_KeyManager_Call{Call: _e.mock.On("KeyManager")}
}

func (_c *MockPreInitComponents_KeyManager_Call) Run(run func()) *MockPreInitComponents_KeyManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPreInitComponents_KeyManager_Call) Return(keyManager KeyManager) *MockPreInitComponents_KeyManager_Call {
	_c.Call.Return(keyManager)
	return _c
}

func (_c *MockPreInitComponents_KeyManager_Call) RunAndReturn(run func() KeyManager) *MockPreInitComponents_KeyManager_Call {
	_c.Call.Return(run)
	return _c
}

// MetricsManager provides a mock function for the type MockPreInitComponents
func (_mock *MockPreInitComponents) MetricsManager() metrics.Metrics {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for MetricsManager")
	}

	var r0 metrics.Metrics
	if returnFunc, ok := ret.Get(0).(func() metrics.Metrics); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metrics.Metrics)
		}
	}
	return r0
}

// MockPreInitComponents_MetricsManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MetricsManager'
type MockPreInitComponents_MetricsManager_Call struct {
	*mock.Call
}

// MetricsManager is a helper method to define mock.On call
func (_e *MockPreInitComponents_Expecter) MetricsManager() *MockPreInitComponents_MetricsManager_Call {
	return &MockPreInitComponents_MetricsManager_Call{Call: _e.mock.On("MetricsManager")}
}

func (_c *MockPreInitComponents_MetricsManager_Call) Run(run func()) *MockPreInitComponents_MetricsManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPreInitComponents_MetricsManager_Call) Return(metrics1 metrics.Metrics) *MockPreInitComponents_MetricsManager_Call {
	_c.Call.Return(metrics1)
	return _c
}

func (_c *MockPreInitComponents_MetricsManager_Call) RunAndReturn(run func() metrics.Metrics) *MockPreInitComponents_MetricsManager_Call {
	_c.Call.Return(run)
	return _c
}

// Persistence provides a mock function for the type MockPreInitComponents
func (_mock *MockPreInitComponents) Persistence() persistence.Persistence {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Persistence")
	}

	var r0 persistence.Persistence
	if returnFunc, ok := ret.Get(0).(func() persistence.Persistence); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(persistence.Persistence)
		}
	}
	return r0
}

// MockPreInitComponents_Persistence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Persistence'
type MockPreInitComponents_Persistence_Call struct {
	*mock.Call
}

// Persistence is a helper method to define mock.On call
func (_e *MockPreInitComponents_Expecter) Persistence() *MockPreInitComponents_Persistence_Call {
	return &MockPreInitComponents_Persistence_Call{Call: _e.mock.On("Persistence")}
}

func (_c *MockPreInitComponents_Persistence_Call) Run(run func()) *MockPreInitComponents_Persistence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPreInitComponents_Persistence_Call) Return(persistence1 persistence.Persistence) *MockPreInitComponents_Persistence_Call {
	_c.Call.Return(persistence1)
	return _c
}

func (_c *MockPreInitComponents_Persistence_Call) RunAndReturn(run func() persistence.Persistence) *MockPreInitComponents_Persistence_Call {
	_c.Call.Return(run)
	return _c
}

// RPCServer provides a mock function for the type MockPreInitComponents
func (_mock *MockPreInitComponents) RPCServer() rpcserver.RPCServer {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for RPCServer")
	}

	var r0 rpcserver.RPCServer
	if returnFunc, ok := ret.Get(0).(func() rpcserver.RPCServer); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rpcserver.RPCServer)
		}
	}
	return r0
}

// MockPreInitComponents_RPCServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RPCServer'
type MockPreInitComponents_RPCServer_Call struct {
	*mock.Call
}

// RPCServer is a helper method to define mock.On call
func (_e *MockPreInitComponents_Expecter) RPCServer() *MockPreInitComponents_RPCServer_Call {
	return &MockPreInitComponents_RPCServer_Call{Call: _e.mock.On("RPCServer")}
}

func (_c *MockPreInitComponents_RPCServer_Call) Run(run func()) *MockPreInitComponents_RPCServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPreInitComponents_RPCServer_Call) Return(rPCServer rpcserver.RPCServer) *MockPreInitComponents_RPCServer_Call {
	_c.Call.Return(rPCServer)
	return _c
}

func (_c *MockPreInitComponents_RPCServer_Call) RunAndReturn(run func() rpcserver.RPCServer) *MockPreInitComponents_RPCServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockManagers creates a new instance of MockManagers. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManagers(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManagers {
	mock := &MockManagers{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockManagers is an autogenerated mock type for the Managers type
type MockManagers struct {
	mock.Mock
}

type MockManagers_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManagers) EXPECT() *MockManagers_Expecter {
	return &MockManagers_Expecter{mock: &_m.Mock}
}

// DomainManager provides a mock function for the type MockManagers
func (_mock *MockManagers) DomainManager() DomainManager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for DomainManager")
	}

	var r0 DomainManager
	if returnFunc, ok := ret.Get(0).(func() DomainManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(DomainManager)
		}
	}
	return r0
}

// MockManagers_DomainManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DomainManager'
type MockManagers_DomainManager_Call struct {
	*mock.Call
}

// DomainManager is a helper method to define mock.On call
func (_e *MockManagers_Expecter) DomainManager() *MockManagers_DomainManager_Call {
	return &MockManagers_DomainManager_Call{Call: _e.mock.On("DomainManager")}
}

func (_c *MockManagers_DomainManager_Call) Run(run func()) *MockManagers_DomainManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManagers_DomainManager_Call) Return(domainManager DomainManager) *MockManagers_DomainManager_Call {
	_c.Call.Return(domainManager)
	return _c
}

func (_c *MockManagers_DomainManager_Call) RunAndReturn(run func() DomainManager) *MockManagers_DomainManager_Call {
	_c.Call.Return(run)
	return _c
}

// GroupManager provides a mock function for the type MockManagers
func (_mock *MockManagers) GroupManager() GroupManager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GroupManager")
	}

	var r0 GroupManager
	if returnFunc, ok := ret.Get(0).(func() GroupManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(GroupManager)
		}
	}
	return r0
}

// MockManagers_GroupManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GroupManager'
type MockManagers_GroupManager_Call struct {
	*mock.Call
}

// GroupManager is a helper method to define mock.On call
func (_e *MockManagers_Expecter) GroupManager() *MockManagers_GroupManager_Call {
	return &MockManagers_GroupManager_Call{Call: _e.mock.On("GroupManager")}
}

func (_c *MockManagers_GroupManager_Call) Run(run func()) *MockManagers_GroupManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManagers_GroupManager_Call) Return(groupManager GroupManager) *MockManagers_GroupManager_Call {
	_c.Call.Return(groupManager)
	return _c
}

func (_c *MockManagers_GroupManager_Call) RunAndReturn(run func() GroupManager) *MockManagers_GroupManager_Call {
	_c.Call.Return(run)
	return _c
}

// IdentityResolver provides a mock function for the type MockManagers
func (_mock *MockManagers) IdentityResolver() IdentityResolver {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IdentityResolver")
	}

	var r0 IdentityResolver
	if returnFunc, ok := ret.Get(0).(func() IdentityResolver); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(IdentityResolver)
		}
	}
	return r0
}

// MockManagers_IdentityResolver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IdentityResolver'
type MockManagers_IdentityResolver_Call struct {
	*mock.Call
}

// IdentityResolver is a helper method to define mock.On call
func (_e *MockManagers_Expecter) IdentityResolver() *MockManagers_IdentityResolver_Call {
	return &MockManagers_IdentityResolver_Call{Call: _e.mock.On("IdentityResolver")}
}

func (_c *MockManagers_IdentityResolver_Call) Run(run func()) *MockManagers_IdentityResolver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManagers_IdentityResolver_Call) Return(identityResolver IdentityResolver) *MockManagers_IdentityResolver_Call {
	_c.Call.Return(identityResolver)
	return _c
}

func (_c *MockManagers_IdentityResolver_Call) RunAndReturn(run func() IdentityResolver) *MockManagers_IdentityResolver_Call {
	_c.Call.Return(run)
	return _c
}

// PluginManager provides a mock function for the type MockManagers
func (_mock *MockManagers) PluginManager() PluginManager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for PluginManager")
	}

	var r0 PluginManager
	if returnFunc, ok := ret.Get(0).(func() PluginManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(PluginManager)
		}
	}
	return r0
}

// MockManagers_PluginManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PluginManager'
type MockManagers_PluginManager_Call struct {
	*mock.Call
}

// PluginManager is a helper method to define mock.On call
func (_e *MockManagers_Expecter) PluginManager() *MockManagers_PluginManager_Call {
	return &MockManagers_PluginManager_Call{Call: _e.mock.On("PluginManager")}
}

func (_c *MockManagers_PluginManager_Call) Run(run func()) *MockManagers_PluginManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManagers_PluginManager_Call) Return(pluginManager PluginManager) *MockManagers_PluginManager_Call {
	_c.Call.Return(pluginManager)
	return _c
}

func (_c *MockManagers_PluginManager_Call) RunAndReturn(run func() PluginManager) *MockManagers_PluginManager_Call {
	_c.Call.Return(run)
	return _c
}

// PrivateTxManager provides a mock function for the type MockManagers
func (_mock *MockManagers) PrivateTxManager() PrivateTxManager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for PrivateTxManager")
	}

	var r0 PrivateTxManager
	if returnFunc, ok := ret.Get(0).(func() PrivateTxManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(PrivateTxManager)
		}
	}
	return r0
}

// MockManagers_PrivateTxManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrivateTxManager'
type MockManagers_PrivateTxManager_Call struct {
	*mock.Call
}

// PrivateTxManager is a helper method to define mock.On call
func (_e *MockManagers_Expecter) PrivateTxManager() *MockManagers_PrivateTxManager_Call {
	return &MockManagers_PrivateTxManager_Call{Call: _e.mock.On("PrivateTxManager")}
}

func (_c *MockManagers_PrivateTxManager_Call) Run(run func()) *MockManagers_PrivateTxManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManagers_PrivateTxManager_Call) Return(privateTxManager PrivateTxManager) *MockManagers_PrivateTxManager_Call {
	_c.Call.Return(privateTxManager)
	return _c
}

func (_c *MockManagers_PrivateTxManager_Call) RunAndReturn(run func() PrivateTxManager) *MockManagers_PrivateTxManager_Call {
	_c.Call.Return(run)
	return _c
}

// PublicTxManager provides a mock function for the type MockManagers
func (_mock *MockManagers) PublicTxManager() PublicTxManager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for PublicTxManager")
	}

	var r0 PublicTxManager
	if returnFunc, ok := ret.Get(0).(func() PublicTxManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(PublicTxManager)
		}
	}
	return r0
}

// MockManagers_PublicTxManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublicTxManager'
type MockManagers_PublicTxManager_Call struct {
	*mock.Call
}

// PublicTxManager is a helper method to define mock.On call
func (_e *MockManagers_Expecter) PublicTxManager() *MockManagers_PublicTxManager_Call {
	return &MockManagers_PublicTxManager_Call{Call: _e.mock.On("PublicTxManager")}
}

func (_c *MockManagers_PublicTxManager_Call) Run(run func()) *MockManagers_PublicTxManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManagers_PublicTxManager_Call) Return(publicTxManager PublicTxManager) *MockManagers_PublicTxManager_Call {
	_c.Call.Return(publicTxManager)
	return _c
}

func (_c *MockManagers_PublicTxManager_Call) RunAndReturn(run func() PublicTxManager) *MockManagers_PublicTxManager_Call {
	_c.Call.Return(run)
	return _c
}

// RegistryManager provides a mock function for the type MockManagers
func (_mock *MockManagers) RegistryManager() RegistryManager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for RegistryManager")
	}

	var r0 RegistryManager
	if returnFunc, ok := ret.Get(0).(func() RegistryManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RegistryManager)
		}
	}
	return r0
}

// MockManagers_RegistryManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegistryManager'
type MockManagers_RegistryManager_Call struct {
	*mock.Call
}

// RegistryManager is a helper method to define mock.On call
func (_e *MockManagers_Expecter) RegistryManager() *MockManagers_RegistryManager_Call {
	return &MockManagers_RegistryManager_Call{Call: _e.mock.On("RegistryManager")}
}

func (_c *MockManagers_RegistryManager_Call) Run(run func()) *MockManagers_RegistryManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManagers_RegistryManager_Call) Return(registryManager RegistryManager) *MockManagers_RegistryManager_Call {
	_c.Call.Return(registryManager)
	return _c
}

func (_c *MockManagers_RegistryManager_Call) RunAndReturn(run func() RegistryManager) *MockManagers_RegistryManager_Call {
	_c.Call.Return(run)
	return _c
}

// StateManager provides a mock function for the type MockManagers
func (_mock *MockManagers) StateManager() StateManager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for StateManager")
	}

	var r0 StateManager
	if returnFunc, ok := ret.Get(0).(func() StateManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(StateManager)
		}
	}
	return r0
}

// MockManagers_StateManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StateManager'
type MockManagers_StateManager_Call struct {
	*mock.Call
}

// StateManager is a helper method to define mock.On call
func (_e *MockManagers_Expecter) StateManager() *MockManagers_StateManager_Call {
	return &MockManagers_StateManager_Call{Call: _e.mock.On("StateManager")}
}

func (_c *MockManagers_StateManager_Call) Run(run func()) *MockManagers_StateManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManagers_StateManager_Call) Return(stateManager StateManager) *MockManagers_StateManager_Call {
	_c.Call.Return(stateManager)
	return _c
}

func (_c *MockManagers_StateManager_Call) RunAndReturn(run func() StateManager) *MockManagers_StateManager_Call {
	_c.Call.Return(run)
	return _c
}

// TransportManager provides a mock function for the type MockManagers
func (_mock *MockManagers) TransportManager() TransportManager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for TransportManager")
	}

	var r0 TransportManager
	if returnFunc, ok := ret.Get(0).(func() TransportManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(TransportManager)
		}
	}
	return r0
}

// MockManagers_TransportManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransportManager'
type MockManagers_TransportManager_Call struct {
	*mock.Call
}

// TransportManager is a helper method to define mock.On call
func (_e *MockManagers_Expecter) TransportManager() *MockManagers_TransportManager_Call {
	return &MockManagers_TransportManager_Call{Call: _e.mock.On("TransportManager")}
}

func (_c *MockManagers_TransportManager_Call) Run(run func()) *MockManagers_TransportManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManagers_TransportManager_Call) Return(transportManager TransportManager) *MockManagers_TransportManager_Call {
	_c.Call.Return(transportManager)
	return _c
}

func (_c *MockManagers_TransportManager_Call) RunAndReturn(run func() TransportManager) *MockManagers_TransportManager_Call {
	_c.Call.Return(run)
	return _c
}

// TxManager provides a mock function for the type MockManagers
func (_mock *MockManagers) TxManager() TXManager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for TxManager")
	}

	var r0 TXManager
	if returnFunc, ok := ret.Get(0).(func() TXManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(TXManager)
		}
	}
	return r0
}

// MockManagers_TxManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TxManager'
type MockManagers_TxManager_Call struct {
	*mock.Call
}

// TxManager is a helper method to define mock.On call
func (_e *MockManagers_Expecter) TxManager() *MockManagers_TxManager_Call {
	return &MockManagers_TxManager_Call{Call: _e.mock.On("TxManager")}
}

func (_c *MockManagers_TxManager_Call) Run(run func()) *MockManagers_TxManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManagers_TxManager_Call) Return(tXManager TXManager) *MockManagers_TxManager_Call {
	_c.Call.Return(tXManager)
	return _c
}

func (_c *MockManagers_TxManager_Call) RunAndReturn(run func() TXManager) *MockManagers_TxManager_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockManagerLifecycle creates a new instance of MockManagerLifecycle. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManagerLifecycle(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManagerLifecycle {
	mock := &MockManagerLifecycle{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockManagerLifecycle is an autogenerated mock type for the ManagerLifecycle type
type MockManagerLifecycle struct {
	mock.Mock
}

type MockManagerLifecycle_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManagerLifecycle) EXPECT() *MockManagerLifecycle_Expecter {
	return &MockManagerLifecycle_Expecter{mock: &_m.Mock}
}

// PostInit provides a mock function for the type MockManagerLifecycle
func (_mock *MockManagerLifecycle) PostInit(allComponents AllComponents) error {
	ret := _mock.Called(allComponents)

	if len(ret) == 0 {
		panic("no return value specified for PostInit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(AllComponents) error); ok {
		r0 = returnFunc(allComponents)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockManagerLifecycle_PostInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostInit'
type MockManagerLifecycle_PostInit_Call struct {
	*mock.Call
}

// PostInit is a helper method to define mock.On call
//   - allComponents AllComponents
func (_e *MockManagerLifecycle_Expecter) PostInit(allComponents interface{}) *MockManagerLifecycle_PostInit_Call {
	return &MockManagerLifecycle_PostInit_Call{Call: _e.mock.On("PostInit", allComponents)}
}

func (_c *MockManagerLifecycle_PostInit_Call) Run(run func(allComponents AllComponents)) *MockManagerLifecycle_PostInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 AllComponents
		if args[0] != nil {
			arg0 = args[0].(AllComponents)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockManagerLifecycle_PostInit_Call) Return(err error) *MockManagerLifecycle_PostInit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockManagerLifecycle_PostInit_Call) RunAndReturn(run func(allComponents AllComponents) error) *MockManagerLifecycle_PostInit_Call {
	_c.Call.Return(run)
	return _c
}

// PreInit provides a mock function for the type MockManagerLifecycle
func (_mock *MockManagerLifecycle) PreInit(preInitComponents PreInitComponents) (*ManagerInitResult, error) {
	ret := _mock.Called(preInitComponents)

	if len(ret) == 0 {
		panic("no return value specified for PreInit")
	}

	var r0 *ManagerInitResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(PreInitComponents) (*ManagerInitResult, error)); ok {
		return returnFunc(preInitComponents)
	}
	if returnFunc, ok := ret.Get(0).(func(PreInitComponents) *ManagerInitResult); ok {
		r0 = returnFunc(preInitComponents)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ManagerInitResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(PreInitComponents) error); ok {
		r1 = returnFunc(preInitComponents)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockManagerLifecycle_PreInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreInit'
type MockManagerLifecycle_PreInit_Call struct {
	*mock.Call
}

// PreInit is a helper method to define mock.On call
//   - preInitComponents PreInitComponents
func (_e *MockManagerLifecycle_Expecter) PreInit(preInitComponents interface{}) *MockManagerLifecycle_PreInit_Call {
	return &MockManagerLifecycle_PreInit_Call{Call: _e.mock.On("PreInit", preInitComponents)}
}

func (_c *MockManagerLifecycle_PreInit_Call) Run(run func(preInitComponents PreInitComponents)) *MockManagerLifecycle_PreInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 PreInitComponents
		if args[0] != nil {
			arg0 = args[0].(PreInitComponents)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockManagerLifecycle_PreInit_Call) Return(managerInitResult *ManagerInitResult, err error) *MockManagerLifecycle_PreInit_Call {
	_c.Call.Return(managerInitResult, err)
	return _c
}

func (_c *MockManagerLifecycle_PreInit_Call) RunAndReturn(run func(preInitComponents PreInitComponents) (*ManagerInitResult, error)) *MockManagerLifecycle_PreInit_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockManagerLifecycle
func (_mock *MockManagerLifecycle) Start() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockManagerLifecycle_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockManagerLifecycle_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockManagerLifecycle_Expecter) Start() *MockManagerLifecycle_Start_Call {
	return &MockManagerLifecycle_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockManagerLifecycle_Start_Call) Run(run func()) *MockManagerLifecycle_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManagerLifecycle_Start_Call) Return(err error) *MockManagerLifecycle_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockManagerLifecycle_Start_Call) RunAndReturn(run func() error) *MockManagerLifecycle_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockManagerLifecycle
func (_mock *MockManagerLifecycle) Stop() {
	_mock.Called()
	return
}

// MockManagerLifecycle_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockManagerLifecycle_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockManagerLifecycle_Expecter) Stop() *MockManagerLifecycle_Stop_Call {
	return &MockManagerLifecycle_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockManagerLifecycle_Stop_Call) Run(run func()) *MockManagerLifecycle_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManagerLifecycle_Stop_Call) Return() *MockManagerLifecycle_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManagerLifecycle_Stop_Call) RunAndReturn(run func()) *MockManagerLifecycle_Stop_Call {
	_c.Run(run)
	return _c
}

// NewMockAdditionalManager creates a new instance of MockAdditionalManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAdditionalManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAdditionalManager {
	mock := &MockAdditionalManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAdditionalManager is an autogenerated mock type for the AdditionalManager type
type MockAdditionalManager struct {
	mock.Mock
}

type MockAdditionalManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAdditionalManager) EXPECT() *MockAdditionalManager_Expecter {
	return &MockAdditionalManager_Expecter{mock: &_m.Mock}
}

// Name provides a mock function for the type MockAdditionalManager
func (_mock *MockAdditionalManager) Name() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockAdditionalManager_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockAdditionalManager_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockAdditionalManager_Expecter) Name() *MockAdditionalManager_Name_Call {
	return &MockAdditionalManager_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockAdditionalManager_Name_Call) Run(run func()) *MockAdditionalManager_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAdditionalManager_Name_Call) Return(s string) *MockAdditionalManager_Name_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockAdditionalManager_Name_Call) RunAndReturn(run func() string) *MockAdditionalManager_Name_Call {
	_c.Call.Return(run)
	return _c
}

// PostInit provides a mock function for the type MockAdditionalManager
func (_mock *MockAdditionalManager) PostInit(allComponents AllComponents) error {
	ret := _mock.Called(allComponents)

	if len(ret) == 0 {
		panic("no return value specified for PostInit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(AllComponents) error); ok {
		r0 = returnFunc(allComponents)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAdditionalManager_PostInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostInit'
type MockAdditionalManager_PostInit_Call struct {
	*mock.Call
}

// PostInit is a helper method to define mock.On call
//   - allComponents AllComponents
func (_e *MockAdditionalManager_Expecter) PostInit(allComponents interface{}) *MockAdditionalManager_PostInit_Call {
	return &MockAdditionalManager_PostInit_Call{Call: _e.mock.On("PostInit", allComponents)}
}

func (_c *MockAdditionalManager_PostInit_Call) Run(run func(allComponents AllComponents)) *MockAdditionalManager_PostInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 AllComponents
		if args[0] != nil {
			arg0 = args[0].(AllComponents)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAdditionalManager_PostInit_Call) Return(err error) *MockAdditionalManager_PostInit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAdditionalManager_PostInit_Call) RunAndReturn(run func(allComponents AllComponents) error) *MockAdditionalManager_PostInit_Call {
	_c.Call.Return(run)
	return _c
}

// PreInit provides a mock function for the type MockAdditionalManager
func (_mock *MockAdditionalManager) PreInit(preInitComponents PreInitComponents) (*ManagerInitResult, error) {
	ret := _mock.Called(preInitComponents)

	if len(ret) == 0 {
		panic("no return value specified for PreInit")
	}

	var r0 *ManagerInitResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(PreInitComponents) (*ManagerInitResult, error)); ok {
		return returnFunc(preInitComponents)
	}
	if returnFunc, ok := ret.Get(0).(func(PreInitComponents) *ManagerInitResult); ok {
		r0 = returnFunc(preInitComponents)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ManagerInitResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(PreInitComponents) error); ok {
		r1 = returnFunc(preInitComponents)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAdditionalManager_PreInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreInit'
type MockAdditionalManager_PreInit_Call struct {
	*mock.Call
}

// PreInit is a helper method to define mock.On call
//   - preInitComponents PreInitComponents
func (_e *MockAdditionalManager_Expecter) PreInit(preInitComponents interface{}) *MockAdditionalManager_PreInit_Call {
	return &MockAdditionalManager_PreInit_Call{Call: _e.mock.On("PreInit", preInitComponents)}
}

func (_c *MockAdditionalManager_PreInit_Call) Run(run func(preInitComponents PreInitComponents)) *MockAdditionalManager_PreInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 PreInitComponents
		if args[0] != nil {
			arg0 = args[0].(PreInitComponents)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAdditionalManager_PreInit_Call) Return(managerInitResult *ManagerInitResult, err error) *MockAdditionalManager_PreInit_Call {
	_c.Call.Return(managerInitResult, err)
	return _c
}

func (_c *MockAdditionalManager_PreInit_Call) RunAndReturn(run func(preInitComponents PreInitComponents) (*ManagerInitResult, error)) *MockAdditionalManager_PreInit_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockAdditionalManager
func (_mock *MockAdditionalManager) Start() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAdditionalManager_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockAdditionalManager_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockAdditionalManager_Expecter) Start() *MockAdditionalManager_Start_Call {
	return &MockAdditionalManager_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockAdditionalManager_Start_Call) Run(run func()) *MockAdditionalManager_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAdditionalManager_Start_Call) Return(err error) *MockAdditionalManager_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAdditionalManager_Start_Call) RunAndReturn(run func() error) *MockAdditionalManager_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockAdditionalManager
func (_mock *MockAdditionalManager) Stop() {
	_mock.Called()
	return
}

// MockAdditionalManager_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockAdditionalManager_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockAdditionalManager_Expecter) Stop() *MockAdditionalManager_Stop_Call {
	return &MockAdditionalManager_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockAdditionalManager_Stop_Call) Run(run func()) *MockAdditionalManager_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAdditionalManager_Stop_Call) Return() *MockAdditionalManager_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAdditionalManager_Stop_Call) RunAndReturn(run func()) *MockAdditionalManager_Stop_Call {
	_c.Run(run)
	return _c
}

// NewMockAllComponents creates a new instance of MockAllComponents. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAllComponents(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAllComponents {
	mock := &MockAllComponents{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAllComponents is an autogenerated mock type for the AllComponents type
type MockAllComponents struct {
	mock.Mock
}

type MockAllComponents_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAllComponents) EXPECT() *MockAllComponents_Expecter {
	return &MockAllComponents_Expecter{mock: &_m.Mock}
}

// BlockIndexer provides a mock function for the type MockAllComponents
func (_mock *MockAllComponents) BlockIndexer() blockindexer.BlockIndexer {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for BlockIndexer")
	}

	var r0 blockindexer.BlockIndexer
	if returnFunc, ok := ret.Get(0).(func() blockindexer.BlockIndexer); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(blockindexer.BlockIndexer)
		}
	}
	return r0
}

// MockAllComponents_BlockIndexer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockIndexer'
type MockAllComponents_BlockIndexer_Call struct {
	*mock.Call
}

// BlockIndexer is a helper method to define mock.On call
func (_e *MockAllComponents_Expecter) BlockIndexer() *MockAllComponents_BlockIndexer_Call {
	return &MockAllComponents_BlockIndexer_Call{Call: _e.mock.On("BlockIndexer")}
}

func (_c *MockAllComponents_BlockIndexer_Call) Run(run func()) *MockAllComponents_BlockIndexer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAllComponents_BlockIndexer_Call) Return(blockIndexer blockindexer.BlockIndexer) *MockAllComponents_BlockIndexer_Call {
	_c.Call.Return(blockIndexer)
	return _c
}

func (_c *MockAllComponents_BlockIndexer_Call) RunAndReturn(run func() blockindexer.BlockIndexer) *MockAllComponents_BlockIndexer_Call {
	_c.Call.Return(run)
	return _c
}

// DomainManager provides a mock function for the type MockAllComponents
func (_mock *MockAllComponents) DomainManager() DomainManager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for DomainManager")
	}

	var r0 DomainManager
	if returnFunc, ok := ret.Get(0).(func() DomainManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(DomainManager)
		}
	}
	return r0
}

// MockAllComponents_DomainManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DomainManager'
type MockAllComponents_DomainManager_Call struct {
	*mock.Call
}

// DomainManager is a helper method to define mock.On call
func (_e *MockAllComponents_Expecter) DomainManager() *MockAllComponents_DomainManager_Call {
	return &MockAllComponents_DomainManager_Call{Call: _e.mock.On("DomainManager")}
}

func (_c *MockAllComponents_DomainManager_Call) Run(run func()) *MockAllComponents_DomainManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAllComponents_DomainManager_Call) Return(domainManager DomainManager) *MockAllComponents_DomainManager_Call {
	_c.Call.Return(domainManager)
	return _c
}

func (_c *MockAllComponents_DomainManager_Call) RunAndReturn(run func() DomainManager) *MockAllComponents_DomainManager_Call {
	_c.Call.Return(run)
	return _c
}

// EthClientFactory provides a mock function for the type MockAllComponents
func (_mock *MockAllComponents) EthClientFactory() ethclient.EthClientFactory {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for EthClientFactory")
	}

	var r0 ethclient.EthClientFactory
	if returnFunc, ok := ret.Get(0).(func() ethclient.EthClientFactory); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ethclient.EthClientFactory)
		}
	}
	return r0
}

// MockAllComponents_EthClientFactory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EthClientFactory'
type MockAllComponents_EthClientFactory_Call struct {
	*mock.Call
}

// EthClientFactory is a helper method to define mock.On call
func (_e *MockAllComponents_Expecter) EthClientFactory() *MockAllComponents_EthClientFactory_Call {
	return &MockAllComponents_EthClientFactory_Call{Call: _e.mock.On("EthClientFactory")}
}

func (_c *MockAllComponents_EthClientFactory_Call) Run(run func()) *MockAllComponents_EthClientFactory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAllComponents_EthClientFactory_Call) Return(ethClientFactory ethclient.EthClientFactory) *MockAllComponents_EthClientFactory_Call {
	_c.Call.Return(ethClientFactory)
	return _c
}

func (_c *MockAllComponents_EthClientFactory_Call) RunAndReturn(run func() ethclient.EthClientFactory) *MockAllComponents_EthClientFactory_Call {
	_c.Call.Return(run)
	return _c
}

// GroupManager provides a mock function for the type MockAllComponents
func (_mock *MockAllComponents) GroupManager() GroupManager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GroupManager")
	}

	var r0 GroupManager
	if returnFunc, ok := ret.Get(0).(func() GroupManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(GroupManager)
		}
	}
	return r0
}

// MockAllComponents_GroupManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GroupManager'
type MockAllComponents_GroupManager_Call struct {
	*mock.Call
}

// GroupManager is a helper method to define mock.On call
func (_e *MockAllComponents_Expecter) GroupManager() *MockAllComponents_GroupManager_Call {
	return &MockAllComponents_GroupManager_Call{Call: _e.mock.On("GroupManager")}
}

func (_c *MockAllComponents_GroupManager_Call) Run(run func()) *MockAllComponents_GroupManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAllComponents_GroupManager_Call) Return(groupManager GroupManager) *MockAllComponents_GroupManager_Call {
	_c.Call.Return(groupManager)
	return _c
}

func (_c *MockAllComponents_GroupManager_Call) RunAndReturn(run func() GroupManager) *MockAllComponents_GroupManager_Call {
	_c.Call.Return(run)
	return _c
}

// IdentityResolver provides a mock function for the type MockAllComponents
func (_mock *MockAllComponents) IdentityResolver() IdentityResolver {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IdentityResolver")
	}

	var r0 IdentityResolver
	if returnFunc, ok := ret.Get(0).(func() IdentityResolver); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(IdentityResolver)
		}
	}
	return r0
}

// MockAllComponents_IdentityResolver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IdentityResolver'
type MockAllComponents_IdentityResolver_Call struct {
	*mock.Call
}

// IdentityResolver is a helper method to define mock.On call
func (_e *MockAllComponents_Expecter) IdentityResolver() *MockAllComponents_IdentityResolver_Call {
	return &MockAllComponents_IdentityResolver_Call{Call: _e.mock.On("IdentityResolver")}
}

func (_c *MockAllComponents_IdentityResolver_Call) Run(run func()) *MockAllComponents_IdentityResolver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAllComponents_IdentityResolver_Call) Return(identityResolver IdentityResolver) *MockAllComponents_IdentityResolver_Call {
	_c.Call.Return(identityResolver)
	return _c
}

func (_c *MockAllComponents_IdentityResolver_Call) RunAndReturn(run func() IdentityResolver) *MockAllComponents_IdentityResolver_Call {
	_c.Call.Return(run)
	return _c
}

// KeyManager provides a mock function for the type MockAllComponents
func (_mock *MockAllComponents) KeyManager() KeyManager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for KeyManager")
	}

	var r0 KeyManager
	if returnFunc, ok := ret.Get(0).(func() KeyManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(KeyManager)
		}
	}
	return r0
}

// MockAllComponents_KeyManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KeyManager'
type MockAllComponents_KeyManager_Call struct {
	*mock.Call
}

// KeyManager is a helper method to define mock.On call
func (_e *MockAllComponents_Expecter) KeyManager() *MockAllComponents_KeyManager_Call {
	return &MockAllComponents_KeyManager_Call{Call: _e.mock.On("KeyManager")}
}

func (_c *MockAllComponents_KeyManager_Call) Run(run func()) *MockAllComponents_KeyManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAllComponents_KeyManager_Call) Return(keyManager KeyManager) *MockAllComponents_KeyManager_Call {
	_c.Call.Return(keyManager)
	return _c
}

func (_c *MockAllComponents_KeyManager_Call) RunAndReturn(run func() KeyManager) *MockAllComponents_KeyManager_Call {
	_c.Call.Return(run)
	return _c
}

// MetricsManager provides a mock function for the type MockAllComponents
func (_mock *MockAllComponents) MetricsManager() metrics.Metrics {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for MetricsManager")
	}

	var r0 metrics.Metrics
	if returnFunc, ok := ret.Get(0).(func() metrics.Metrics); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metrics.Metrics)
		}
	}
	return r0
}

// MockAllComponents_MetricsManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MetricsManager'
type MockAllComponents_MetricsManager_Call struct {
	*mock.Call
}

// MetricsManager is a helper method to define mock.On call
func (_e *MockAllComponents_Expecter) MetricsManager() *MockAllComponents_MetricsManager_Call {
	return &MockAllComponents_MetricsManager_Call{Call: _e.mock.On("MetricsManager")}
}

func (_c *MockAllComponents_MetricsManager_Call) Run(run func()) *MockAllComponents_MetricsManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAllComponents_MetricsManager_Call) Return(metrics1 metrics.Metrics) *MockAllComponents_MetricsManager_Call {
	_c.Call.Return(metrics1)
	return _c
}

func (_c *MockAllComponents_MetricsManager_Call) RunAndReturn(run func() metrics.Metrics) *MockAllComponents_MetricsManager_Call {
	_c.Call.Return(run)
	return _c
}

// Persistence provides a mock function for the type MockAllComponents
func (_mock *MockAllComponents) Persistence() persistence.Persistence {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Persistence")
	}

	var r0 persistence.Persistence
	if returnFunc, ok := ret.Get(0).(func() persistence.Persistence); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(persistence.Persistence)
		}
	}
	return r0
}

// MockAllComponents_Persistence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Persistence'
type MockAllComponents_Persistence_Call struct {
	*mock.Call
}

// Persistence is a helper method to define mock.On call
func (_e *MockAllComponents_Expecter) Persistence() *MockAllComponents_Persistence_Call {
	return &MockAllComponents_Persistence_Call{Call: _e.mock.On("Persistence")}
}

func (_c *MockAllComponents_Persistence_Call) Run(run func()) *MockAllComponents_Persistence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAllComponents_Persistence_Call) Return(persistence1 persistence.Persistence) *MockAllComponents_Persistence_Call {
	_c.Call.Return(persistence1)
	return _c
}

func (_c *MockAllComponents_Persistence_Call) RunAndReturn(run func() persistence.Persistence) *MockAllComponents_Persistence_Call {
	_c.Call.Return(run)
	return _c
}

// PluginManager provides a mock function for the type MockAllComponents
func (_mock *MockAllComponents) PluginManager() PluginManager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for PluginManager")
	}

	var r0 PluginManager
	if returnFunc, ok := ret.Get(0).(func() PluginManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(PluginManager)
		}
	}
	return r0
}

// MockAllComponents_PluginManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PluginManager'
type MockAllComponents_PluginManager_Call struct {
	*mock.Call
}

// PluginManager is a helper method to define mock.On call
func (_e *MockAllComponents_Expecter) PluginManager() *MockAllComponents_PluginManager_Call {
	return &MockAllComponents_PluginManager_Call{Call: _e.mock.On("PluginManager")}
}

func (_c *MockAllComponents_PluginManager_Call) Run(run func()) *MockAllComponents_PluginManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAllComponents_PluginManager_Call) Return(pluginManager PluginManager) *MockAllComponents_PluginManager_Call {
	_c.Call.Return(pluginManager)
	return _c
}

func (_c *MockAllComponents_PluginManager_Call) RunAndReturn(run func() PluginManager) *MockAllComponents_PluginManager_Call {
	_c.Call.Return(run)
	return _c
}

// PrivateTxManager provides a mock function for the type MockAllComponents
func (_mock *MockAllComponents) PrivateTxManager() PrivateTxManager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for PrivateTxManager")
	}

	var r0 PrivateTxManager
	if returnFunc, ok := ret.Get(0).(func() PrivateTxManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(PrivateTxManager)
		}
	}
	return r0
}

// MockAllComponents_PrivateTxManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrivateTxManager'
type MockAllComponents_PrivateTxManager_Call struct {
	*mock.Call
}

// PrivateTxManager is a helper method to define mock.On call
func (_e *MockAllComponents_Expecter) PrivateTxManager() *MockAllComponents_PrivateTxManager_Call {
	return &MockAllComponents_PrivateTxManager_Call{Call: _e.mock.On("PrivateTxManager")}
}

func (_c *MockAllComponents_PrivateTxManager_Call) Run(run func()) *MockAllComponents_PrivateTxManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAllComponents_PrivateTxManager_Call) Return(privateTxManager PrivateTxManager) *MockAllComponents_PrivateTxManager_Call {
	_c.Call.Return(privateTxManager)
	return _c
}

func (_c *MockAllComponents_PrivateTxManager_Call) RunAndReturn(run func() PrivateTxManager) *MockAllComponents_PrivateTxManager_Call {
	_c.Call.Return(run)
	return _c
}

// PublicTxManager provides a mock function for the type MockAllComponents
func (_mock *MockAllComponents) PublicTxManager() PublicTxManager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for PublicTxManager")
	}

	var r0 PublicTxManager
	if returnFunc, ok := ret.Get(0).(func() PublicTxManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(PublicTxManager)
		}
	}
	return r0
}

// MockAllComponents_PublicTxManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublicTxManager'
type MockAllComponents_PublicTxManager_Call struct {
	*mock.Call
}

// PublicTxManager is a helper method to define mock.On call
func (_e *MockAllComponents_Expecter) PublicTxManager() *MockAllComponents_PublicTxManager_Call {
	return &MockAllComponents_PublicTxManager_Call{Call: _e.mock.On("PublicTxManager")}
}

func (_c *MockAllComponents_PublicTxManager_Call) Run(run func()) *MockAllComponents_PublicTxManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAllComponents_PublicTxManager_Call) Return(publicTxManager PublicTxManager) *MockAllComponents_PublicTxManager_Call {
	_c.Call.Return(publicTxManager)
	return _c
}

func (_c *MockAllComponents_PublicTxManager_Call) RunAndReturn(run func() PublicTxManager) *MockAllComponents_PublicTxManager_Call {
	_c.Call.Return(run)
	return _c
}

// RPCServer provides a mock function for the type MockAllComponents
func (_mock *MockAllComponents) RPCServer() rpcserver.RPCServer {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for RPCServer")
	}

	var r0 rpcserver.RPCServer
	if returnFunc, ok := ret.Get(0).(func() rpcserver.RPCServer); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rpcserver.RPCServer)
		}
	}
	return r0
}

// MockAllComponents_RPCServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RPCServer'
type MockAllComponents_RPCServer_Call struct {
	*mock.Call
}

// RPCServer is a helper method to define mock.On call
func (_e *MockAllComponents_Expecter) RPCServer() *MockAllComponents_RPCServer_Call {
	return &MockAllComponents_RPCServer_Call{Call: _e.mock.On("RPCServer")}
}

func (_c *MockAllComponents_RPCServer_Call) Run(run func()) *MockAllComponents_RPCServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAllComponents_RPCServer_Call) Return(rPCServer rpcserver.RPCServer) *MockAllComponents_RPCServer_Call {
	_c.Call.Return(rPCServer)
	return _c
}

func (_c *MockAllComponents_RPCServer_Call) RunAndReturn(run func() rpcserver.RPCServer) *MockAllComponents_RPCServer_Call {
	_c.Call.Return(run)
	return _c
}

// RegistryManager provides a mock function for the type MockAllComponents
func (_mock *MockAllComponents) RegistryManager() RegistryManager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for RegistryManager")
	}

	var r0 RegistryManager
	if returnFunc, ok := ret.Get(0).(func() RegistryManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RegistryManager)
		}
	}
	return r0
}

// MockAllComponents_RegistryManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegistryManager'
type MockAllComponents_RegistryManager_Call struct {
	*mock.Call
}

// RegistryManager is a helper method to define mock.On call
func (_e *MockAllComponents_Expecter) RegistryManager() *MockAllComponents_RegistryManager_Call {
	return &MockAllComponents_RegistryManager_Call{Call: _e.mock.On("RegistryManager")}
}

func (_c *MockAllComponents_RegistryManager_Call) Run(run func()) *MockAllComponents_RegistryManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAllComponents_RegistryManager_Call) Return(registryManager RegistryManager) *MockAllComponents_RegistryManager_Call {
	_c.Call.Return(registryManager)
	return _c
}

func (_c *MockAllComponents_RegistryManager_Call) RunAndReturn(run func() RegistryManager) *MockAllComponents_RegistryManager_Call {
	_c.Call.Return(run)
	return _c
}

// StateManager provides a mock function for the type MockAllComponents
func (_mock *MockAllComponents) StateManager() StateManager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for StateManager")
	}

	var r0 StateManager
	if returnFunc, ok := ret.Get(0).(func() StateManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(StateManager)
		}
	}
	return r0
}

// MockAllComponents_StateManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StateManager'
type MockAllComponents_StateManager_Call struct {
	*mock.Call
}

// StateManager is a helper method to define mock.On call
func (_e *MockAllComponents_Expecter) StateManager() *MockAllComponents_StateManager_Call {
	return &MockAllComponents_StateManager_Call{Call: _e.mock.On("StateManager")}
}

func (_c *MockAllComponents_StateManager_Call) Run(run func()) *MockAllComponents_StateManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAllComponents_StateManager_Call) Return(stateManager StateManager) *MockAllComponents_StateManager_Call {
	_c.Call.Return(stateManager)
	return _c
}

func (_c *MockAllComponents_StateManager_Call) RunAndReturn(run func() StateManager) *MockAllComponents_StateManager_Call {
	_c.Call.Return(run)
	return _c
}

// TransportManager provides a mock function for the type MockAllComponents
func (_mock *MockAllComponents) TransportManager() TransportManager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for TransportManager")
	}

	var r0 TransportManager
	if returnFunc, ok := ret.Get(0).(func() TransportManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(TransportManager)
		}
	}
	return r0
}

// MockAllComponents_TransportManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransportManager'
type MockAllComponents_TransportManager_Call struct {
	*mock.Call
}

// TransportManager is a helper method to define mock.On call
func (_e *MockAllComponents_Expecter) TransportManager() *MockAllComponents_TransportManager_Call {
	return &MockAllComponents_TransportManager_Call{Call: _e.mock.On("TransportManager")}
}

func (_c *MockAllComponents_TransportManager_Call) Run(run func()) *MockAllComponents_TransportManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAllComponents_TransportManager_Call) Return(transportManager TransportManager) *MockAllComponents_TransportManager_Call {
	_c.Call.Return(transportManager)
	return _c
}

func (_c *MockAllComponents_TransportManager_Call) RunAndReturn(run func() TransportManager) *MockAllComponents_TransportManager_Call {
	_c.Call.Return(run)
	return _c
}

// TxManager provides a mock function for the type MockAllComponents
func (_mock *MockAllComponents) TxManager() TXManager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for TxManager")
	}

	var r0 TXManager
	if returnFunc, ok := ret.Get(0).(func() TXManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(TXManager)
		}
	}
	return r0
}

// MockAllComponents_TxManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TxManager'
type MockAllComponents_TxManager_Call struct {
	*mock.Call
}

// TxManager is a helper method to define mock.On call
func (_e *MockAllComponents_Expecter) TxManager() *MockAllComponents_TxManager_Call {
	return &MockAllComponents_TxManager_Call{Call: _e.mock.On("TxManager")}
}

func (_c *MockAllComponents_TxManager_Call) Run(run func()) *MockAllComponents_TxManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAllComponents_TxManager_Call) Return(tXManager TXManager) *MockAllComponents_TxManager_Call {
	_c.Call.Return(tXManager)
	return _c
}

func (_c *MockAllComponents_TxManager_Call) RunAndReturn(run func() TXManager) *MockAllComponents_TxManager_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDomainManagerToDomain creates a new instance of MockDomainManagerToDomain. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDomainManagerToDomain(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDomainManagerToDomain {
	mock := &MockDomainManagerToDomain{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDomainManagerToDomain is an autogenerated mock type for the DomainManagerToDomain type
type MockDomainManagerToDomain struct {
	mock.Mock
}

type MockDomainManagerToDomain_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDomainManagerToDomain) EXPECT() *MockDomainManagerToDomain_Expecter {
	return &MockDomainManagerToDomain_Expecter{mock: &_m.Mock}
}

// AssembleTransaction provides a mock function for the type MockDomainManagerToDomain
func (_mock *MockDomainManagerToDomain) AssembleTransaction(context1 context.Context, assembleTransactionRequest *prototk.AssembleTransactionRequest) (*prototk.AssembleTransactionResponse, error) {
	ret := _mock.Called(context1, assembleTransactionRequest)

	if len(ret) == 0 {
		panic("no return value specified for AssembleTransaction")
	}

	var r0 *prototk.AssembleTransactionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.AssembleTransactionRequest) (*prototk.AssembleTransactionResponse, error)); ok {
		return returnFunc(context1, assembleTransactionRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.AssembleTransactionRequest) *prototk.AssembleTransactionResponse); ok {
		r0 = returnFunc(context1, assembleTransactionRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.AssembleTransactionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.AssembleTransactionRequest) error); ok {
		r1 = returnFunc(context1, assembleTransactionRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainManagerToDomain_AssembleTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssembleTransaction'
type MockDomainManagerToDomain_AssembleTransaction_Call struct {
	*mock.Call
}

// AssembleTransaction is a helper method to define mock.On call
//   - context1 context.Context
//   - assembleTransactionRequest *prototk.AssembleTransactionRequest
func (_e *MockDomainManagerToDomain_Expecter) AssembleTransaction(context1 interface{}, assembleTransactionRequest interface{}) *MockDomainManagerToDomain_AssembleTransaction_Call {
	return &MockDomainManagerToDomain_AssembleTransaction_Call{Call: _e.mock.On("AssembleTransaction", context1, assembleTransactionRequest)}
}

func (_c *MockDomainManagerToDomain_AssembleTransaction_Call) Run(run func(context1 context.Context, assembleTransactionRequest *prototk.AssembleTransactionRequest)) *MockDomainManagerToDomain_AssembleTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.AssembleTransactionRequest
		if args[1] != nil {
			arg1 = args[1].(*prototk.AssembleTransactionRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainManagerToDomain_AssembleTransaction_Call) Return(assembleTransactionResponse *prototk.AssembleTransactionResponse, err error) *MockDomainManagerToDomain_AssembleTransaction_Call {
	_c.Call.Return(assembleTransactionResponse, err)
	return _c
}

func (_c *MockDomainManagerToDomain_AssembleTransaction_Call) RunAndReturn(run func(context1 context.Context, assembleTransactionRequest *prototk.AssembleTransactionRequest) (*prototk.AssembleTransactionResponse, error)) *MockDomainManagerToDomain_AssembleTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// BuildReceipt provides a mock function for the type MockDomainManagerToDomain
func (_mock *MockDomainManagerToDomain) BuildReceipt(context1 context.Context, buildReceiptRequest *prototk.BuildReceiptRequest) (*prototk.BuildReceiptResponse, error) {
	ret := _mock.Called(context1, buildReceiptRequest)

	if len(ret) == 0 {
		panic("no return value specified for BuildReceipt")
	}

	var r0 *prototk.BuildReceiptResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.BuildReceiptRequest) (*prototk.BuildReceiptResponse, error)); ok {
		return returnFunc(context1, buildReceiptRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.BuildReceiptRequest) *prototk.BuildReceiptResponse); ok {
		r0 = returnFunc(context1, buildReceiptRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.BuildReceiptResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.BuildReceiptRequest) error); ok {
		r1 = returnFunc(context1, buildReceiptRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainManagerToDomain_BuildReceipt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildReceipt'
type MockDomainManagerToDomain_BuildReceipt_Call struct {
	*mock.Call
}

// BuildReceipt is a helper method to define mock.On call
//   - context1 context.Context
//   - buildReceiptRequest *prototk.BuildReceiptRequest
func (_e *MockDomainManagerToDomain_Expecter) BuildReceipt(context1 interface{}, buildReceiptRequest interface{}) *MockDomainManagerToDomain_BuildReceipt_Call {
	return &MockDomainManagerToDomain_BuildReceipt_Call{Call: _e.mock.On("BuildReceipt", context1, buildReceiptRequest)}
}

func (_c *MockDomainManagerToDomain_BuildReceipt_Call) Run(run func(context1 context.Context, buildReceiptRequest *prototk.BuildReceiptRequest)) *MockDomainManagerToDomain_BuildReceipt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.BuildReceiptRequest
		if args[1] != nil {
			arg1 = args[1].(*prototk.BuildReceiptRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainManagerToDomain_BuildReceipt_Call) Return(buildReceiptResponse *prototk.BuildReceiptResponse, err error) *MockDomainManagerToDomain_BuildReceipt_Call {
	_c.Call.Return(buildReceiptResponse, err)
	return _c
}

func (_c *MockDomainManagerToDomain_BuildReceipt_Call) RunAndReturn(run func(context1 context.Context, buildReceiptRequest *prototk.BuildReceiptRequest) (*prototk.BuildReceiptResponse, error)) *MockDomainManagerToDomain_BuildReceipt_Call {
	_c.Call.Return(run)
	return _c
}

// ConfigureDomain provides a mock function for the type MockDomainManagerToDomain
func (_mock *MockDomainManagerToDomain) ConfigureDomain(context1 context.Context, configureDomainRequest *prototk.ConfigureDomainRequest) (*prototk.ConfigureDomainResponse, error) {
	ret := _mock.Called(context1, configureDomainRequest)

	if len(ret) == 0 {
		panic("no return value specified for ConfigureDomain")
	}

	var r0 *prototk.ConfigureDomainResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.ConfigureDomainRequest) (*prototk.ConfigureDomainResponse, error)); ok {
		return returnFunc(context1, configureDomainRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.ConfigureDomainRequest) *prototk.ConfigureDomainResponse); ok {
		r0 = returnFunc(context1, configureDomainRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.ConfigureDomainResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.ConfigureDomainRequest) error); ok {
		r1 = returnFunc(context1, configureDomainRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainManagerToDomain_ConfigureDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigureDomain'
type MockDomainManagerToDomain_ConfigureDomain_Call struct {
	*mock.Call
}

// ConfigureDomain is a helper method to define mock.On call
//   - context1 context.Context
//   - configureDomainRequest *prototk.ConfigureDomainRequest
func (_e *MockDomainManagerToDomain_Expecter) ConfigureDomain(context1 interface{}, configureDomainRequest interface{}) *MockDomainManagerToDomain_ConfigureDomain_Call {
	return &MockDomainManagerToDomain_ConfigureDomain_Call{Call: _e.mock.On("ConfigureDomain", context1, configureDomainRequest)}
}

func (_c *MockDomainManagerToDomain_ConfigureDomain_Call) Run(run func(context1 context.Context, configureDomainRequest *prototk.ConfigureDomainRequest)) *MockDomainManagerToDomain_ConfigureDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.ConfigureDomainRequest
		if args[1] != nil {
			arg1 = args[1].(*prototk.ConfigureDomainRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainManagerToDomain_ConfigureDomain_Call) Return(configureDomainResponse *prototk.ConfigureDomainResponse, err error) *MockDomainManagerToDomain_ConfigureDomain_Call {
	_c.Call.Return(configureDomainResponse, err)
	return _c
}

func (_c *MockDomainManagerToDomain_ConfigureDomain_Call) RunAndReturn(run func(context1 context.Context, configureDomainRequest *prototk.ConfigureDomainRequest) (*prototk.ConfigureDomainResponse, error)) *MockDomainManagerToDomain_ConfigureDomain_Call {
	_c.Call.Return(run)
	return _c
}

// ConfigurePrivacyGroup provides a mock function for the type MockDomainManagerToDomain
func (_mock *MockDomainManagerToDomain) ConfigurePrivacyGroup(context1 context.Context, configurePrivacyGroupRequest *prototk.ConfigurePrivacyGroupRequest) (*prototk.ConfigurePrivacyGroupResponse, error) {
	ret := _mock.Called(context1, configurePrivacyGroupRequest)

	if len(ret) == 0 {
		panic("no return value specified for ConfigurePrivacyGroup")
	}

	var r0 *prototk.ConfigurePrivacyGroupResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.ConfigurePrivacyGroupRequest) (*prototk.ConfigurePrivacyGroupResponse, error)); ok {
		return returnFunc(context1, configurePrivacyGroupRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.ConfigurePrivacyGroupRequest) *prototk.ConfigurePrivacyGroupResponse); ok {
		r0 = returnFunc(context1, configurePrivacyGroupRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.ConfigurePrivacyGroupResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.ConfigurePrivacyGroupRequest) error); ok {
		r1 = returnFunc(context1, configurePrivacyGroupRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainManagerToDomain_ConfigurePrivacyGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigurePrivacyGroup'
type MockDomainManagerToDomain_ConfigurePrivacyGroup_Call struct {
	*mock.Call
}

// ConfigurePrivacyGroup is a helper method to define mock.On call
//   - context1 context.Context
//   - configurePrivacyGroupRequest *prototk.ConfigurePrivacyGroupRequest
func (_e *MockDomainManagerToDomain_Expecter) ConfigurePrivacyGroup(context1 interface{}, configurePrivacyGroupRequest interface{}) *MockDomainManagerToDomain_ConfigurePrivacyGroup_Call {
	return &MockDomainManagerToDomain_ConfigurePrivacyGroup_Call{Call: _e.mock.On("ConfigurePrivacyGroup", context1, configurePrivacyGroupRequest)}
}

func (_c *MockDomainManagerToDomain_ConfigurePrivacyGroup_Call) Run(run func(context1 context.Context, configurePrivacyGroupRequest *prototk.ConfigurePrivacyGroupRequest)) *MockDomainManagerToDomain_ConfigurePrivacyGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.ConfigurePrivacyGroupRequest
		if args[1] != nil {
			arg1 = args[1].(*prototk.ConfigurePrivacyGroupRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainManagerToDomain_ConfigurePrivacyGroup_Call) Return(configurePrivacyGroupResponse *prototk.ConfigurePrivacyGroupResponse, err error) *MockDomainManagerToDomain_ConfigurePrivacyGroup_Call {
	_c.Call.Return(configurePrivacyGroupResponse, err)
	return _c
}

func (_c *MockDomainManagerToDomain_ConfigurePrivacyGroup_Call) RunAndReturn(run func(context1 context.Context, configurePrivacyGroupRequest *prototk.ConfigurePrivacyGroupRequest) (*prototk.ConfigurePrivacyGroupResponse, error)) *MockDomainManagerToDomain_ConfigurePrivacyGroup_Call {
	_c.Call.Return(run)
	return _c
}

// EndorseTransaction provides a mock function for the type MockDomainManagerToDomain
func (_mock *MockDomainManagerToDomain) EndorseTransaction(context1 context.Context, endorseTransactionRequest *prototk.EndorseTransactionRequest) (*prototk.EndorseTransactionResponse, error) {
	ret := _mock.Called(context1, endorseTransactionRequest)

	if len(ret) == 0 {
		panic("no return value specified for EndorseTransaction")
	}

	var r0 *prototk.EndorseTransactionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.EndorseTransactionRequest) (*prototk.EndorseTransactionResponse, error)); ok {
		return returnFunc(context1, endorseTransactionRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.EndorseTransactionRequest) *prototk.EndorseTransactionResponse); ok {
		r0 = returnFunc(context1, endorseTransactionRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.EndorseTransactionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.EndorseTransactionRequest) error); ok {
		r1 = returnFunc(context1, endorseTransactionRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainManagerToDomain_EndorseTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EndorseTransaction'
type MockDomainManagerToDomain_EndorseTransaction_Call struct {
	*mock.Call
}

// EndorseTransaction is a helper method to define mock.On call
//   - context1 context.Context
//   - endorseTransactionRequest *prototk.EndorseTransactionRequest
func (_e *MockDomainManagerToDomain_Expecter) EndorseTransaction(context1 interface{}, endorseTransactionRequest interface{}) *MockDomainManagerToDomain_EndorseTransaction_Call {
	return &MockDomainManagerToDomain_EndorseTransaction_Call{Call: _e.mock.On("EndorseTransaction", context1, endorseTransactionRequest)}
}

func (_c *MockDomainManagerToDomain_EndorseTransaction_Call) Run(run func(context1 context.Context, endorseTransactionRequest *prototk.EndorseTransactionRequest)) *MockDomainManagerToDomain_EndorseTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.EndorseTransactionRequest
		if args[1] != nil {
			arg1 = args[1].(*prototk.EndorseTransactionRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainManagerToDomain_EndorseTransaction_Call) Return(endorseTransactionResponse *prototk.EndorseTransactionResponse, err error) *MockDomainManagerToDomain_EndorseTransaction_Call {
	_c.Call.Return(endorseTransactionResponse, err)
	return _c
}

func (_c *MockDomainManagerToDomain_EndorseTransaction_Call) RunAndReturn(run func(context1 context.Context, endorseTransactionRequest *prototk.EndorseTransactionRequest) (*prototk.EndorseTransactionResponse, error)) *MockDomainManagerToDomain_EndorseTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// ExecCall provides a mock function for the type MockDomainManagerToDomain
func (_mock *MockDomainManagerToDomain) ExecCall(context1 context.Context, execCallRequest *prototk.ExecCallRequest) (*prototk.ExecCallResponse, error) {
	ret := _mock.Called(context1, execCallRequest)

	if len(ret) == 0 {
		panic("no return value specified for ExecCall")
	}

	var r0 *prototk.ExecCallResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.ExecCallRequest) (*prototk.ExecCallResponse, error)); ok {
		return returnFunc(context1, execCallRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.ExecCallRequest) *prototk.ExecCallResponse); ok {
		r0 = returnFunc(context1, execCallRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.ExecCallResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.ExecCallRequest) error); ok {
		r1 = returnFunc(context1, execCallRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainManagerToDomain_ExecCall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecCall'
type MockDomainManagerToDomain_ExecCall_Call struct {
	*mock.Call
}

// ExecCall is a helper method to define mock.On call
//   - context1 context.Context
//   - execCallRequest *prototk.ExecCallRequest
func (_e *MockDomainManagerToDomain_Expecter) ExecCall(context1 interface{}, execCallRequest interface{}) *MockDomainManagerToDomain_ExecCall_Call {
	return &MockDomainManagerToDomain_ExecCall_Call{Call: _e.mock.On("ExecCall", context1, execCallRequest)}
}

func (_c *MockDomainManagerToDomain_ExecCall_Call) Run(run func(context1 context.Context, execCallRequest *prototk.ExecCallRequest)) *MockDomainManagerToDomain_ExecCall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.ExecCallRequest
		if args[1] != nil {
			arg1 = args[1].(*prototk.ExecCallRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainManagerToDomain_ExecCall_Call) Return(execCallResponse *prototk.ExecCallResponse, err error) *MockDomainManagerToDomain_ExecCall_Call {
	_c.Call.Return(execCallResponse, err)
	return _c
}

func (_c *MockDomainManagerToDomain_ExecCall_Call) RunAndReturn(run func(context1 context.Context, execCallRequest *prototk.ExecCallRequest) (*prototk.ExecCallResponse, error)) *MockDomainManagerToDomain_ExecCall_Call {
	_c.Call.Return(run)
	return _c
}

// GetVerifier provides a mock function for the type MockDomainManagerToDomain
func (_mock *MockDomainManagerToDomain) GetVerifier(context1 context.Context, getVerifierRequest *prototk.GetVerifierRequest) (*prototk.GetVerifierResponse, error) {
	ret := _mock.Called(context1, getVerifierRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetVerifier")
	}

	var r0 *prototk.GetVerifierResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.GetVerifierRequest) (*prototk.GetVerifierResponse, error)); ok {
		return returnFunc(context1, getVerifierRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.GetVerifierRequest) *prototk.GetVerifierResponse); ok {
		r0 = returnFunc(context1, getVerifierRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.GetVerifierResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.GetVerifierRequest) error); ok {
		r1 = returnFunc(context1, getVerifierRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainManagerToDomain_GetVerifier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVerifier'
type MockDomainManagerToDomain_GetVerifier_Call struct {
	*mock.Call
}

// GetVerifier is a helper method to define mock.On call
//   - context1 context.Context
//   - getVerifierRequest *prototk.GetVerifierRequest
func (_e *MockDomainManagerToDomain_Expecter) GetVerifier(context1 interface{}, getVerifierRequest interface{}) *MockDomainManagerToDomain_GetVerifier_Call {
	return &MockDomainManagerToDomain_GetVerifier_Call{Call: _e.mock.On("GetVerifier", context1, getVerifierRequest)}
}

func (_c *MockDomainManagerToDomain_GetVerifier_Call) Run(run func(context1 context.Context, getVerifierRequest *prototk.GetVerifierRequest)) *MockDomainManagerToDomain_GetVerifier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.GetVerifierRequest
		if args[1] != nil {
			arg1 = args[1].(*prototk.GetVerifierRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainManagerToDomain_GetVerifier_Call) Return(getVerifierResponse *prototk.GetVerifierResponse, err error) *MockDomainManagerToDomain_GetVerifier_Call {
	_c.Call.Return(getVerifierResponse, err)
	return _c
}

func (_c *MockDomainManagerToDomain_GetVerifier_Call) RunAndReturn(run func(context1 context.Context, getVerifierRequest *prototk.GetVerifierRequest) (*prototk.GetVerifierResponse, error)) *MockDomainManagerToDomain_GetVerifier_Call {
	_c.Call.Return(run)
	return _c
}

// HandleEventBatch provides a mock function for the type MockDomainManagerToDomain
func (_mock *MockDomainManagerToDomain) HandleEventBatch(context1 context.Context, handleEventBatchRequest *prototk.HandleEventBatchRequest) (*prototk.HandleEventBatchResponse, error) {
	ret := _mock.Called(context1, handleEventBatchRequest)

	if len(ret) == 0 {
		panic("no return value specified for HandleEventBatch")
	}

	var r0 *prototk.HandleEventBatchResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.HandleEventBatchRequest) (*prototk.HandleEventBatchResponse, error)); ok {
		return returnFunc(context1, handleEventBatchRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.HandleEventBatchRequest) *prototk.HandleEventBatchResponse); ok {
		r0 = returnFunc(context1, handleEventBatchRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.HandleEventBatchResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.HandleEventBatchRequest) error); ok {
		r1 = returnFunc(context1, handleEventBatchRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainManagerToDomain_HandleEventBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleEventBatch'
type MockDomainManagerToDomain_HandleEventBatch_Call struct {
	*mock.Call
}

// HandleEventBatch is a helper method to define mock.On call
//   - context1 context.Context
//   - handleEventBatchRequest *prototk.HandleEventBatchRequest
func (_e *MockDomainManagerToDomain_Expecter) HandleEventBatch(context1 interface{}, handleEventBatchRequest interface{}) *MockDomainManagerToDomain_HandleEventBatch_Call {
	return &MockDomainManagerToDomain_HandleEventBatch_Call{Call: _e.mock.On("HandleEventBatch", context1, handleEventBatchRequest)}
}

func (_c *MockDomainManagerToDomain_HandleEventBatch_Call) Run(run func(context1 context.Context, handleEventBatchRequest *prototk.HandleEventBatchRequest)) *MockDomainManagerToDomain_HandleEventBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.HandleEventBatchRequest
		if args[1] != nil {
			arg1 = args[1].(*prototk.HandleEventBatchRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainManagerToDomain_HandleEventBatch_Call) Return(handleEventBatchResponse *prototk.HandleEventBatchResponse, err error) *MockDomainManagerToDomain_HandleEventBatch_Call {
	_c.Call.Return(handleEventBatchResponse, err)
	return _c
}

func (_c *MockDomainManagerToDomain_HandleEventBatch_Call) RunAndReturn(run func(context1 context.Context, handleEventBatchRequest *prototk.HandleEventBatchRequest) (*prototk.HandleEventBatchResponse, error)) *MockDomainManagerToDomain_HandleEventBatch_Call {
	_c.Call.Return(run)
	return _c
}

// InitCall provides a mock function for the type MockDomainManagerToDomain
func (_mock *MockDomainManagerToDomain) InitCall(context1 context.Context, initCallRequest *prototk.InitCallRequest) (*prototk.InitCallResponse, error) {
	ret := _mock.Called(context1, initCallRequest)

	if len(ret) == 0 {
		panic("no return value specified for InitCall")
	}

	var r0 *prototk.InitCallResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.InitCallRequest) (*prototk.InitCallResponse, error)); ok {
		return returnFunc(context1, initCallRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.InitCallRequest) *prototk.InitCallResponse); ok {
		r0 = returnFunc(context1, initCallRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.InitCallResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.InitCallRequest) error); ok {
		r1 = returnFunc(context1, initCallRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainManagerToDomain_InitCall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitCall'
type MockDomainManagerToDomain_InitCall_Call struct {
	*mock.Call
}

// InitCall is a helper method to define mock.On call
//   - context1 context.Context
//   - initCallRequest *prototk.InitCallRequest
func (_e *MockDomainManagerToDomain_Expecter) InitCall(context1 interface{}, initCallRequest interface{}) *MockDomainManagerToDomain_InitCall_Call {
	return &MockDomainManagerToDomain_InitCall_Call{Call: _e.mock.On("InitCall", context1, initCallRequest)}
}

func (_c *MockDomainManagerToDomain_InitCall_Call) Run(run func(context1 context.Context, initCallRequest *prototk.InitCallRequest)) *MockDomainManagerToDomain_InitCall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.InitCallRequest
		if args[1] != nil {
			arg1 = args[1].(*prototk.InitCallRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainManagerToDomain_InitCall_Call) Return(initCallResponse *prototk.InitCallResponse, err error) *MockDomainManagerToDomain_InitCall_Call {
	_c.Call.Return(initCallResponse, err)
	return _c
}

func (_c *MockDomainManagerToDomain_InitCall_Call) RunAndReturn(run func(context1 context.Context, initCallRequest *prototk.InitCallRequest) (*prototk.InitCallResponse, error)) *MockDomainManagerToDomain_InitCall_Call {
	_c.Call.Return(run)
	return _c
}

// InitContract provides a mock function for the type MockDomainManagerToDomain
func (_mock *MockDomainManagerToDomain) InitContract(context1 context.Context, initContractRequest *prototk.InitContractRequest) (*prototk.InitContractResponse, error) {
	ret := _mock.Called(context1, initContractRequest)

	if len(ret) == 0 {
		panic("no return value specified for InitContract")
	}

	var r0 *prototk.InitContractResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.InitContractRequest) (*prototk.InitContractResponse, error)); ok {
		return returnFunc(context1, initContractRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.InitContractRequest) *prototk.InitContractResponse); ok {
		r0 = returnFunc(context1, initContractRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.InitContractResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.InitContractRequest) error); ok {
		r1 = returnFunc(context1, initContractRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainManagerToDomain_InitContract_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitContract'
type MockDomainManagerToDomain_InitContract_Call struct {
	*mock.Call
}

// InitContract is a helper method to define mock.On call
//   - context1 context.Context
//   - initContractRequest *prototk.InitContractRequest
func (_e *MockDomainManagerToDomain_Expecter) InitContract(context1 interface{}, initContractRequest interface{}) *MockDomainManagerToDomain_InitContract_Call {
	return &MockDomainManagerToDomain_InitContract_Call{Call: _e.mock.On("InitContract", context1, initContractRequest)}
}

func (_c *MockDomainManagerToDomain_InitContract_Call) Run(run func(context1 context.Context, initContractRequest *prototk.InitContractRequest)) *MockDomainManagerToDomain_InitContract_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.InitContractRequest
		if args[1] != nil {
			arg1 = args[1].(*prototk.InitContractRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainManagerToDomain_InitContract_Call) Return(initContractResponse *prototk.InitContractResponse, err error) *MockDomainManagerToDomain_InitContract_Call {
	_c.Call.Return(initContractResponse, err)
	return _c
}

func (_c *MockDomainManagerToDomain_InitContract_Call) RunAndReturn(run func(context1 context.Context, initContractRequest *prototk.InitContractRequest) (*prototk.InitContractResponse, error)) *MockDomainManagerToDomain_InitContract_Call {
	_c.Call.Return(run)
	return _c
}

// InitDeploy provides a mock function for the type MockDomainManagerToDomain
func (_mock *MockDomainManagerToDomain) InitDeploy(context1 context.Context, initDeployRequest *prototk.InitDeployRequest) (*prototk.InitDeployResponse, error) {
	ret := _mock.Called(context1, initDeployRequest)

	if len(ret) == 0 {
		panic("no return value specified for InitDeploy")
	}

	var r0 *prototk.InitDeployResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.InitDeployRequest) (*prototk.InitDeployResponse, error)); ok {
		return returnFunc(context1, initDeployRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.InitDeployRequest) *prototk.InitDeployResponse); ok {
		r0 = returnFunc(context1, initDeployRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.InitDeployResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.InitDeployRequest) error); ok {
		r1 = returnFunc(context1, initDeployRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainManagerToDomain_InitDeploy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitDeploy'
type MockDomainManagerToDomain_InitDeploy_Call struct {
	*mock.Call
}

// InitDeploy is a helper method to define mock.On call
//   - context1 context.Context
//   - initDeployRequest *prototk.InitDeployRequest
func (_e *MockDomainManagerToDomain_Expecter) InitDeploy(context1 interface{}, initDeployRequest interface{}) *MockDomainManagerToDomain_InitDeploy_Call {
	return &MockDomainManagerToDomain_InitDeploy_Call{Call: _e.mock.On("InitDeploy", context1, initDeployRequest)}
}

func (_c *MockDomainManagerToDomain_InitDeploy_Call) Run(run func(context1 context.Context, initDeployRequest *prototk.InitDeployRequest)) *MockDomainManagerToDomain_InitDeploy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.InitDeployRequest
		if args[1] != nil {
			arg1 = args[1].(*prototk.InitDeployRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainManagerToDomain_InitDeploy_Call) Return(initDeployResponse *prototk.InitDeployResponse, err error) *MockDomainManagerToDomain_InitDeploy_Call {
	_c.Call.Return(initDeployResponse, err)
	return _c
}

func (_c *MockDomainManagerToDomain_InitDeploy_Call) RunAndReturn(run func(context1 context.Context, initDeployRequest *prototk.InitDeployRequest) (*prototk.InitDeployResponse, error)) *MockDomainManagerToDomain_InitDeploy_Call {
	_c.Call.Return(run)
	return _c
}

// InitDomain provides a mock function for the type MockDomainManagerToDomain
func (_mock *MockDomainManagerToDomain) InitDomain(context1 context.Context, initDomainRequest *prototk.InitDomainRequest) (*prototk.InitDomainResponse, error) {
	ret := _mock.Called(context1, initDomainRequest)

	if len(ret) == 0 {
		panic("no return value specified for InitDomain")
	}

	var r0 *prototk.InitDomainResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.InitDomainRequest) (*prototk.InitDomainResponse, error)); ok {
		return returnFunc(context1, initDomainRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.InitDomainRequest) *prototk.InitDomainResponse); ok {
		r0 = returnFunc(context1, initDomainRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.InitDomainResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.InitDomainRequest) error); ok {
		r1 = returnFunc(context1, initDomainRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainManagerToDomain_InitDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitDomain'
type MockDomainManagerToDomain_InitDomain_Call struct {
	*mock.Call
}

// InitDomain is a helper method to define mock.On call
//   - context1 context.Context
//   - initDomainRequest *prototk.InitDomainRequest
func (_e *MockDomainManagerToDomain_Expecter) InitDomain(context1 interface{}, initDomainRequest interface{}) *MockDomainManagerToDomain_InitDomain_Call {
	return &MockDomainManagerToDomain_InitDomain_Call{Call: _e.mock.On("InitDomain", context1, initDomainRequest)}
}

func (_c *MockDomainManagerToDomain_InitDomain_Call) Run(run func(context1 context.Context, initDomainRequest *prototk.InitDomainRequest)) *MockDomainManagerToDomain_InitDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.InitDomainRequest
		if args[1] != nil {
			arg1 = args[1].(*prototk.InitDomainRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainManagerToDomain_InitDomain_Call) Return(initDomainResponse *prototk.InitDomainResponse, err error) *MockDomainManagerToDomain_InitDomain_Call {
	_c.Call.Return(initDomainResponse, err)
	return _c
}

func (_c *MockDomainManagerToDomain_InitDomain_Call) RunAndReturn(run func(context1 context.Context, initDomainRequest *prototk.InitDomainRequest) (*prototk.InitDomainResponse, error)) *MockDomainManagerToDomain_InitDomain_Call {
	_c.Call.Return(run)
	return _c
}

// InitPrivacyGroup provides a mock function for the type MockDomainManagerToDomain
func (_mock *MockDomainManagerToDomain) InitPrivacyGroup(context1 context.Context, initPrivacyGroupRequest *prototk.InitPrivacyGroupRequest) (*prototk.InitPrivacyGroupResponse, error) {
	ret := _mock.Called(context1, initPrivacyGroupRequest)

	if len(ret) == 0 {
		panic("no return value specified for InitPrivacyGroup")
	}

	var r0 *prototk.InitPrivacyGroupResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.InitPrivacyGroupRequest) (*prototk.InitPrivacyGroupResponse, error)); ok {
		return returnFunc(context1, initPrivacyGroupRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.InitPrivacyGroupRequest) *prototk.InitPrivacyGroupResponse); ok {
		r0 = returnFunc(context1, initPrivacyGroupRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.InitPrivacyGroupResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.InitPrivacyGroupRequest) error); ok {
		r1 = returnFunc(context1, initPrivacyGroupRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainManagerToDomain_InitPrivacyGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitPrivacyGroup'
type MockDomainManagerToDomain_InitPrivacyGroup_Call struct {
	*mock.Call
}

// InitPrivacyGroup is a helper method to define mock.On call
//   - context1 context.Context
//   - initPrivacyGroupRequest *prototk.InitPrivacyGroupRequest
func (_e *MockDomainManagerToDomain_Expecter) InitPrivacyGroup(context1 interface{}, initPrivacyGroupRequest interface{}) *MockDomainManagerToDomain_InitPrivacyGroup_Call {
	return &MockDomainManagerToDomain_InitPrivacyGroup_Call{Call: _e.mock.On("InitPrivacyGroup", context1, initPrivacyGroupRequest)}
}

func (_c *MockDomainManagerToDomain_InitPrivacyGroup_Call) Run(run func(context1 context.Context, initPrivacyGroupRequest *prototk.InitPrivacyGroupRequest)) *MockDomainManagerToDomain_InitPrivacyGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.InitPrivacyGroupRequest
		if args[1] != nil {
			arg1 = args[1].(*prototk.InitPrivacyGroupRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainManagerToDomain_InitPrivacyGroup_Call) Return(initPrivacyGroupResponse *prototk.InitPrivacyGroupResponse, err error) *MockDomainManagerToDomain_InitPrivacyGroup_Call {
	_c.Call.Return(initPrivacyGroupResponse, err)
	return _c
}

func (_c *MockDomainManagerToDomain_InitPrivacyGroup_Call) RunAndReturn(run func(context1 context.Context, initPrivacyGroupRequest *prototk.InitPrivacyGroupRequest) (*prototk.InitPrivacyGroupResponse, error)) *MockDomainManagerToDomain_InitPrivacyGroup_Call {
	_c.Call.Return(run)
	return _c
}

// InitTransaction provides a mock function for the type MockDomainManagerToDomain
func (_mock *MockDomainManagerToDomain) InitTransaction(context1 context.Context, initTransactionRequest *prototk.InitTransactionRequest) (*prototk.InitTransactionResponse, error) {
	ret := _mock.Called(context1, initTransactionRequest)

	if len(ret) == 0 {
		panic("no return value specified for InitTransaction")
	}

	var r0 *prototk.InitTransactionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.InitTransactionRequest) (*prototk.InitTransactionResponse, error)); ok {
		return returnFunc(context1, initTransactionRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.InitTransactionRequest) *prototk.InitTransactionResponse); ok {
		r0 = returnFunc(context1, initTransactionRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.InitTransactionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.InitTransactionRequest) error); ok {
		r1 = returnFunc(context1, initTransactionRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainManagerToDomain_InitTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitTransaction'
type MockDomainManagerToDomain_InitTransaction_Call struct {
	*mock.Call
}

// InitTransaction is a helper method to define mock.On call
//   - context1 context.Context
//   - initTransactionRequest *prototk.InitTransactionRequest
func (_e *MockDomainManagerToDomain_Expecter) InitTransaction(context1 interface{}, initTransactionRequest interface{}) *MockDomainManagerToDomain_InitTransaction_Call {
	return &MockDomainManagerToDomain_InitTransaction_Call{Call: _e.mock.On("InitTransaction", context1, initTransactionRequest)}
}

func (_c *MockDomainManagerToDomain_InitTransaction_Call) Run(run func(context1 context.Context, initTransactionRequest *prototk.InitTransactionRequest)) *MockDomainManagerToDomain_InitTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.InitTransactionRequest
		if args[1] != nil {
			arg1 = args[1].(*prototk.InitTransactionRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainManagerToDomain_InitTransaction_Call) Return(initTransactionResponse *prototk.InitTransactionResponse, err error) *MockDomainManagerToDomain_InitTransaction_Call {
	_c.Call.Return(initTransactionResponse, err)
	return _c
}

func (_c *MockDomainManagerToDomain_InitTransaction_Call) RunAndReturn(run func(context1 context.Context, initTransactionRequest *prototk.InitTransactionRequest) (*prototk.InitTransactionResponse, error)) *MockDomainManagerToDomain_InitTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// Initialized provides a mock function for the type MockDomainManagerToDomain
func (_mock *MockDomainManagerToDomain) Initialized() {
	_mock.Called()
	return
}

// MockDomainManagerToDomain_Initialized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialized'
type MockDomainManagerToDomain_Initialized_Call struct {
	*mock.Call
}

// Initialized is a helper method to define mock.On call
func (_e *MockDomainManagerToDomain_Expecter) Initialized() *MockDomainManagerToDomain_Initialized_Call {
	return &MockDomainManagerToDomain_Initialized_Call{Call: _e.mock.On("Initialized")}
}

func (_c *MockDomainManagerToDomain_Initialized_Call) Run(run func()) *MockDomainManagerToDomain_Initialized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDomainManagerToDomain_Initialized_Call) Return() *MockDomainManagerToDomain_Initialized_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDomainManagerToDomain_Initialized_Call) RunAndReturn(run func()) *MockDomainManagerToDomain_Initialized_Call {
	_c.Run(run)
	return _c
}

// PrepareDeploy provides a mock function for the type MockDomainManagerToDomain
func (_mock *MockDomainManagerToDomain) PrepareDeploy(context1 context.Context, prepareDeployRequest *prototk.PrepareDeployRequest) (*prototk.PrepareDeployResponse, error) {
	ret := _mock.Called(context1, prepareDeployRequest)

	if len(ret) == 0 {
		panic("no return value specified for PrepareDeploy")
	}

	var r0 *prototk.PrepareDeployResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.PrepareDeployRequest) (*prototk.PrepareDeployResponse, error)); ok {
		return returnFunc(context1, prepareDeployRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.PrepareDeployRequest) *prototk.PrepareDeployResponse); ok {
		r0 = returnFunc(context1, prepareDeployRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.PrepareDeployResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.PrepareDeployRequest) error); ok {
		r1 = returnFunc(context1, prepareDeployRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainManagerToDomain_PrepareDeploy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareDeploy'
type MockDomainManagerToDomain_PrepareDeploy_Call struct {
	*mock.Call
}

// PrepareDeploy is a helper method to define mock.On call
//   - context1 context.Context
//   - prepareDeployRequest *prototk.PrepareDeployRequest
func (_e *MockDomainManagerToDomain_Expecter) PrepareDeploy(context1 interface{}, prepareDeployRequest interface{}) *MockDomainManagerToDomain_PrepareDeploy_Call {
	return &MockDomainManagerToDomain_PrepareDeploy_Call{Call: _e.mock.On("PrepareDeploy", context1, prepareDeployRequest)}
}

func (_c *MockDomainManagerToDomain_PrepareDeploy_Call) Run(run func(context1 context.Context, prepareDeployRequest *prototk.PrepareDeployRequest)) *MockDomainManagerToDomain_PrepareDeploy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.PrepareDeployRequest
		if args[1] != nil {
			arg1 = args[1].(*prototk.PrepareDeployRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainManagerToDomain_PrepareDeploy_Call) Return(prepareDeployResponse *prototk.PrepareDeployResponse, err error) *MockDomainManagerToDomain_PrepareDeploy_Call {
	_c.Call.Return(prepareDeployResponse, err)
	return _c
}

func (_c *MockDomainManagerToDomain_PrepareDeploy_Call) RunAndReturn(run func(context1 context.Context, prepareDeployRequest *prototk.PrepareDeployRequest) (*prototk.PrepareDeployResponse, error)) *MockDomainManagerToDomain_PrepareDeploy_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareTransaction provides a mock function for the type MockDomainManagerToDomain
func (_mock *MockDomainManagerToDomain) PrepareTransaction(context1 context.Context, prepareTransactionRequest *prototk.PrepareTransactionRequest) (*prototk.PrepareTransactionResponse, error) {
	ret := _mock.Called(context1, prepareTransactionRequest)

	if len(ret) == 0 {
		panic("no return value specified for PrepareTransaction")
	}

	var r0 *prototk.PrepareTransactionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.PrepareTransactionRequest) (*prototk.PrepareTransactionResponse, error)); ok {
		return returnFunc(context1, prepareTransactionRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.PrepareTransactionRequest) *prototk.PrepareTransactionResponse); ok {
		r0 = returnFunc(context1, prepareTransactionRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.PrepareTransactionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.PrepareTransactionRequest) error); ok {
		r1 = returnFunc(context1, prepareTransactionRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainManagerToDomain_PrepareTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareTransaction'
type MockDomainManagerToDomain_PrepareTransaction_Call struct {
	*mock.Call
}

// PrepareTransaction is a helper method to define mock.On call
//   - context1 context.Context
//   - prepareTransactionRequest *prototk.PrepareTransactionRequest
func (_e *MockDomainManagerToDomain_Expecter) PrepareTransaction(context1 interface{}, prepareTransactionRequest interface{}) *MockDomainManagerToDomain_PrepareTransaction_Call {
	return &MockDomainManagerToDomain_PrepareTransaction_Call{Call: _e.mock.On("PrepareTransaction", context1, prepareTransactionRequest)}
}

func (_c *MockDomainManagerToDomain_PrepareTransaction_Call) Run(run func(context1 context.Context, prepareTransactionRequest *prototk.PrepareTransactionRequest)) *MockDomainManagerToDomain_PrepareTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.PrepareTransactionRequest
		if args[1] != nil {
			arg1 = args[1].(*prototk.PrepareTransactionRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainManagerToDomain_PrepareTransaction_Call) Return(prepareTransactionResponse *prototk.PrepareTransactionResponse, err error) *MockDomainManagerToDomain_PrepareTransaction_Call {
	_c.Call.Return(prepareTransactionResponse, err)
	return _c
}

func (_c *MockDomainManagerToDomain_PrepareTransaction_Call) RunAndReturn(run func(context1 context.Context, prepareTransactionRequest *prototk.PrepareTransactionRequest) (*prototk.PrepareTransactionResponse, error)) *MockDomainManagerToDomain_PrepareTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// Sign provides a mock function for the type MockDomainManagerToDomain
func (_mock *MockDomainManagerToDomain) Sign(context1 context.Context, signRequest *prototk.SignRequest) (*prototk.SignResponse, error) {
	ret := _mock.Called(context1, signRequest)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 *prototk.SignResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.SignRequest) (*prototk.SignResponse, error)); ok {
		return returnFunc(context1, signRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.SignRequest) *prototk.SignResponse); ok {
		r0 = returnFunc(context1, signRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.SignResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.SignRequest) error); ok {
		r1 = returnFunc(context1, signRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainManagerToDomain_Sign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sign'
type MockDomainManagerToDomain_Sign_Call struct {
	*mock.Call
}

// Sign is a helper method to define mock.On call
//   - context1 context.Context
//   - signRequest *prototk.SignRequest
func (_e *MockDomainManagerToDomain_Expecter) Sign(context1 interface{}, signRequest interface{}) *MockDomainManagerToDomain_Sign_Call {
	return &MockDomainManagerToDomain_Sign_Call{Call: _e.mock.On("Sign", context1, signRequest)}
}

func (_c *MockDomainManagerToDomain_Sign_Call) Run(run func(context1 context.Context, signRequest *prototk.SignRequest)) *MockDomainManagerToDomain_Sign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.SignRequest
		if args[1] != nil {
			arg1 = args[1].(*prototk.SignRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainManagerToDomain_Sign_Call) Return(signResponse *prototk.SignResponse, err error) *MockDomainManagerToDomain_Sign_Call {
	_c.Call.Return(signResponse, err)
	return _c
}

func (_c *MockDomainManagerToDomain_Sign_Call) RunAndReturn(run func(context1 context.Context, signRequest *prototk.SignRequest) (*prototk.SignResponse, error)) *MockDomainManagerToDomain_Sign_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateStateHashes provides a mock function for the type MockDomainManagerToDomain
func (_mock *MockDomainManagerToDomain) ValidateStateHashes(context1 context.Context, validateStateHashesRequest *prototk.ValidateStateHashesRequest) (*prototk.ValidateStateHashesResponse, error) {
	ret := _mock.Called(context1, validateStateHashesRequest)

	if len(ret) == 0 {
		panic("no return value specified for ValidateStateHashes")
	}

	var r0 *prototk.ValidateStateHashesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.ValidateStateHashesRequest) (*prototk.ValidateStateHashesResponse, error)); ok {
		return returnFunc(context1, validateStateHashesRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.ValidateStateHashesRequest) *prototk.ValidateStateHashesResponse); ok {
		r0 = returnFunc(context1, validateStateHashesRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.ValidateStateHashesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.ValidateStateHashesRequest) error); ok {
		r1 = returnFunc(context1, validateStateHashesRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainManagerToDomain_ValidateStateHashes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateStateHashes'
type MockDomainManagerToDomain_ValidateStateHashes_Call struct {
	*mock.Call
}

// ValidateStateHashes is a helper method to define mock.On call
//   - context1 context.Context
//   - validateStateHashesRequest *prototk.ValidateStateHashesRequest
func (_e *MockDomainManagerToDomain_Expecter) ValidateStateHashes(context1 interface{}, validateStateHashesRequest interface{}) *MockDomainManagerToDomain_ValidateStateHashes_Call {
	return &MockDomainManagerToDomain_ValidateStateHashes_Call{Call: _e.mock.On("ValidateStateHashes", context1, validateStateHashesRequest)}
}

func (_c *MockDomainManagerToDomain_ValidateStateHashes_Call) Run(run func(context1 context.Context, validateStateHashesRequest *prototk.ValidateStateHashesRequest)) *MockDomainManagerToDomain_ValidateStateHashes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.ValidateStateHashesRequest
		if args[1] != nil {
			arg1 = args[1].(*prototk.ValidateStateHashesRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainManagerToDomain_ValidateStateHashes_Call) Return(validateStateHashesResponse *prototk.ValidateStateHashesResponse, err error) *MockDomainManagerToDomain_ValidateStateHashes_Call {
	_c.Call.Return(validateStateHashesResponse, err)
	return _c
}

func (_c *MockDomainManagerToDomain_ValidateStateHashes_Call) RunAndReturn(run func(context1 context.Context, validateStateHashesRequest *prototk.ValidateStateHashesRequest) (*prototk.ValidateStateHashesResponse, error)) *MockDomainManagerToDomain_ValidateStateHashes_Call {
	_c.Call.Return(run)
	return _c
}

// WrapPrivacyGroupEVMTX provides a mock function for the type MockDomainManagerToDomain
func (_mock *MockDomainManagerToDomain) WrapPrivacyGroupEVMTX(context1 context.Context, wrapPrivacyGroupEVMTXRequest *prototk.WrapPrivacyGroupEVMTXRequest) (*prototk.WrapPrivacyGroupEVMTXResponse, error) {
	ret := _mock.Called(context1, wrapPrivacyGroupEVMTXRequest)

	if len(ret) == 0 {
		panic("no return value specified for WrapPrivacyGroupEVMTX")
	}

	var r0 *prototk.WrapPrivacyGroupEVMTXResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.WrapPrivacyGroupEVMTXRequest) (*prototk.WrapPrivacyGroupEVMTXResponse, error)); ok {
		return returnFunc(context1, wrapPrivacyGroupEVMTXRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.WrapPrivacyGroupEVMTXRequest) *prototk.WrapPrivacyGroupEVMTXResponse); ok {
		r0 = returnFunc(context1, wrapPrivacyGroupEVMTXRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.WrapPrivacyGroupEVMTXResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.WrapPrivacyGroupEVMTXRequest) error); ok {
		r1 = returnFunc(context1, wrapPrivacyGroupEVMTXRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainManagerToDomain_WrapPrivacyGroupEVMTX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WrapPrivacyGroupEVMTX'
type MockDomainManagerToDomain_WrapPrivacyGroupEVMTX_Call struct {
	*mock.Call
}

// WrapPrivacyGroupEVMTX is a helper method to define mock.On call
//   - context1 context.Context
//   - wrapPrivacyGroupEVMTXRequest *prototk.WrapPrivacyGroupEVMTXRequest
func (_e *MockDomainManagerToDomain_Expecter) WrapPrivacyGroupEVMTX(context1 interface{}, wrapPrivacyGroupEVMTXRequest interface{}) *MockDomainManagerToDomain_WrapPrivacyGroupEVMTX_Call {
	return &MockDomainManagerToDomain_WrapPrivacyGroupEVMTX_Call{Call: _e.mock.On("WrapPrivacyGroupEVMTX", context1, wrapPrivacyGroupEVMTXRequest)}
}

func (_c *MockDomainManagerToDomain_WrapPrivacyGroupEVMTX_Call) Run(run func(context1 context.Context, wrapPrivacyGroupEVMTXRequest *prototk.WrapPrivacyGroupEVMTXRequest)) *MockDomainManagerToDomain_WrapPrivacyGroupEVMTX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.WrapPrivacyGroupEVMTXRequest
		if args[1] != nil {
			arg1 = args[1].(*prototk.WrapPrivacyGroupEVMTXRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainManagerToDomain_WrapPrivacyGroupEVMTX_Call) Return(wrapPrivacyGroupEVMTXResponse *prototk.WrapPrivacyGroupEVMTXResponse, err error) *MockDomainManagerToDomain_WrapPrivacyGroupEVMTX_Call {
	_c.Call.Return(wrapPrivacyGroupEVMTXResponse, err)
	return _c
}

func (_c *MockDomainManagerToDomain_WrapPrivacyGroupEVMTX_Call) RunAndReturn(run func(context1 context.Context, wrapPrivacyGroupEVMTXRequest *prototk.WrapPrivacyGroupEVMTXRequest) (*prototk.WrapPrivacyGroupEVMTXResponse, error)) *MockDomainManagerToDomain_WrapPrivacyGroupEVMTX_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDomainManager creates a new instance of MockDomainManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDomainManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDomainManager {
	mock := &MockDomainManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDomainManager is an autogenerated mock type for the DomainManager type
type MockDomainManager struct {
	mock.Mock
}

type MockDomainManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDomainManager) EXPECT() *MockDomainManager_Expecter {
	return &MockDomainManager_Expecter{mock: &_m.Mock}
}

// ConfiguredDomains provides a mock function for the type MockDomainManager
func (_mock *MockDomainManager) ConfiguredDomains() map[string]*pldconf.PluginConfig {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ConfiguredDomains")
	}

	var r0 map[string]*pldconf.PluginConfig
	if returnFunc, ok := ret.Get(0).(func() map[string]*pldconf.PluginConfig); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*pldconf.PluginConfig)
		}
	}
	return r0
}

// MockDomainManager_ConfiguredDomains_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfiguredDomains'
type MockDomainManager_ConfiguredDomains_Call struct {
	*mock.Call
}

// ConfiguredDomains is a helper method to define mock.On call
func (_e *MockDomainManager_Expecter) ConfiguredDomains() *MockDomainManager_ConfiguredDomains_Call {
	return &MockDomainManager_ConfiguredDomains_Call{Call: _e.mock.On("ConfiguredDomains")}
}

func (_c *MockDomainManager_ConfiguredDomains_Call) Run(run func()) *MockDomainManager_ConfiguredDomains_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDomainManager_ConfiguredDomains_Call) Return(stringToPluginConfig map[string]*pldconf.PluginConfig) *MockDomainManager_ConfiguredDomains_Call {
	_c.Call.Return(stringToPluginConfig)
	return _c
}

func (_c *MockDomainManager_ConfiguredDomains_Call) RunAndReturn(run func() map[string]*pldconf.PluginConfig) *MockDomainManager_ConfiguredDomains_Call {
	_c.Call.Return(run)
	return _c
}

// DomainRegistered provides a mock function for the type MockDomainManager
func (_mock *MockDomainManager) DomainRegistered(name string, toDomain DomainManagerToDomain) (plugintk.DomainCallbacks, error) {
	ret := _mock.Called(name, toDomain)

	if len(ret) == 0 {
		panic("no return value specified for DomainRegistered")
	}

	var r0 plugintk.DomainCallbacks
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, DomainManagerToDomain) (plugintk.DomainCallbacks, error)); ok {
		return returnFunc(name, toDomain)
	}
	if returnFunc, ok := ret.Get(0).(func(string, DomainManagerToDomain) plugintk.DomainCallbacks); ok {
		r0 = returnFunc(name, toDomain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plugintk.DomainCallbacks)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, DomainManagerToDomain) error); ok {
		r1 = returnFunc(name, toDomain)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainManager_DomainRegistered_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DomainRegistered'
type MockDomainManager_DomainRegistered_Call struct {
	*mock.Call
}

// DomainRegistered is a helper method to define mock.On call
//   - name string
//   - toDomain DomainManagerToDomain
func (_e *MockDomainManager_Expecter) DomainRegistered(name interface{}, toDomain interface{}) *MockDomainManager_DomainRegistered_Call {
	return &MockDomainManager_DomainRegistered_Call{Call: _e.mock.On("DomainRegistered", name, toDomain)}
}

func (_c *MockDomainManager_DomainRegistered_Call) Run(run func(name string, toDomain DomainManagerToDomain)) *MockDomainManager_DomainRegistered_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 DomainManagerToDomain
		if args[1] != nil {
			arg1 = args[1].(DomainManagerToDomain)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainManager_DomainRegistered_Call) Return(fromDomain plugintk.DomainCallbacks, err error) *MockDomainManager_DomainRegistered_Call {
	_c.Call.Return(fromDomain, err)
	return _c
}

func (_c *MockDomainManager_DomainRegistered_Call) RunAndReturn(run func(name string, toDomain DomainManagerToDomain) (plugintk.DomainCallbacks, error)) *MockDomainManager_DomainRegistered_Call {
	_c.Call.Return(run)
	return _c
}

// ExecAndWaitTransaction provides a mock function for the type MockDomainManager
func (_mock *MockDomainManager) ExecAndWaitTransaction(ctx context.Context, txID uuid.UUID, call func() error) error {
	ret := _mock.Called(ctx, txID, call)

	if len(ret) == 0 {
		panic("no return value specified for ExecAndWaitTransaction")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, func() error) error); ok {
		r0 = returnFunc(ctx, txID, call)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDomainManager_ExecAndWaitTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecAndWaitTransaction'
type MockDomainManager_ExecAndWaitTransaction_Call struct {
	*mock.Call
}

// ExecAndWaitTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - txID uuid.UUID
//   - call func() error
func (_e *MockDomainManager_Expecter) ExecAndWaitTransaction(ctx interface{}, txID interface{}, call interface{}) *MockDomainManager_ExecAndWaitTransaction_Call {
	return &MockDomainManager_ExecAndWaitTransaction_Call{Call: _e.mock.On("ExecAndWaitTransaction", ctx, txID, call)}
}

func (_c *MockDomainManager_ExecAndWaitTransaction_Call) Run(run func(ctx context.Context, txID uuid.UUID, call func() error)) *MockDomainManager_ExecAndWaitTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 func() error
		if args[2] != nil {
			arg2 = args[2].(func() error)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDomainManager_ExecAndWaitTransaction_Call) Return(err error) *MockDomainManager_ExecAndWaitTransaction_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDomainManager_ExecAndWaitTransaction_Call) RunAndReturn(run func(ctx context.Context, txID uuid.UUID, call func() error) error) *MockDomainManager_ExecAndWaitTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// ExecDeployAndWait provides a mock function for the type MockDomainManager
func (_mock *MockDomainManager) ExecDeployAndWait(ctx context.Context, txID uuid.UUID, call func() error) (DomainSmartContract, error) {
	ret := _mock.Called(ctx, txID, call)

	if len(ret) == 0 {
		panic("no return value specified for ExecDeployAndWait")
	}

	var r0 DomainSmartContract
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, func() error) (DomainSmartContract, error)); ok {
		return returnFunc(ctx, txID, call)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, func() error) DomainSmartContract); ok {
		r0 = returnFunc(ctx, txID, call)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(DomainSmartContract)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, func() error) error); ok {
		r1 = returnFunc(ctx, txID, call)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainManager_ExecDeployAndWait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecDeployAndWait'
type MockDomainManager_ExecDeployAndWait_Call struct {
	*mock.Call
}

// ExecDeployAndWait is a helper method to define mock.On call
//   - ctx context.Context
//   - txID uuid.UUID
//   - call func() error
func (_e *MockDomainManager_Expecter) ExecDeployAndWait(ctx interface{}, txID interface{}, call interface{}) *MockDomainManager_ExecDeployAndWait_Call {
	return &MockDomainManager_ExecDeployAndWait_Call{Call: _e.mock.On("ExecDeployAndWait", ctx, txID, call)}
}

func (_c *MockDomainManager_ExecDeployAndWait_Call) Run(run func(ctx context.Context, txID uuid.UUID, call func() error)) *MockDomainManager_ExecDeployAndWait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 func() error
		if args[2] != nil {
			arg2 = args[2].(func() error)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDomainManager_ExecDeployAndWait_Call) Return(dc DomainSmartContract, err error) *MockDomainManager_ExecDeployAndWait_Call {
	_c.Call.Return(dc, err)
	return _c
}

func (_c *MockDomainManager_ExecDeployAndWait_Call) RunAndReturn(run func(ctx context.Context, txID uuid.UUID, call func() error) (DomainSmartContract, error)) *MockDomainManager_ExecDeployAndWait_Call {
	_c.Call.Return(run)
	return _c
}

// GetDomainByName provides a mock function for the type MockDomainManager
func (_mock *MockDomainManager) GetDomainByName(ctx context.Context, name string) (Domain, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetDomainByName")
	}

	var r0 Domain
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (Domain, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) Domain); ok {
		r0 = returnFunc(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Domain)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainManager_GetDomainByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDomainByName'
type MockDomainManager_GetDomainByName_Call struct {
	*mock.Call
}

// GetDomainByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockDomainManager_Expecter) GetDomainByName(ctx interface{}, name interface{}) *MockDomainManager_GetDomainByName_Call {
	return &MockDomainManager_GetDomainByName_Call{Call: _e.mock.On("GetDomainByName", ctx, name)}
}

func (_c *MockDomainManager_GetDomainByName_Call) Run(run func(ctx context.Context, name string)) *MockDomainManager_GetDomainByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainManager_GetDomainByName_Call) Return(domain Domain, err error) *MockDomainManager_GetDomainByName_Call {
	_c.Call.Return(domain, err)
	return _c
}

func (_c *MockDomainManager_GetDomainByName_Call) RunAndReturn(run func(ctx context.Context, name string) (Domain, error)) *MockDomainManager_GetDomainByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetSigner provides a mock function for the type MockDomainManager
func (_mock *MockDomainManager) GetSigner() signerapi.InMemorySigner {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSigner")
	}

	var r0 signerapi.InMemorySigner
	if returnFunc, ok := ret.Get(0).(func() signerapi.InMemorySigner); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(signerapi.InMemorySigner)
		}
	}
	return r0
}

// MockDomainManager_GetSigner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSigner'
type MockDomainManager_GetSigner_Call struct {
	*mock.Call
}

// GetSigner is a helper method to define mock.On call
func (_e *MockDomainManager_Expecter) GetSigner() *MockDomainManager_GetSigner_Call {
	return &MockDomainManager_GetSigner_Call{Call: _e.mock.On("GetSigner")}
}

func (_c *MockDomainManager_GetSigner_Call) Run(run func()) *MockDomainManager_GetSigner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDomainManager_GetSigner_Call) Return(inMemorySigner signerapi.InMemorySigner) *MockDomainManager_GetSigner_Call {
	_c.Call.Return(inMemorySigner)
	return _c
}

func (_c *MockDomainManager_GetSigner_Call) RunAndReturn(run func() signerapi.InMemorySigner) *MockDomainManager_GetSigner_Call {
	_c.Call.Return(run)
	return _c
}

// GetSmartContractByAddress provides a mock function for the type MockDomainManager
func (_mock *MockDomainManager) GetSmartContractByAddress(ctx context.Context, dbTX persistence.DBTX, addr pldtypes.EthAddress) (DomainSmartContract, error) {
	ret := _mock.Called(ctx, dbTX, addr)

	if len(ret) == 0 {
		panic("no return value specified for GetSmartContractByAddress")
	}

	var r0 DomainSmartContract
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, pldtypes.EthAddress) (DomainSmartContract, error)); ok {
		return returnFunc(ctx, dbTX, addr)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, pldtypes.EthAddress) DomainSmartContract); ok {
		r0 = returnFunc(ctx, dbTX, addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(DomainSmartContract)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, pldtypes.EthAddress) error); ok {
		r1 = returnFunc(ctx, dbTX, addr)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainManager_GetSmartContractByAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSmartContractByAddress'
type MockDomainManager_GetSmartContractByAddress_Call struct {
	*mock.Call
}

// GetSmartContractByAddress is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - addr pldtypes.EthAddress
func (_e *MockDomainManager_Expecter) GetSmartContractByAddress(ctx interface{}, dbTX interface{}, addr interface{}) *MockDomainManager_GetSmartContractByAddress_Call {
	return &MockDomainManager_GetSmartContractByAddress_Call{Call: _e.mock.On("GetSmartContractByAddress", ctx, dbTX, addr)}
}

func (_c *MockDomainManager_GetSmartContractByAddress_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, addr pldtypes.EthAddress)) *MockDomainManager_GetSmartContractByAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 pldtypes.EthAddress
		if args[2] != nil {
			arg2 = args[2].(pldtypes.EthAddress)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDomainManager_GetSmartContractByAddress_Call) Return(domainSmartContract DomainSmartContract, err error) *MockDomainManager_GetSmartContractByAddress_Call {
	_c.Call.Return(domainSmartContract, err)
	return _c
}

func (_c *MockDomainManager_GetSmartContractByAddress_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, addr pldtypes.EthAddress) (DomainSmartContract, error)) *MockDomainManager_GetSmartContractByAddress_Call {
	_c.Call.Return(run)
	return _c
}

// PostInit provides a mock function for the type MockDomainManager
func (_mock *MockDomainManager) PostInit(allComponents AllComponents) error {
	ret := _mock.Called(allComponents)

	if len(ret) == 0 {
		panic("no return value specified for PostInit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(AllComponents) error); ok {
		r0 = returnFunc(allComponents)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDomainManager_PostInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostInit'
type MockDomainManager_PostInit_Call struct {
	*mock.Call
}

// PostInit is a helper method to define mock.On call
//   - allComponents AllComponents
func (_e *MockDomainManager_Expecter) PostInit(allComponents interface{}) *MockDomainManager_PostInit_Call {
	return &MockDomainManager_PostInit_Call{Call: _e.mock.On("PostInit", allComponents)}
}

func (_c *MockDomainManager_PostInit_Call) Run(run func(allComponents AllComponents)) *MockDomainManager_PostInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 AllComponents
		if args[0] != nil {
			arg0 = args[0].(AllComponents)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDomainManager_PostInit_Call) Return(err error) *MockDomainManager_PostInit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDomainManager_PostInit_Call) RunAndReturn(run func(allComponents AllComponents) error) *MockDomainManager_PostInit_Call {
	_c.Call.Return(run)
	return _c
}

// PreInit provides a mock function for the type MockDomainManager
func (_mock *MockDomainManager) PreInit(preInitComponents PreInitComponents) (*ManagerInitResult, error) {
	ret := _mock.Called(preInitComponents)

	if len(ret) == 0 {
		panic("no return value specified for PreInit")
	}

	var r0 *ManagerInitResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(PreInitComponents) (*ManagerInitResult, error)); ok {
		return returnFunc(preInitComponents)
	}
	if returnFunc, ok := ret.Get(0).(func(PreInitComponents) *ManagerInitResult); ok {
		r0 = returnFunc(preInitComponents)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ManagerInitResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(PreInitComponents) error); ok {
		r1 = returnFunc(preInitComponents)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainManager_PreInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreInit'
type MockDomainManager_PreInit_Call struct {
	*mock.Call
}

// PreInit is a helper method to define mock.On call
//   - preInitComponents PreInitComponents
func (_e *MockDomainManager_Expecter) PreInit(preInitComponents interface{}) *MockDomainManager_PreInit_Call {
	return &MockDomainManager_PreInit_Call{Call: _e.mock.On("PreInit", preInitComponents)}
}

func (_c *MockDomainManager_PreInit_Call) Run(run func(preInitComponents PreInitComponents)) *MockDomainManager_PreInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 PreInitComponents
		if args[0] != nil {
			arg0 = args[0].(PreInitComponents)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDomainManager_PreInit_Call) Return(managerInitResult *ManagerInitResult, err error) *MockDomainManager_PreInit_Call {
	_c.Call.Return(managerInitResult, err)
	return _c
}

func (_c *MockDomainManager_PreInit_Call) RunAndReturn(run func(preInitComponents PreInitComponents) (*ManagerInitResult, error)) *MockDomainManager_PreInit_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockDomainManager
func (_mock *MockDomainManager) Start() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDomainManager_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockDomainManager_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockDomainManager_Expecter) Start() *MockDomainManager_Start_Call {
	return &MockDomainManager_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockDomainManager_Start_Call) Run(run func()) *MockDomainManager_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDomainManager_Start_Call) Return(err error) *MockDomainManager_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDomainManager_Start_Call) RunAndReturn(run func() error) *MockDomainManager_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockDomainManager
func (_mock *MockDomainManager) Stop() {
	_mock.Called()
	return
}

// MockDomainManager_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockDomainManager_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockDomainManager_Expecter) Stop() *MockDomainManager_Stop_Call {
	return &MockDomainManager_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockDomainManager_Stop_Call) Run(run func()) *MockDomainManager_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDomainManager_Stop_Call) Return() *MockDomainManager_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDomainManager_Stop_Call) RunAndReturn(run func()) *MockDomainManager_Stop_Call {
	_c.Run(run)
	return _c
}

// NewMockDomain creates a new instance of MockDomain. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDomain(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDomain {
	mock := &MockDomain{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDomain is an autogenerated mock type for the Domain type
type MockDomain struct {
	mock.Mock
}

type MockDomain_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDomain) EXPECT() *MockDomain_Expecter {
	return &MockDomain_Expecter{mock: &_m.Mock}
}

// BuildDomainReceipt provides a mock function for the type MockDomain
func (_mock *MockDomain) BuildDomainReceipt(ctx context.Context, dbTX persistence.DBTX, txID uuid.UUID, txStates *pldapi.TransactionStates) (pldtypes.RawJSON, error) {
	ret := _mock.Called(ctx, dbTX, txID, txStates)

	if len(ret) == 0 {
		panic("no return value specified for BuildDomainReceipt")
	}

	var r0 pldtypes.RawJSON
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, uuid.UUID, *pldapi.TransactionStates) (pldtypes.RawJSON, error)); ok {
		return returnFunc(ctx, dbTX, txID, txStates)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, uuid.UUID, *pldapi.TransactionStates) pldtypes.RawJSON); ok {
		r0 = returnFunc(ctx, dbTX, txID, txStates)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pldtypes.RawJSON)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, uuid.UUID, *pldapi.TransactionStates) error); ok {
		r1 = returnFunc(ctx, dbTX, txID, txStates)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomain_BuildDomainReceipt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildDomainReceipt'
type MockDomain_BuildDomainReceipt_Call struct {
	*mock.Call
}

// BuildDomainReceipt is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - txID uuid.UUID
//   - txStates *pldapi.TransactionStates
func (_e *MockDomain_Expecter) BuildDomainReceipt(ctx interface{}, dbTX interface{}, txID interface{}, txStates interface{}) *MockDomain_BuildDomainReceipt_Call {
	return &MockDomain_BuildDomainReceipt_Call{Call: _e.mock.On("BuildDomainReceipt", ctx, dbTX, txID, txStates)}
}

func (_c *MockDomain_BuildDomainReceipt_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, txID uuid.UUID, txStates *pldapi.TransactionStates)) *MockDomain_BuildDomainReceipt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 *pldapi.TransactionStates
		if args[3] != nil {
			arg3 = args[3].(*pldapi.TransactionStates)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockDomain_BuildDomainReceipt_Call) Return(rawJSON pldtypes.RawJSON, err error) *MockDomain_BuildDomainReceipt_Call {
	_c.Call.Return(rawJSON, err)
	return _c
}

func (_c *MockDomain_BuildDomainReceipt_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, txID uuid.UUID, txStates *pldapi.TransactionStates) (pldtypes.RawJSON, error)) *MockDomain_BuildDomainReceipt_Call {
	_c.Call.Return(run)
	return _c
}

// Configuration provides a mock function for the type MockDomain
func (_mock *MockDomain) Configuration() *prototk.DomainConfig {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Configuration")
	}

	var r0 *prototk.DomainConfig
	if returnFunc, ok := ret.Get(0).(func() *prototk.DomainConfig); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.DomainConfig)
		}
	}
	return r0
}

// MockDomain_Configuration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Configuration'
type MockDomain_Configuration_Call struct {
	*mock.Call
}

// Configuration is a helper method to define mock.On call
func (_e *MockDomain_Expecter) Configuration() *MockDomain_Configuration_Call {
	return &MockDomain_Configuration_Call{Call: _e.mock.On("Configuration")}
}

func (_c *MockDomain_Configuration_Call) Run(run func()) *MockDomain_Configuration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDomain_Configuration_Call) Return(domainConfig *prototk.DomainConfig) *MockDomain_Configuration_Call {
	_c.Call.Return(domainConfig)
	return _c
}

func (_c *MockDomain_Configuration_Call) RunAndReturn(run func() *prototk.DomainConfig) *MockDomain_Configuration_Call {
	_c.Call.Return(run)
	return _c
}

// ConfigurePrivacyGroup provides a mock function for the type MockDomain
func (_mock *MockDomain) ConfigurePrivacyGroup(ctx context.Context, inputConfiguration map[string]string) (map[string]string, error) {
	ret := _mock.Called(ctx, inputConfiguration)

	if len(ret) == 0 {
		panic("no return value specified for ConfigurePrivacyGroup")
	}

	var r0 map[string]string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, map[string]string) (map[string]string, error)); ok {
		return returnFunc(ctx, inputConfiguration)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, map[string]string) map[string]string); ok {
		r0 = returnFunc(ctx, inputConfiguration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, map[string]string) error); ok {
		r1 = returnFunc(ctx, inputConfiguration)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomain_ConfigurePrivacyGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigurePrivacyGroup'
type MockDomain_ConfigurePrivacyGroup_Call struct {
	*mock.Call
}

// ConfigurePrivacyGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - inputConfiguration map[string]string
func (_e *MockDomain_Expecter) ConfigurePrivacyGroup(ctx interface{}, inputConfiguration interface{}) *MockDomain_ConfigurePrivacyGroup_Call {
	return &MockDomain_ConfigurePrivacyGroup_Call{Call: _e.mock.On("ConfigurePrivacyGroup", ctx, inputConfiguration)}
}

func (_c *MockDomain_ConfigurePrivacyGroup_Call) Run(run func(ctx context.Context, inputConfiguration map[string]string)) *MockDomain_ConfigurePrivacyGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 map[string]string
		if args[1] != nil {
			arg1 = args[1].(map[string]string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomain_ConfigurePrivacyGroup_Call) Return(configuration map[string]string, err error) *MockDomain_ConfigurePrivacyGroup_Call {
	_c.Call.Return(configuration, err)
	return _c
}

func (_c *MockDomain_ConfigurePrivacyGroup_Call) RunAndReturn(run func(ctx context.Context, inputConfiguration map[string]string) (map[string]string, error)) *MockDomain_ConfigurePrivacyGroup_Call {
	_c.Call.Return(run)
	return _c
}

// CustomHashFunction provides a mock function for the type MockDomain
func (_mock *MockDomain) CustomHashFunction() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CustomHashFunction")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockDomain_CustomHashFunction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CustomHashFunction'
type MockDomain_CustomHashFunction_Call struct {
	*mock.Call
}

// CustomHashFunction is a helper method to define mock.On call
func (_e *MockDomain_Expecter) CustomHashFunction() *MockDomain_CustomHashFunction_Call {
	return &MockDomain_CustomHashFunction_Call{Call: _e.mock.On("CustomHashFunction")}
}

func (_c *MockDomain_CustomHashFunction_Call) Run(run func()) *MockDomain_CustomHashFunction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDomain_CustomHashFunction_Call) Return(b bool) *MockDomain_CustomHashFunction_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockDomain_CustomHashFunction_Call) RunAndReturn(run func() bool) *MockDomain_CustomHashFunction_Call {
	_c.Call.Return(run)
	return _c
}

// GetDomainReceipt provides a mock function for the type MockDomain
func (_mock *MockDomain) GetDomainReceipt(ctx context.Context, dbTX persistence.DBTX, txID uuid.UUID) (pldtypes.RawJSON, error) {
	ret := _mock.Called(ctx, dbTX, txID)

	if len(ret) == 0 {
		panic("no return value specified for GetDomainReceipt")
	}

	var r0 pldtypes.RawJSON
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, uuid.UUID) (pldtypes.RawJSON, error)); ok {
		return returnFunc(ctx, dbTX, txID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, uuid.UUID) pldtypes.RawJSON); ok {
		r0 = returnFunc(ctx, dbTX, txID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pldtypes.RawJSON)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, dbTX, txID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomain_GetDomainReceipt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDomainReceipt'
type MockDomain_GetDomainReceipt_Call struct {
	*mock.Call
}

// GetDomainReceipt is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - txID uuid.UUID
func (_e *MockDomain_Expecter) GetDomainReceipt(ctx interface{}, dbTX interface{}, txID interface{}) *MockDomain_GetDomainReceipt_Call {
	return &MockDomain_GetDomainReceipt_Call{Call: _e.mock.On("GetDomainReceipt", ctx, dbTX, txID)}
}

func (_c *MockDomain_GetDomainReceipt_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, txID uuid.UUID)) *MockDomain_GetDomainReceipt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDomain_GetDomainReceipt_Call) Return(rawJSON pldtypes.RawJSON, err error) *MockDomain_GetDomainReceipt_Call {
	_c.Call.Return(rawJSON, err)
	return _c
}

func (_c *MockDomain_GetDomainReceipt_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, txID uuid.UUID) (pldtypes.RawJSON, error)) *MockDomain_GetDomainReceipt_Call {
	_c.Call.Return(run)
	return _c
}

// InitDeploy provides a mock function for the type MockDomain
func (_mock *MockDomain) InitDeploy(ctx context.Context, tx *PrivateContractDeploy) error {
	ret := _mock.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for InitDeploy")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *PrivateContractDeploy) error); ok {
		r0 = returnFunc(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDomain_InitDeploy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitDeploy'
type MockDomain_InitDeploy_Call struct {
	*mock.Call
}

// InitDeploy is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *PrivateContractDeploy
func (_e *MockDomain_Expecter) InitDeploy(ctx interface{}, tx interface{}) *MockDomain_InitDeploy_Call {
	return &MockDomain_InitDeploy_Call{Call: _e.mock.On("InitDeploy", ctx, tx)}
}

func (_c *MockDomain_InitDeploy_Call) Run(run func(ctx context.Context, tx *PrivateContractDeploy)) *MockDomain_InitDeploy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *PrivateContractDeploy
		if args[1] != nil {
			arg1 = args[1].(*PrivateContractDeploy)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomain_InitDeploy_Call) Return(err error) *MockDomain_InitDeploy_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDomain_InitDeploy_Call) RunAndReturn(run func(ctx context.Context, tx *PrivateContractDeploy) error) *MockDomain_InitDeploy_Call {
	_c.Call.Return(run)
	return _c
}

// InitPrivacyGroup provides a mock function for the type MockDomain
func (_mock *MockDomain) InitPrivacyGroup(ctx context.Context, id pldtypes.HexBytes, genesis *pldapi.PrivacyGroupGenesisState) (*pldapi.TransactionInput, error) {
	ret := _mock.Called(ctx, id, genesis)

	if len(ret) == 0 {
		panic("no return value specified for InitPrivacyGroup")
	}

	var r0 *pldapi.TransactionInput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, pldtypes.HexBytes, *pldapi.PrivacyGroupGenesisState) (*pldapi.TransactionInput, error)); ok {
		return returnFunc(ctx, id, genesis)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, pldtypes.HexBytes, *pldapi.PrivacyGroupGenesisState) *pldapi.TransactionInput); ok {
		r0 = returnFunc(ctx, id, genesis)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.TransactionInput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, pldtypes.HexBytes, *pldapi.PrivacyGroupGenesisState) error); ok {
		r1 = returnFunc(ctx, id, genesis)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomain_InitPrivacyGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitPrivacyGroup'
type MockDomain_InitPrivacyGroup_Call struct {
	*mock.Call
}

// InitPrivacyGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - id pldtypes.HexBytes
//   - genesis *pldapi.PrivacyGroupGenesisState
func (_e *MockDomain_Expecter) InitPrivacyGroup(ctx interface{}, id interface{}, genesis interface{}) *MockDomain_InitPrivacyGroup_Call {
	return &MockDomain_InitPrivacyGroup_Call{Call: _e.mock.On("InitPrivacyGroup", ctx, id, genesis)}
}

func (_c *MockDomain_InitPrivacyGroup_Call) Run(run func(ctx context.Context, id pldtypes.HexBytes, genesis *pldapi.PrivacyGroupGenesisState)) *MockDomain_InitPrivacyGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 pldtypes.HexBytes
		if args[1] != nil {
			arg1 = args[1].(pldtypes.HexBytes)
		}
		var arg2 *pldapi.PrivacyGroupGenesisState
		if args[2] != nil {
			arg2 = args[2].(*pldapi.PrivacyGroupGenesisState)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDomain_InitPrivacyGroup_Call) Return(tx *pldapi.TransactionInput, err error) *MockDomain_InitPrivacyGroup_Call {
	_c.Call.Return(tx, err)
	return _c
}

func (_c *MockDomain_InitPrivacyGroup_Call) RunAndReturn(run func(ctx context.Context, id pldtypes.HexBytes, genesis *pldapi.PrivacyGroupGenesisState) (*pldapi.TransactionInput, error)) *MockDomain_InitPrivacyGroup_Call {
	_c.Call.Return(run)
	return _c
}

// Initialized provides a mock function for the type MockDomain
func (_mock *MockDomain) Initialized() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Initialized")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockDomain_Initialized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialized'
type MockDomain_Initialized_Call struct {
	*mock.Call
}

// Initialized is a helper method to define mock.On call
func (_e *MockDomain_Expecter) Initialized() *MockDomain_Initialized_Call {
	return &MockDomain_Initialized_Call{Call: _e.mock.On("Initialized")}
}

func (_c *MockDomain_Initialized_Call) Run(run func()) *MockDomain_Initialized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDomain_Initialized_Call) Return(b bool) *MockDomain_Initialized_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockDomain_Initialized_Call) RunAndReturn(run func() bool) *MockDomain_Initialized_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function for the type MockDomain
func (_mock *MockDomain) Name() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockDomain_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockDomain_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockDomain_Expecter) Name() *MockDomain_Name_Call {
	return &MockDomain_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockDomain_Name_Call) Run(run func()) *MockDomain_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDomain_Name_Call) Return(s string) *MockDomain_Name_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockDomain_Name_Call) RunAndReturn(run func() string) *MockDomain_Name_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareDeploy provides a mock function for the type MockDomain
func (_mock *MockDomain) PrepareDeploy(ctx context.Context, tx *PrivateContractDeploy) error {
	ret := _mock.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for PrepareDeploy")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *PrivateContractDeploy) error); ok {
		r0 = returnFunc(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDomain_PrepareDeploy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareDeploy'
type MockDomain_PrepareDeploy_Call struct {
	*mock.Call
}

// PrepareDeploy is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *PrivateContractDeploy
func (_e *MockDomain_Expecter) PrepareDeploy(ctx interface{}, tx interface{}) *MockDomain_PrepareDeploy_Call {
	return &MockDomain_PrepareDeploy_Call{Call: _e.mock.On("PrepareDeploy", ctx, tx)}
}

func (_c *MockDomain_PrepareDeploy_Call) Run(run func(ctx context.Context, tx *PrivateContractDeploy)) *MockDomain_PrepareDeploy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *PrivateContractDeploy
		if args[1] != nil {
			arg1 = args[1].(*PrivateContractDeploy)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomain_PrepareDeploy_Call) Return(err error) *MockDomain_PrepareDeploy_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDomain_PrepareDeploy_Call) RunAndReturn(run func(ctx context.Context, tx *PrivateContractDeploy) error) *MockDomain_PrepareDeploy_Call {
	_c.Call.Return(run)
	return _c
}

// RegistryAddress provides a mock function for the type MockDomain
func (_mock *MockDomain) RegistryAddress() *pldtypes.EthAddress {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for RegistryAddress")
	}

	var r0 *pldtypes.EthAddress
	if returnFunc, ok := ret.Get(0).(func() *pldtypes.EthAddress); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldtypes.EthAddress)
		}
	}
	return r0
}

// MockDomain_RegistryAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegistryAddress'
type MockDomain_RegistryAddress_Call struct {
	*mock.Call
}

// RegistryAddress is a helper method to define mock.On call
func (_e *MockDomain_Expecter) RegistryAddress() *MockDomain_RegistryAddress_Call {
	return &MockDomain_RegistryAddress_Call{Call: _e.mock.On("RegistryAddress")}
}

func (_c *MockDomain_RegistryAddress_Call) Run(run func()) *MockDomain_RegistryAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDomain_RegistryAddress_Call) Return(ethAddress *pldtypes.EthAddress) *MockDomain_RegistryAddress_Call {
	_c.Call.Return(ethAddress)
	return _c
}

func (_c *MockDomain_RegistryAddress_Call) RunAndReturn(run func() *pldtypes.EthAddress) *MockDomain_RegistryAddress_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateStateHashes provides a mock function for the type MockDomain
func (_mock *MockDomain) ValidateStateHashes(ctx context.Context, states []*FullState) ([]pldtypes.HexBytes, error) {
	ret := _mock.Called(ctx, states)

	if len(ret) == 0 {
		panic("no return value specified for ValidateStateHashes")
	}

	var r0 []pldtypes.HexBytes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*FullState) ([]pldtypes.HexBytes, error)); ok {
		return returnFunc(ctx, states)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*FullState) []pldtypes.HexBytes); ok {
		r0 = returnFunc(ctx, states)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pldtypes.HexBytes)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*FullState) error); ok {
		r1 = returnFunc(ctx, states)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomain_ValidateStateHashes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateStateHashes'
type MockDomain_ValidateStateHashes_Call struct {
	*mock.Call
}

// ValidateStateHashes is a helper method to define mock.On call
//   - ctx context.Context
//   - states []*FullState
func (_e *MockDomain_Expecter) ValidateStateHashes(ctx interface{}, states interface{}) *MockDomain_ValidateStateHashes_Call {
	return &MockDomain_ValidateStateHashes_Call{Call: _e.mock.On("ValidateStateHashes", ctx, states)}
}

func (_c *MockDomain_ValidateStateHashes_Call) Run(run func(ctx context.Context, states []*FullState)) *MockDomain_ValidateStateHashes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*FullState
		if args[1] != nil {
			arg1 = args[1].([]*FullState)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomain_ValidateStateHashes_Call) Return(hexBytess []pldtypes.HexBytes, err error) *MockDomain_ValidateStateHashes_Call {
	_c.Call.Return(hexBytess, err)
	return _c
}

func (_c *MockDomain_ValidateStateHashes_Call) RunAndReturn(run func(ctx context.Context, states []*FullState) ([]pldtypes.HexBytes, error)) *MockDomain_ValidateStateHashes_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDomainSmartContract creates a new instance of MockDomainSmartContract. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDomainSmartContract(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDomainSmartContract {
	mock := &MockDomainSmartContract{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDomainSmartContract is an autogenerated mock type for the DomainSmartContract type
type MockDomainSmartContract struct {
	mock.Mock
}

type MockDomainSmartContract_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDomainSmartContract) EXPECT() *MockDomainSmartContract_Expecter {
	return &MockDomainSmartContract_Expecter{mock: &_m.Mock}
}

// Address provides a mock function for the type MockDomainSmartContract
func (_mock *MockDomainSmartContract) Address() pldtypes.EthAddress {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Address")
	}

	var r0 pldtypes.EthAddress
	if returnFunc, ok := ret.Get(0).(func() pldtypes.EthAddress); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pldtypes.EthAddress)
		}
	}
	return r0
}

// MockDomainSmartContract_Address_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Address'
type MockDomainSmartContract_Address_Call struct {
	*mock.Call
}

// Address is a helper method to define mock.On call
func (_e *MockDomainSmartContract_Expecter) Address() *MockDomainSmartContract_Address_Call {
	return &MockDomainSmartContract_Address_Call{Call: _e.mock.On("Address")}
}

func (_c *MockDomainSmartContract_Address_Call) Run(run func()) *MockDomainSmartContract_Address_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDomainSmartContract_Address_Call) Return(ethAddress pldtypes.EthAddress) *MockDomainSmartContract_Address_Call {
	_c.Call.Return(ethAddress)
	return _c
}

func (_c *MockDomainSmartContract_Address_Call) RunAndReturn(run func() pldtypes.EthAddress) *MockDomainSmartContract_Address_Call {
	_c.Call.Return(run)
	return _c
}

// AssembleTransaction provides a mock function for the type MockDomainSmartContract
func (_mock *MockDomainSmartContract) AssembleTransaction(dCtx DomainContext, readTX persistence.DBTX, ptx *PrivateTransaction, localTx *ResolvedTransaction) error {
	ret := _mock.Called(dCtx, readTX, ptx, localTx)

	if len(ret) == 0 {
		panic("no return value specified for AssembleTransaction")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(DomainContext, persistence.DBTX, *PrivateTransaction, *ResolvedTransaction) error); ok {
		r0 = returnFunc(dCtx, readTX, ptx, localTx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDomainSmartContract_AssembleTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssembleTransaction'
type MockDomainSmartContract_AssembleTransaction_Call struct {
	*mock.Call
}

// AssembleTransaction is a helper method to define mock.On call
//   - dCtx DomainContext
//   - readTX persistence.DBTX
//   - ptx *PrivateTransaction
//   - localTx *ResolvedTransaction
func (_e *MockDomainSmartContract_Expecter) AssembleTransaction(dCtx interface{}, readTX interface{}, ptx interface{}, localTx interface{}) *MockDomainSmartContract_AssembleTransaction_Call {
	return &MockDomainSmartContract_AssembleTransaction_Call{Call: _e.mock.On("AssembleTransaction", dCtx, readTX, ptx, localTx)}
}

func (_c *MockDomainSmartContract_AssembleTransaction_Call) Run(run func(dCtx DomainContext, readTX persistence.DBTX, ptx *PrivateTransaction, localTx *ResolvedTransaction)) *MockDomainSmartContract_AssembleTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 DomainContext
		if args[0] != nil {
			arg0 = args[0].(DomainContext)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 *PrivateTransaction
		if args[2] != nil {
			arg2 = args[2].(*PrivateTransaction)
		}
		var arg3 *ResolvedTransaction
		if args[3] != nil {
			arg3 = args[3].(*ResolvedTransaction)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockDomainSmartContract_AssembleTransaction_Call) Return(err error) *MockDomainSmartContract_AssembleTransaction_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDomainSmartContract_AssembleTransaction_Call) RunAndReturn(run func(dCtx DomainContext, readTX persistence.DBTX, ptx *PrivateTransaction, localTx *ResolvedTransaction) error) *MockDomainSmartContract_AssembleTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// ContractConfig provides a mock function for the type MockDomainSmartContract
func (_mock *MockDomainSmartContract) ContractConfig() *prototk.ContractConfig {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ContractConfig")
	}

	var r0 *prototk.ContractConfig
	if returnFunc, ok := ret.Get(0).(func() *prototk.ContractConfig); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.ContractConfig)
		}
	}
	return r0
}

// MockDomainSmartContract_ContractConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContractConfig'
type MockDomainSmartContract_ContractConfig_Call struct {
	*mock.Call
}

// ContractConfig is a helper method to define mock.On call
func (_e *MockDomainSmartContract_Expecter) ContractConfig() *MockDomainSmartContract_ContractConfig_Call {
	return &MockDomainSmartContract_ContractConfig_Call{Call: _e.mock.On("ContractConfig")}
}

func (_c *MockDomainSmartContract_ContractConfig_Call) Run(run func()) *MockDomainSmartContract_ContractConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDomainSmartContract_ContractConfig_Call) Return(contractConfig *prototk.ContractConfig) *MockDomainSmartContract_ContractConfig_Call {
	_c.Call.Return(contractConfig)
	return _c
}

func (_c *MockDomainSmartContract_ContractConfig_Call) RunAndReturn(run func() *prototk.ContractConfig) *MockDomainSmartContract_ContractConfig_Call {
	_c.Call.Return(run)
	return _c
}

// Domain provides a mock function for the type MockDomainSmartContract
func (_mock *MockDomainSmartContract) Domain() Domain {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Domain")
	}

	var r0 Domain
	if returnFunc, ok := ret.Get(0).(func() Domain); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Domain)
		}
	}
	return r0
}

// MockDomainSmartContract_Domain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Domain'
type MockDomainSmartContract_Domain_Call struct {
	*mock.Call
}

// Domain is a helper method to define mock.On call
func (_e *MockDomainSmartContract_Expecter) Domain() *MockDomainSmartContract_Domain_Call {
	return &MockDomainSmartContract_Domain_Call{Call: _e.mock.On("Domain")}
}

func (_c *MockDomainSmartContract_Domain_Call) Run(run func()) *MockDomainSmartContract_Domain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDomainSmartContract_Domain_Call) Return(domain Domain) *MockDomainSmartContract_Domain_Call {
	_c.Call.Return(domain)
	return _c
}

func (_c *MockDomainSmartContract_Domain_Call) RunAndReturn(run func() Domain) *MockDomainSmartContract_Domain_Call {
	_c.Call.Return(run)
	return _c
}

// EndorseTransaction provides a mock function for the type MockDomainSmartContract
func (_mock *MockDomainSmartContract) EndorseTransaction(dCtx DomainContext, readTX persistence.DBTX, req *PrivateTransactionEndorseRequest) (*EndorsementResult, error) {
	ret := _mock.Called(dCtx, readTX, req)

	if len(ret) == 0 {
		panic("no return value specified for EndorseTransaction")
	}

	var r0 *EndorsementResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(DomainContext, persistence.DBTX, *PrivateTransactionEndorseRequest) (*EndorsementResult, error)); ok {
		return returnFunc(dCtx, readTX, req)
	}
	if returnFunc, ok := ret.Get(0).(func(DomainContext, persistence.DBTX, *PrivateTransactionEndorseRequest) *EndorsementResult); ok {
		r0 = returnFunc(dCtx, readTX, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*EndorsementResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(DomainContext, persistence.DBTX, *PrivateTransactionEndorseRequest) error); ok {
		r1 = returnFunc(dCtx, readTX, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainSmartContract_EndorseTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EndorseTransaction'
type MockDomainSmartContract_EndorseTransaction_Call struct {
	*mock.Call
}

// EndorseTransaction is a helper method to define mock.On call
//   - dCtx DomainContext
//   - readTX persistence.DBTX
//   - req *PrivateTransactionEndorseRequest
func (_e *MockDomainSmartContract_Expecter) EndorseTransaction(dCtx interface{}, readTX interface{}, req interface{}) *MockDomainSmartContract_EndorseTransaction_Call {
	return &MockDomainSmartContract_EndorseTransaction_Call{Call: _e.mock.On("EndorseTransaction", dCtx, readTX, req)}
}

func (_c *MockDomainSmartContract_EndorseTransaction_Call) Run(run func(dCtx DomainContext, readTX persistence.DBTX, req *PrivateTransactionEndorseRequest)) *MockDomainSmartContract_EndorseTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 DomainContext
		if args[0] != nil {
			arg0 = args[0].(DomainContext)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 *PrivateTransactionEndorseRequest
		if args[2] != nil {
			arg2 = args[2].(*PrivateTransactionEndorseRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDomainSmartContract_EndorseTransaction_Call) Return(endorsementResult *EndorsementResult, err error) *MockDomainSmartContract_EndorseTransaction_Call {
	_c.Call.Return(endorsementResult, err)
	return _c
}

func (_c *MockDomainSmartContract_EndorseTransaction_Call) RunAndReturn(run func(dCtx DomainContext, readTX persistence.DBTX, req *PrivateTransactionEndorseRequest) (*EndorsementResult, error)) *MockDomainSmartContract_EndorseTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// ExecCall provides a mock function for the type MockDomainSmartContract
func (_mock *MockDomainSmartContract) ExecCall(dCtx DomainContext, readTX persistence.DBTX, tx *ResolvedTransaction, verifiers []*prototk.ResolvedVerifier) (*abi.ComponentValue, error) {
	ret := _mock.Called(dCtx, readTX, tx, verifiers)

	if len(ret) == 0 {
		panic("no return value specified for ExecCall")
	}

	var r0 *abi.ComponentValue
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(DomainContext, persistence.DBTX, *ResolvedTransaction, []*prototk.ResolvedVerifier) (*abi.ComponentValue, error)); ok {
		return returnFunc(dCtx, readTX, tx, verifiers)
	}
	if returnFunc, ok := ret.Get(0).(func(DomainContext, persistence.DBTX, *ResolvedTransaction, []*prototk.ResolvedVerifier) *abi.ComponentValue); ok {
		r0 = returnFunc(dCtx, readTX, tx, verifiers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abi.ComponentValue)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(DomainContext, persistence.DBTX, *ResolvedTransaction, []*prototk.ResolvedVerifier) error); ok {
		r1 = returnFunc(dCtx, readTX, tx, verifiers)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainSmartContract_ExecCall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecCall'
type MockDomainSmartContract_ExecCall_Call struct {
	*mock.Call
}

// ExecCall is a helper method to define mock.On call
//   - dCtx DomainContext
//   - readTX persistence.DBTX
//   - tx *ResolvedTransaction
//   - verifiers []*prototk.ResolvedVerifier
func (_e *MockDomainSmartContract_Expecter) ExecCall(dCtx interface{}, readTX interface{}, tx interface{}, verifiers interface{}) *MockDomainSmartContract_ExecCall_Call {
	return &MockDomainSmartContract_ExecCall_Call{Call: _e.mock.On("ExecCall", dCtx, readTX, tx, verifiers)}
}

func (_c *MockDomainSmartContract_ExecCall_Call) Run(run func(dCtx DomainContext, readTX persistence.DBTX, tx *ResolvedTransaction, verifiers []*prototk.ResolvedVerifier)) *MockDomainSmartContract_ExecCall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 DomainContext
		if args[0] != nil {
			arg0 = args[0].(DomainContext)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 *ResolvedTransaction
		if args[2] != nil {
			arg2 = args[2].(*ResolvedTransaction)
		}
		var arg3 []*prototk.ResolvedVerifier
		if args[3] != nil {
			arg3 = args[3].([]*prototk.ResolvedVerifier)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockDomainSmartContract_ExecCall_Call) Return(componentValue *abi.ComponentValue, err error) *MockDomainSmartContract_ExecCall_Call {
	_c.Call.Return(componentValue, err)
	return _c
}

func (_c *MockDomainSmartContract_ExecCall_Call) RunAndReturn(run func(dCtx DomainContext, readTX persistence.DBTX, tx *ResolvedTransaction, verifiers []*prototk.ResolvedVerifier) (*abi.ComponentValue, error)) *MockDomainSmartContract_ExecCall_Call {
	_c.Call.Return(run)
	return _c
}

// InitCall provides a mock function for the type MockDomainSmartContract
func (_mock *MockDomainSmartContract) InitCall(ctx context.Context, tx *ResolvedTransaction) ([]*prototk.ResolveVerifierRequest, error) {
	ret := _mock.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for InitCall")
	}

	var r0 []*prototk.ResolveVerifierRequest
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ResolvedTransaction) ([]*prototk.ResolveVerifierRequest, error)); ok {
		return returnFunc(ctx, tx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ResolvedTransaction) []*prototk.ResolveVerifierRequest); ok {
		r0 = returnFunc(ctx, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*prototk.ResolveVerifierRequest)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ResolvedTransaction) error); ok {
		r1 = returnFunc(ctx, tx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainSmartContract_InitCall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitCall'
type MockDomainSmartContract_InitCall_Call struct {
	*mock.Call
}

// InitCall is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *ResolvedTransaction
func (_e *MockDomainSmartContract_Expecter) InitCall(ctx interface{}, tx interface{}) *MockDomainSmartContract_InitCall_Call {
	return &MockDomainSmartContract_InitCall_Call{Call: _e.mock.On("InitCall", ctx, tx)}
}

func (_c *MockDomainSmartContract_InitCall_Call) Run(run func(ctx context.Context, tx *ResolvedTransaction)) *MockDomainSmartContract_InitCall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ResolvedTransaction
		if args[1] != nil {
			arg1 = args[1].(*ResolvedTransaction)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainSmartContract_InitCall_Call) Return(resolveVerifierRequests []*prototk.ResolveVerifierRequest, err error) *MockDomainSmartContract_InitCall_Call {
	_c.Call.Return(resolveVerifierRequests, err)
	return _c
}

func (_c *MockDomainSmartContract_InitCall_Call) RunAndReturn(run func(ctx context.Context, tx *ResolvedTransaction) ([]*prototk.ResolveVerifierRequest, error)) *MockDomainSmartContract_InitCall_Call {
	_c.Call.Return(run)
	return _c
}

// InitTransaction provides a mock function for the type MockDomainSmartContract
func (_mock *MockDomainSmartContract) InitTransaction(ctx context.Context, ptx *PrivateTransaction, localTx *ResolvedTransaction) error {
	ret := _mock.Called(ctx, ptx, localTx)

	if len(ret) == 0 {
		panic("no return value specified for InitTransaction")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *PrivateTransaction, *ResolvedTransaction) error); ok {
		r0 = returnFunc(ctx, ptx, localTx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDomainSmartContract_InitTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitTransaction'
type MockDomainSmartContract_InitTransaction_Call struct {
	*mock.Call
}

// InitTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - ptx *PrivateTransaction
//   - localTx *ResolvedTransaction
func (_e *MockDomainSmartContract_Expecter) InitTransaction(ctx interface{}, ptx interface{}, localTx interface{}) *MockDomainSmartContract_InitTransaction_Call {
	return &MockDomainSmartContract_InitTransaction_Call{Call: _e.mock.On("InitTransaction", ctx, ptx, localTx)}
}

func (_c *MockDomainSmartContract_InitTransaction_Call) Run(run func(ctx context.Context, ptx *PrivateTransaction, localTx *ResolvedTransaction)) *MockDomainSmartContract_InitTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *PrivateTransaction
		if args[1] != nil {
			arg1 = args[1].(*PrivateTransaction)
		}
		var arg2 *ResolvedTransaction
		if args[2] != nil {
			arg2 = args[2].(*ResolvedTransaction)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDomainSmartContract_InitTransaction_Call) Return(err error) *MockDomainSmartContract_InitTransaction_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDomainSmartContract_InitTransaction_Call) RunAndReturn(run func(ctx context.Context, ptx *PrivateTransaction, localTx *ResolvedTransaction) error) *MockDomainSmartContract_InitTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// LockStates provides a mock function for the type MockDomainSmartContract
func (_mock *MockDomainSmartContract) LockStates(dCtx DomainContext, readTX persistence.DBTX, tx *PrivateTransaction) error {
	ret := _mock.Called(dCtx, readTX, tx)

	if len(ret) == 0 {
		panic("no return value specified for LockStates")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(DomainContext, persistence.DBTX, *PrivateTransaction) error); ok {
		r0 = returnFunc(dCtx, readTX, tx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDomainSmartContract_LockStates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LockStates'
type MockDomainSmartContract_LockStates_Call struct {
	*mock.Call
}

// LockStates is a helper method to define mock.On call
//   - dCtx DomainContext
//   - readTX persistence.DBTX
//   - tx *PrivateTransaction
func (_e *MockDomainSmartContract_Expecter) LockStates(dCtx interface{}, readTX interface{}, tx interface{}) *MockDomainSmartContract_LockStates_Call {
	return &MockDomainSmartContract_LockStates_Call{Call: _e.mock.On("LockStates", dCtx, readTX, tx)}
}

func (_c *MockDomainSmartContract_LockStates_Call) Run(run func(dCtx DomainContext, readTX persistence.DBTX, tx *PrivateTransaction)) *MockDomainSmartContract_LockStates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 DomainContext
		if args[0] != nil {
			arg0 = args[0].(DomainContext)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 *PrivateTransaction
		if args[2] != nil {
			arg2 = args[2].(*PrivateTransaction)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDomainSmartContract_LockStates_Call) Return(err error) *MockDomainSmartContract_LockStates_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDomainSmartContract_LockStates_Call) RunAndReturn(run func(dCtx DomainContext, readTX persistence.DBTX, tx *PrivateTransaction) error) *MockDomainSmartContract_LockStates_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareTransaction provides a mock function for the type MockDomainSmartContract
func (_mock *MockDomainSmartContract) PrepareTransaction(dCtx DomainContext, readTX persistence.DBTX, tx *PrivateTransaction) error {
	ret := _mock.Called(dCtx, readTX, tx)

	if len(ret) == 0 {
		panic("no return value specified for PrepareTransaction")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(DomainContext, persistence.DBTX, *PrivateTransaction) error); ok {
		r0 = returnFunc(dCtx, readTX, tx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDomainSmartContract_PrepareTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareTransaction'
type MockDomainSmartContract_PrepareTransaction_Call struct {
	*mock.Call
}

// PrepareTransaction is a helper method to define mock.On call
//   - dCtx DomainContext
//   - readTX persistence.DBTX
//   - tx *PrivateTransaction
func (_e *MockDomainSmartContract_Expecter) PrepareTransaction(dCtx interface{}, readTX interface{}, tx interface{}) *MockDomainSmartContract_PrepareTransaction_Call {
	return &MockDomainSmartContract_PrepareTransaction_Call{Call: _e.mock.On("PrepareTransaction", dCtx, readTX, tx)}
}

func (_c *MockDomainSmartContract_PrepareTransaction_Call) Run(run func(dCtx DomainContext, readTX persistence.DBTX, tx *PrivateTransaction)) *MockDomainSmartContract_PrepareTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 DomainContext
		if args[0] != nil {
			arg0 = args[0].(DomainContext)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 *PrivateTransaction
		if args[2] != nil {
			arg2 = args[2].(*PrivateTransaction)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDomainSmartContract_PrepareTransaction_Call) Return(err error) *MockDomainSmartContract_PrepareTransaction_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDomainSmartContract_PrepareTransaction_Call) RunAndReturn(run func(dCtx DomainContext, readTX persistence.DBTX, tx *PrivateTransaction) error) *MockDomainSmartContract_PrepareTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// WrapPrivacyGroupEVMTX provides a mock function for the type MockDomainSmartContract
func (_mock *MockDomainSmartContract) WrapPrivacyGroupEVMTX(context1 context.Context, privacyGroup *pldapi.PrivacyGroup, privacyGroupEVMTX *pldapi.PrivacyGroupEVMTX) (*pldapi.TransactionInput, error) {
	ret := _mock.Called(context1, privacyGroup, privacyGroupEVMTX)

	if len(ret) == 0 {
		panic("no return value specified for WrapPrivacyGroupEVMTX")
	}

	var r0 *pldapi.TransactionInput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pldapi.PrivacyGroup, *pldapi.PrivacyGroupEVMTX) (*pldapi.TransactionInput, error)); ok {
		return returnFunc(context1, privacyGroup, privacyGroupEVMTX)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pldapi.PrivacyGroup, *pldapi.PrivacyGroupEVMTX) *pldapi.TransactionInput); ok {
		r0 = returnFunc(context1, privacyGroup, privacyGroupEVMTX)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.TransactionInput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *pldapi.PrivacyGroup, *pldapi.PrivacyGroupEVMTX) error); ok {
		r1 = returnFunc(context1, privacyGroup, privacyGroupEVMTX)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainSmartContract_WrapPrivacyGroupEVMTX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WrapPrivacyGroupEVMTX'
type MockDomainSmartContract_WrapPrivacyGroupEVMTX_Call struct {
	*mock.Call
}

// WrapPrivacyGroupEVMTX is a helper method to define mock.On call
//   - context1 context.Context
//   - privacyGroup *pldapi.PrivacyGroup
//   - privacyGroupEVMTX *pldapi.PrivacyGroupEVMTX
func (_e *MockDomainSmartContract_Expecter) WrapPrivacyGroupEVMTX(context1 interface{}, privacyGroup interface{}, privacyGroupEVMTX interface{}) *MockDomainSmartContract_WrapPrivacyGroupEVMTX_Call {
	return &MockDomainSmartContract_WrapPrivacyGroupEVMTX_Call{Call: _e.mock.On("WrapPrivacyGroupEVMTX", context1, privacyGroup, privacyGroupEVMTX)}
}

func (_c *MockDomainSmartContract_WrapPrivacyGroupEVMTX_Call) Run(run func(context1 context.Context, privacyGroup *pldapi.PrivacyGroup, privacyGroupEVMTX *pldapi.PrivacyGroupEVMTX)) *MockDomainSmartContract_WrapPrivacyGroupEVMTX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pldapi.PrivacyGroup
		if args[1] != nil {
			arg1 = args[1].(*pldapi.PrivacyGroup)
		}
		var arg2 *pldapi.PrivacyGroupEVMTX
		if args[2] != nil {
			arg2 = args[2].(*pldapi.PrivacyGroupEVMTX)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDomainSmartContract_WrapPrivacyGroupEVMTX_Call) Return(transactionInput *pldapi.TransactionInput, err error) *MockDomainSmartContract_WrapPrivacyGroupEVMTX_Call {
	_c.Call.Return(transactionInput, err)
	return _c
}

func (_c *MockDomainSmartContract_WrapPrivacyGroupEVMTX_Call) RunAndReturn(run func(context1 context.Context, privacyGroup *pldapi.PrivacyGroup, privacyGroupEVMTX *pldapi.PrivacyGroupEVMTX) (*pldapi.TransactionInput, error)) *MockDomainSmartContract_WrapPrivacyGroupEVMTX_Call {
	_c.Call.Return(run)
	return _c
}

// WritePotentialStates provides a mock function for the type MockDomainSmartContract
func (_mock *MockDomainSmartContract) WritePotentialStates(dCtx DomainContext, readTX persistence.DBTX, tx *PrivateTransaction) error {
	ret := _mock.Called(dCtx, readTX, tx)

	if len(ret) == 0 {
		panic("no return value specified for WritePotentialStates")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(DomainContext, persistence.DBTX, *PrivateTransaction) error); ok {
		r0 = returnFunc(dCtx, readTX, tx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDomainSmartContract_WritePotentialStates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WritePotentialStates'
type MockDomainSmartContract_WritePotentialStates_Call struct {
	*mock.Call
}

// WritePotentialStates is a helper method to define mock.On call
//   - dCtx DomainContext
//   - readTX persistence.DBTX
//   - tx *PrivateTransaction
func (_e *MockDomainSmartContract_Expecter) WritePotentialStates(dCtx interface{}, readTX interface{}, tx interface{}) *MockDomainSmartContract_WritePotentialStates_Call {
	return &MockDomainSmartContract_WritePotentialStates_Call{Call: _e.mock.On("WritePotentialStates", dCtx, readTX, tx)}
}

func (_c *MockDomainSmartContract_WritePotentialStates_Call) Run(run func(dCtx DomainContext, readTX persistence.DBTX, tx *PrivateTransaction)) *MockDomainSmartContract_WritePotentialStates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 DomainContext
		if args[0] != nil {
			arg0 = args[0].(DomainContext)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 *PrivateTransaction
		if args[2] != nil {
			arg2 = args[2].(*PrivateTransaction)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDomainSmartContract_WritePotentialStates_Call) Return(err error) *MockDomainSmartContract_WritePotentialStates_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDomainSmartContract_WritePotentialStates_Call) RunAndReturn(run func(dCtx DomainContext, readTX persistence.DBTX, tx *PrivateTransaction) error) *MockDomainSmartContract_WritePotentialStates_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPrivacyGroupMessageReceiver creates a new instance of MockPrivacyGroupMessageReceiver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPrivacyGroupMessageReceiver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPrivacyGroupMessageReceiver {
	mock := &MockPrivacyGroupMessageReceiver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPrivacyGroupMessageReceiver is an autogenerated mock type for the PrivacyGroupMessageReceiver type
type MockPrivacyGroupMessageReceiver struct {
	mock.Mock
}

type MockPrivacyGroupMessageReceiver_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPrivacyGroupMessageReceiver) EXPECT() *MockPrivacyGroupMessageReceiver_Expecter {
	return &MockPrivacyGroupMessageReceiver_Expecter{mock: &_m.Mock}
}

// DeliverMessageBatch provides a mock function for the type MockPrivacyGroupMessageReceiver
func (_mock *MockPrivacyGroupMessageReceiver) DeliverMessageBatch(ctx context.Context, batchID uint64, msgs []*pldapi.PrivacyGroupMessage) error {
	ret := _mock.Called(ctx, batchID, msgs)

	if len(ret) == 0 {
		panic("no return value specified for DeliverMessageBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint64, []*pldapi.PrivacyGroupMessage) error); ok {
		r0 = returnFunc(ctx, batchID, msgs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPrivacyGroupMessageReceiver_DeliverMessageBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeliverMessageBatch'
type MockPrivacyGroupMessageReceiver_DeliverMessageBatch_Call struct {
	*mock.Call
}

// DeliverMessageBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - batchID uint64
//   - msgs []*pldapi.PrivacyGroupMessage
func (_e *MockPrivacyGroupMessageReceiver_Expecter) DeliverMessageBatch(ctx interface{}, batchID interface{}, msgs interface{}) *MockPrivacyGroupMessageReceiver_DeliverMessageBatch_Call {
	return &MockPrivacyGroupMessageReceiver_DeliverMessageBatch_Call{Call: _e.mock.On("DeliverMessageBatch", ctx, batchID, msgs)}
}

func (_c *MockPrivacyGroupMessageReceiver_DeliverMessageBatch_Call) Run(run func(ctx context.Context, batchID uint64, msgs []*pldapi.PrivacyGroupMessage)) *MockPrivacyGroupMessageReceiver_DeliverMessageBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uint64
		if args[1] != nil {
			arg1 = args[1].(uint64)
		}
		var arg2 []*pldapi.PrivacyGroupMessage
		if args[2] != nil {
			arg2 = args[2].([]*pldapi.PrivacyGroupMessage)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPrivacyGroupMessageReceiver_DeliverMessageBatch_Call) Return(err error) *MockPrivacyGroupMessageReceiver_DeliverMessageBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPrivacyGroupMessageReceiver_DeliverMessageBatch_Call) RunAndReturn(run func(ctx context.Context, batchID uint64, msgs []*pldapi.PrivacyGroupMessage) error) *MockPrivacyGroupMessageReceiver_DeliverMessageBatch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPrivacyGroupMessageReceiverCloser creates a new instance of MockPrivacyGroupMessageReceiverCloser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPrivacyGroupMessageReceiverCloser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPrivacyGroupMessageReceiverCloser {
	mock := &MockPrivacyGroupMessageReceiverCloser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPrivacyGroupMessageReceiverCloser is an autogenerated mock type for the PrivacyGroupMessageReceiverCloser type
type MockPrivacyGroupMessageReceiverCloser struct {
	mock.Mock
}

type MockPrivacyGroupMessageReceiverCloser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPrivacyGroupMessageReceiverCloser) EXPECT() *MockPrivacyGroupMessageReceiverCloser_Expecter {
	return &MockPrivacyGroupMessageReceiverCloser_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockPrivacyGroupMessageReceiverCloser
func (_mock *MockPrivacyGroupMessageReceiverCloser) Close() {
	_mock.Called()
	return
}

// MockPrivacyGroupMessageReceiverCloser_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockPrivacyGroupMessageReceiverCloser_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockPrivacyGroupMessageReceiverCloser_Expecter) Close() *MockPrivacyGroupMessageReceiverCloser_Close_Call {
	return &MockPrivacyGroupMessageReceiverCloser_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockPrivacyGroupMessageReceiverCloser_Close_Call) Run(run func()) *MockPrivacyGroupMessageReceiverCloser_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPrivacyGroupMessageReceiverCloser_Close_Call) Return() *MockPrivacyGroupMessageReceiverCloser_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPrivacyGroupMessageReceiverCloser_Close_Call) RunAndReturn(run func()) *MockPrivacyGroupMessageReceiverCloser_Close_Call {
	_c.Run(run)
	return _c
}

// NewMockGroupManager creates a new instance of MockGroupManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGroupManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGroupManager {
	mock := &MockGroupManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGroupManager is an autogenerated mock type for the GroupManager type
type MockGroupManager struct {
	mock.Mock
}

type MockGroupManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGroupManager) EXPECT() *MockGroupManager_Expecter {
	return &MockGroupManager_Expecter{mock: &_m.Mock}
}

// AddMessageReceiver provides a mock function for the type MockGroupManager
func (_mock *MockGroupManager) AddMessageReceiver(ctx context.Context, name string, r PrivacyGroupMessageReceiver) (PrivacyGroupMessageReceiverCloser, error) {
	ret := _mock.Called(ctx, name, r)

	if len(ret) == 0 {
		panic("no return value specified for AddMessageReceiver")
	}

	var r0 PrivacyGroupMessageReceiverCloser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, PrivacyGroupMessageReceiver) (PrivacyGroupMessageReceiverCloser, error)); ok {
		return returnFunc(ctx, name, r)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, PrivacyGroupMessageReceiver) PrivacyGroupMessageReceiverCloser); ok {
		r0 = returnFunc(ctx, name, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(PrivacyGroupMessageReceiverCloser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, PrivacyGroupMessageReceiver) error); ok {
		r1 = returnFunc(ctx, name, r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGroupManager_AddMessageReceiver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMessageReceiver'
type MockGroupManager_AddMessageReceiver_Call struct {
	*mock.Call
}

// AddMessageReceiver is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - r PrivacyGroupMessageReceiver
func (_e *MockGroupManager_Expecter) AddMessageReceiver(ctx interface{}, name interface{}, r interface{}) *MockGroupManager_AddMessageReceiver_Call {
	return &MockGroupManager_AddMessageReceiver_Call{Call: _e.mock.On("AddMessageReceiver", ctx, name, r)}
}

func (_c *MockGroupManager_AddMessageReceiver_Call) Run(run func(ctx context.Context, name string, r PrivacyGroupMessageReceiver)) *MockGroupManager_AddMessageReceiver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 PrivacyGroupMessageReceiver
		if args[2] != nil {
			arg2 = args[2].(PrivacyGroupMessageReceiver)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockGroupManager_AddMessageReceiver_Call) Return(privacyGroupMessageReceiverCloser PrivacyGroupMessageReceiverCloser, err error) *MockGroupManager_AddMessageReceiver_Call {
	_c.Call.Return(privacyGroupMessageReceiverCloser, err)
	return _c
}

func (_c *MockGroupManager_AddMessageReceiver_Call) RunAndReturn(run func(ctx context.Context, name string, r PrivacyGroupMessageReceiver) (PrivacyGroupMessageReceiverCloser, error)) *MockGroupManager_AddMessageReceiver_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroup provides a mock function for the type MockGroupManager
func (_mock *MockGroupManager) CreateGroup(ctx context.Context, dbTX persistence.DBTX, spec *pldapi.PrivacyGroupInput) (*pldapi.PrivacyGroup, error) {
	ret := _mock.Called(ctx, dbTX, spec)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroup")
	}

	var r0 *pldapi.PrivacyGroup
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, *pldapi.PrivacyGroupInput) (*pldapi.PrivacyGroup, error)); ok {
		return returnFunc(ctx, dbTX, spec)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, *pldapi.PrivacyGroupInput) *pldapi.PrivacyGroup); ok {
		r0 = returnFunc(ctx, dbTX, spec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.PrivacyGroup)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, *pldapi.PrivacyGroupInput) error); ok {
		r1 = returnFunc(ctx, dbTX, spec)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGroupManager_CreateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroup'
type MockGroupManager_CreateGroup_Call struct {
	*mock.Call
}

// CreateGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - spec *pldapi.PrivacyGroupInput
func (_e *MockGroupManager_Expecter) CreateGroup(ctx interface{}, dbTX interface{}, spec interface{}) *MockGroupManager_CreateGroup_Call {
	return &MockGroupManager_CreateGroup_Call{Call: _e.mock.On("CreateGroup", ctx, dbTX, spec)}
}

func (_c *MockGroupManager_CreateGroup_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, spec *pldapi.PrivacyGroupInput)) *MockGroupManager_CreateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 *pldapi.PrivacyGroupInput
		if args[2] != nil {
			arg2 = args[2].(*pldapi.PrivacyGroupInput)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockGroupManager_CreateGroup_Call) Return(group *pldapi.PrivacyGroup, err error) *MockGroupManager_CreateGroup_Call {
	_c.Call.Return(group, err)
	return _c
}

func (_c *MockGroupManager_CreateGroup_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, spec *pldapi.PrivacyGroupInput) (*pldapi.PrivacyGroup, error)) *MockGroupManager_CreateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMessageListener provides a mock function for the type MockGroupManager
func (_mock *MockGroupManager) CreateMessageListener(ctx context.Context, spec *pldapi.PrivacyGroupMessageListener) error {
	ret := _mock.Called(ctx, spec)

	if len(ret) == 0 {
		panic("no return value specified for CreateMessageListener")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pldapi.PrivacyGroupMessageListener) error); ok {
		r0 = returnFunc(ctx, spec)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGroupManager_CreateMessageListener_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMessageListener'
type MockGroupManager_CreateMessageListener_Call struct {
	*mock.Call
}

// CreateMessageListener is a helper method to define mock.On call
//   - ctx context.Context
//   - spec *pldapi.PrivacyGroupMessageListener
func (_e *MockGroupManager_Expecter) CreateMessageListener(ctx interface{}, spec interface{}) *MockGroupManager_CreateMessageListener_Call {
	return &MockGroupManager_CreateMessageListener_Call{Call: _e.mock.On("CreateMessageListener", ctx, spec)}
}

func (_c *MockGroupManager_CreateMessageListener_Call) Run(run func(ctx context.Context, spec *pldapi.PrivacyGroupMessageListener)) *MockGroupManager_CreateMessageListener_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pldapi.PrivacyGroupMessageListener
		if args[1] != nil {
			arg1 = args[1].(*pldapi.PrivacyGroupMessageListener)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockGroupManager_CreateMessageListener_Call) Return(err error) *MockGroupManager_CreateMessageListener_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGroupManager_CreateMessageListener_Call) RunAndReturn(run func(ctx context.Context, spec *pldapi.PrivacyGroupMessageListener) error) *MockGroupManager_CreateMessageListener_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupByID provides a mock function for the type MockGroupManager
func (_mock *MockGroupManager) GetGroupByID(ctx context.Context, dbTX persistence.DBTX, domainName string, groupID pldtypes.HexBytes) (*pldapi.PrivacyGroup, error) {
	ret := _mock.Called(ctx, dbTX, domainName, groupID)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupByID")
	}

	var r0 *pldapi.PrivacyGroup
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, string, pldtypes.HexBytes) (*pldapi.PrivacyGroup, error)); ok {
		return returnFunc(ctx, dbTX, domainName, groupID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, string, pldtypes.HexBytes) *pldapi.PrivacyGroup); ok {
		r0 = returnFunc(ctx, dbTX, domainName, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.PrivacyGroup)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, string, pldtypes.HexBytes) error); ok {
		r1 = returnFunc(ctx, dbTX, domainName, groupID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGroupManager_GetGroupByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupByID'
type MockGroupManager_GetGroupByID_Call struct {
	*mock.Call
}

// GetGroupByID is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - domainName string
//   - groupID pldtypes.HexBytes
func (_e *MockGroupManager_Expecter) GetGroupByID(ctx interface{}, dbTX interface{}, domainName interface{}, groupID interface{}) *MockGroupManager_GetGroupByID_Call {
	return &MockGroupManager_GetGroupByID_Call{Call: _e.mock.On("GetGroupByID", ctx, dbTX, domainName, groupID)}
}

func (_c *MockGroupManager_GetGroupByID_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, domainName string, groupID pldtypes.HexBytes)) *MockGroupManager_GetGroupByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 pldtypes.HexBytes
		if args[3] != nil {
			arg3 = args[3].(pldtypes.HexBytes)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockGroupManager_GetGroupByID_Call) Return(privacyGroup *pldapi.PrivacyGroup, err error) *MockGroupManager_GetGroupByID_Call {
	_c.Call.Return(privacyGroup, err)
	return _c
}

func (_c *MockGroupManager_GetGroupByID_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, domainName string, groupID pldtypes.HexBytes) (*pldapi.PrivacyGroup, error)) *MockGroupManager_GetGroupByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessageByID provides a mock function for the type MockGroupManager
func (_mock *MockGroupManager) GetMessageByID(ctx context.Context, dbTX persistence.DBTX, id uuid.UUID, failNotFound bool) (*pldapi.PrivacyGroupMessage, error) {
	ret := _mock.Called(ctx, dbTX, id, failNotFound)

	if len(ret) == 0 {
		panic("no return value specified for GetMessageByID")
	}

	var r0 *pldapi.PrivacyGroupMessage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, uuid.UUID, bool) (*pldapi.PrivacyGroupMessage, error)); ok {
		return returnFunc(ctx, dbTX, id, failNotFound)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, uuid.UUID, bool) *pldapi.PrivacyGroupMessage); ok {
		r0 = returnFunc(ctx, dbTX, id, failNotFound)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.PrivacyGroupMessage)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, uuid.UUID, bool) error); ok {
		r1 = returnFunc(ctx, dbTX, id, failNotFound)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGroupManager_GetMessageByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessageByID'
type MockGroupManager_GetMessageByID_Call struct {
	*mock.Call
}

// GetMessageByID is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - id uuid.UUID
//   - failNotFound bool
func (_e *MockGroupManager_Expecter) GetMessageByID(ctx interface{}, dbTX interface{}, id interface{}, failNotFound interface{}) *MockGroupManager_GetMessageByID_Call {
	return &MockGroupManager_GetMessageByID_Call{Call: _e.mock.On("GetMessageByID", ctx, dbTX, id, failNotFound)}
}

func (_c *MockGroupManager_GetMessageByID_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, id uuid.UUID, failNotFound bool)) *MockGroupManager_GetMessageByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 bool
		if args[3] != nil {
			arg3 = args[3].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockGroupManager_GetMessageByID_Call) Return(privacyGroupMessage *pldapi.PrivacyGroupMessage, err error) *MockGroupManager_GetMessageByID_Call {
	_c.Call.Return(privacyGroupMessage, err)
	return _c
}

func (_c *MockGroupManager_GetMessageByID_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, id uuid.UUID, failNotFound bool) (*pldapi.PrivacyGroupMessage, error)) *MockGroupManager_GetMessageByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessageListener provides a mock function for the type MockGroupManager
func (_mock *MockGroupManager) GetMessageListener(ctx context.Context, name string) *pldapi.PrivacyGroupMessageListener {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetMessageListener")
	}

	var r0 *pldapi.PrivacyGroupMessageListener
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *pldapi.PrivacyGroupMessageListener); ok {
		r0 = returnFunc(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.PrivacyGroupMessageListener)
		}
	}
	return r0
}

// MockGroupManager_GetMessageListener_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessageListener'
type MockGroupManager_GetMessageListener_Call struct {
	*mock.Call
}

// GetMessageListener is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockGroupManager_Expecter) GetMessageListener(ctx interface{}, name interface{}) *MockGroupManager_GetMessageListener_Call {
	return &MockGroupManager_GetMessageListener_Call{Call: _e.mock.On("GetMessageListener", ctx, name)}
}

func (_c *MockGroupManager_GetMessageListener_Call) Run(run func(ctx context.Context, name string)) *MockGroupManager_GetMessageListener_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockGroupManager_GetMessageListener_Call) Return(privacyGroupMessageListener *pldapi.PrivacyGroupMessageListener) *MockGroupManager_GetMessageListener_Call {
	_c.Call.Return(privacyGroupMessageListener)
	return _c
}

func (_c *MockGroupManager_GetMessageListener_Call) RunAndReturn(run func(ctx context.Context, name string) *pldapi.PrivacyGroupMessageListener) *MockGroupManager_GetMessageListener_Call {
	_c.Call.Return(run)
	return _c
}

// PostInit provides a mock function for the type MockGroupManager
func (_mock *MockGroupManager) PostInit(allComponents AllComponents) error {
	ret := _mock.Called(allComponents)

	if len(ret) == 0 {
		panic("no return value specified for PostInit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(AllComponents) error); ok {
		r0 = returnFunc(allComponents)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGroupManager_PostInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostInit'
type MockGroupManager_PostInit_Call struct {
	*mock.Call
}

// PostInit is a helper method to define mock.On call
//   - allComponents AllComponents
func (_e *MockGroupManager_Expecter) PostInit(allComponents interface{}) *MockGroupManager_PostInit_Call {
	return &MockGroupManager_PostInit_Call{Call: _e.mock.On("PostInit", allComponents)}
}

func (_c *MockGroupManager_PostInit_Call) Run(run func(allComponents AllComponents)) *MockGroupManager_PostInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 AllComponents
		if args[0] != nil {
			arg0 = args[0].(AllComponents)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockGroupManager_PostInit_Call) Return(err error) *MockGroupManager_PostInit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGroupManager_PostInit_Call) RunAndReturn(run func(allComponents AllComponents) error) *MockGroupManager_PostInit_Call {
	_c.Call.Return(run)
	return _c
}

// PreInit provides a mock function for the type MockGroupManager
func (_mock *MockGroupManager) PreInit(preInitComponents PreInitComponents) (*ManagerInitResult, error) {
	ret := _mock.Called(preInitComponents)

	if len(ret) == 0 {
		panic("no return value specified for PreInit")
	}

	var r0 *ManagerInitResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(PreInitComponents) (*ManagerInitResult, error)); ok {
		return returnFunc(preInitComponents)
	}
	if returnFunc, ok := ret.Get(0).(func(PreInitComponents) *ManagerInitResult); ok {
		r0 = returnFunc(preInitComponents)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ManagerInitResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(PreInitComponents) error); ok {
		r1 = returnFunc(preInitComponents)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGroupManager_PreInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreInit'
type MockGroupManager_PreInit_Call struct {
	*mock.Call
}

// PreInit is a helper method to define mock.On call
//   - preInitComponents PreInitComponents
func (_e *MockGroupManager_Expecter) PreInit(preInitComponents interface{}) *MockGroupManager_PreInit_Call {
	return &MockGroupManager_PreInit_Call{Call: _e.mock.On("PreInit", preInitComponents)}
}

func (_c *MockGroupManager_PreInit_Call) Run(run func(preInitComponents PreInitComponents)) *MockGroupManager_PreInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 PreInitComponents
		if args[0] != nil {
			arg0 = args[0].(PreInitComponents)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockGroupManager_PreInit_Call) Return(managerInitResult *ManagerInitResult, err error) *MockGroupManager_PreInit_Call {
	_c.Call.Return(managerInitResult, err)
	return _c
}

func (_c *MockGroupManager_PreInit_Call) RunAndReturn(run func(preInitComponents PreInitComponents) (*ManagerInitResult, error)) *MockGroupManager_PreInit_Call {
	_c.Call.Return(run)
	return _c
}

// QueryGroups provides a mock function for the type MockGroupManager
func (_mock *MockGroupManager) QueryGroups(ctx context.Context, dbTX persistence.DBTX, jq *query.QueryJSON) ([]*pldapi.PrivacyGroup, error) {
	ret := _mock.Called(ctx, dbTX, jq)

	if len(ret) == 0 {
		panic("no return value specified for QueryGroups")
	}

	var r0 []*pldapi.PrivacyGroup
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, *query.QueryJSON) ([]*pldapi.PrivacyGroup, error)); ok {
		return returnFunc(ctx, dbTX, jq)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, *query.QueryJSON) []*pldapi.PrivacyGroup); ok {
		r0 = returnFunc(ctx, dbTX, jq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pldapi.PrivacyGroup)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, *query.QueryJSON) error); ok {
		r1 = returnFunc(ctx, dbTX, jq)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGroupManager_QueryGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryGroups'
type MockGroupManager_QueryGroups_Call struct {
	*mock.Call
}

// QueryGroups is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - jq *query.QueryJSON
func (_e *MockGroupManager_Expecter) QueryGroups(ctx interface{}, dbTX interface{}, jq interface{}) *MockGroupManager_QueryGroups_Call {
	return &MockGroupManager_QueryGroups_Call{Call: _e.mock.On("QueryGroups", ctx, dbTX, jq)}
}

func (_c *MockGroupManager_QueryGroups_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, jq *query.QueryJSON)) *MockGroupManager_QueryGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 *query.QueryJSON
		if args[2] != nil {
			arg2 = args[2].(*query.QueryJSON)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockGroupManager_QueryGroups_Call) Return(privacyGroups []*pldapi.PrivacyGroup, err error) *MockGroupManager_QueryGroups_Call {
	_c.Call.Return(privacyGroups, err)
	return _c
}

func (_c *MockGroupManager_QueryGroups_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, jq *query.QueryJSON) ([]*pldapi.PrivacyGroup, error)) *MockGroupManager_QueryGroups_Call {
	_c.Call.Return(run)
	return _c
}

// QueryMessages provides a mock function for the type MockGroupManager
func (_mock *MockGroupManager) QueryMessages(ctx context.Context, dbTX persistence.DBTX, jq *query.QueryJSON) ([]*pldapi.PrivacyGroupMessage, error) {
	ret := _mock.Called(ctx, dbTX, jq)

	if len(ret) == 0 {
		panic("no return value specified for QueryMessages")
	}

	var r0 []*pldapi.PrivacyGroupMessage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, *query.QueryJSON) ([]*pldapi.PrivacyGroupMessage, error)); ok {
		return returnFunc(ctx, dbTX, jq)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, *query.QueryJSON) []*pldapi.PrivacyGroupMessage); ok {
		r0 = returnFunc(ctx, dbTX, jq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pldapi.PrivacyGroupMessage)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, *query.QueryJSON) error); ok {
		r1 = returnFunc(ctx, dbTX, jq)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGroupManager_QueryMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryMessages'
type MockGroupManager_QueryMessages_Call struct {
	*mock.Call
}

// QueryMessages is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - jq *query.QueryJSON
func (_e *MockGroupManager_Expecter) QueryMessages(ctx interface{}, dbTX interface{}, jq interface{}) *MockGroupManager_QueryMessages_Call {
	return &MockGroupManager_QueryMessages_Call{Call: _e.mock.On("QueryMessages", ctx, dbTX, jq)}
}

func (_c *MockGroupManager_QueryMessages_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, jq *query.QueryJSON)) *MockGroupManager_QueryMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 *query.QueryJSON
		if args[2] != nil {
			arg2 = args[2].(*query.QueryJSON)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockGroupManager_QueryMessages_Call) Return(privacyGroupMessages []*pldapi.PrivacyGroupMessage, err error) *MockGroupManager_QueryMessages_Call {
	_c.Call.Return(privacyGroupMessages, err)
	return _c
}

func (_c *MockGroupManager_QueryMessages_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, jq *query.QueryJSON) ([]*pldapi.PrivacyGroupMessage, error)) *MockGroupManager_QueryMessages_Call {
	_c.Call.Return(run)
	return _c
}

// ReceiveMessages provides a mock function for the type MockGroupManager
func (_mock *MockGroupManager) ReceiveMessages(ctx context.Context, dbTX persistence.DBTX, msgs []*pldapi.PrivacyGroupMessage) (map[uuid.UUID]error, error) {
	ret := _mock.Called(ctx, dbTX, msgs)

	if len(ret) == 0 {
		panic("no return value specified for ReceiveMessages")
	}

	var r0 map[uuid.UUID]error
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, []*pldapi.PrivacyGroupMessage) (map[uuid.UUID]error, error)); ok {
		return returnFunc(ctx, dbTX, msgs)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, []*pldapi.PrivacyGroupMessage) map[uuid.UUID]error); ok {
		r0 = returnFunc(ctx, dbTX, msgs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uuid.UUID]error)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, []*pldapi.PrivacyGroupMessage) error); ok {
		r1 = returnFunc(ctx, dbTX, msgs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGroupManager_ReceiveMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReceiveMessages'
type MockGroupManager_ReceiveMessages_Call struct {
	*mock.Call
}

// ReceiveMessages is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - msgs []*pldapi.PrivacyGroupMessage
func (_e *MockGroupManager_Expecter) ReceiveMessages(ctx interface{}, dbTX interface{}, msgs interface{}) *MockGroupManager_ReceiveMessages_Call {
	return &MockGroupManager_ReceiveMessages_Call{Call: _e.mock.On("ReceiveMessages", ctx, dbTX, msgs)}
}

func (_c *MockGroupManager_ReceiveMessages_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, msgs []*pldapi.PrivacyGroupMessage)) *MockGroupManager_ReceiveMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 []*pldapi.PrivacyGroupMessage
		if args[2] != nil {
			arg2 = args[2].([]*pldapi.PrivacyGroupMessage)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockGroupManager_ReceiveMessages_Call) Return(results map[uuid.UUID]error, err error) *MockGroupManager_ReceiveMessages_Call {
	_c.Call.Return(results, err)
	return _c
}

func (_c *MockGroupManager_ReceiveMessages_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, msgs []*pldapi.PrivacyGroupMessage) (map[uuid.UUID]error, error)) *MockGroupManager_ReceiveMessages_Call {
	_c.Call.Return(run)
	return _c
}

// SendMessage provides a mock function for the type MockGroupManager
func (_mock *MockGroupManager) SendMessage(ctx context.Context, dbTX persistence.DBTX, msg *pldapi.PrivacyGroupMessageInput) (*uuid.UUID, error) {
	ret := _mock.Called(ctx, dbTX, msg)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 *uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, *pldapi.PrivacyGroupMessageInput) (*uuid.UUID, error)); ok {
		return returnFunc(ctx, dbTX, msg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, *pldapi.PrivacyGroupMessageInput) *uuid.UUID); ok {
		r0 = returnFunc(ctx, dbTX, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, *pldapi.PrivacyGroupMessageInput) error); ok {
		r1 = returnFunc(ctx, dbTX, msg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGroupManager_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type MockGroupManager_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - msg *pldapi.PrivacyGroupMessageInput
func (_e *MockGroupManager_Expecter) SendMessage(ctx interface{}, dbTX interface{}, msg interface{}) *MockGroupManager_SendMessage_Call {
	return &MockGroupManager_SendMessage_Call{Call: _e.mock.On("SendMessage", ctx, dbTX, msg)}
}

func (_c *MockGroupManager_SendMessage_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, msg *pldapi.PrivacyGroupMessageInput)) *MockGroupManager_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 *pldapi.PrivacyGroupMessageInput
		if args[2] != nil {
			arg2 = args[2].(*pldapi.PrivacyGroupMessageInput)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockGroupManager_SendMessage_Call) Return(uUID *uuid.UUID, err error) *MockGroupManager_SendMessage_Call {
	_c.Call.Return(uUID, err)
	return _c
}

func (_c *MockGroupManager_SendMessage_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, msg *pldapi.PrivacyGroupMessageInput) (*uuid.UUID, error)) *MockGroupManager_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockGroupManager
func (_mock *MockGroupManager) Start() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGroupManager_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockGroupManager_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockGroupManager_Expecter) Start() *MockGroupManager_Start_Call {
	return &MockGroupManager_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockGroupManager_Start_Call) Run(run func()) *MockGroupManager_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGroupManager_Start_Call) Return(err error) *MockGroupManager_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGroupManager_Start_Call) RunAndReturn(run func() error) *MockGroupManager_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockGroupManager
func (_mock *MockGroupManager) Stop() {
	_mock.Called()
	return
}

// MockGroupManager_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockGroupManager_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockGroupManager_Expecter) Stop() *MockGroupManager_Stop_Call {
	return &MockGroupManager_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockGroupManager_Stop_Call) Run(run func()) *MockGroupManager_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGroupManager_Stop_Call) Return() *MockGroupManager_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGroupManager_Stop_Call) RunAndReturn(run func()) *MockGroupManager_Stop_Call {
	_c.Run(run)
	return _c
}

// StoreReceivedGroup provides a mock function for the type MockGroupManager
func (_mock *MockGroupManager) StoreReceivedGroup(context1 context.Context, dBTX persistence.DBTX, s string, uUID uuid.UUID, state *pldapi.State) (error, error) {
	ret := _mock.Called(context1, dBTX, s, uUID, state)

	if len(ret) == 0 {
		panic("no return value specified for StoreReceivedGroup")
	}

	var r0 error
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, string, uuid.UUID, *pldapi.State) (error, error)); ok {
		return returnFunc(context1, dBTX, s, uUID, state)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, string, uuid.UUID, *pldapi.State) error); ok {
		r0 = returnFunc(context1, dBTX, s, uUID, state)
	} else {
		r0 = ret.Error(0)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, string, uuid.UUID, *pldapi.State) error); ok {
		r1 = returnFunc(context1, dBTX, s, uUID, state)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGroupManager_StoreReceivedGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreReceivedGroup'
type MockGroupManager_StoreReceivedGroup_Call struct {
	*mock.Call
}

// StoreReceivedGroup is a helper method to define mock.On call
//   - context1 context.Context
//   - dBTX persistence.DBTX
//   - s string
//   - uUID uuid.UUID
//   - state *pldapi.State
func (_e *MockGroupManager_Expecter) StoreReceivedGroup(context1 interface{}, dBTX interface{}, s interface{}, uUID interface{}, state interface{}) *MockGroupManager_StoreReceivedGroup_Call {
	return &MockGroupManager_StoreReceivedGroup_Call{Call: _e.mock.On("StoreReceivedGroup", context1, dBTX, s, uUID, state)}
}

func (_c *MockGroupManager_StoreReceivedGroup_Call) Run(run func(context1 context.Context, dBTX persistence.DBTX, s string, uUID uuid.UUID, state *pldapi.State)) *MockGroupManager_StoreReceivedGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 uuid.UUID
		if args[3] != nil {
			arg3 = args[3].(uuid.UUID)
		}
		var arg4 *pldapi.State
		if args[4] != nil {
			arg4 = args[4].(*pldapi.State)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockGroupManager_StoreReceivedGroup_Call) Return(err error, err1 error) *MockGroupManager_StoreReceivedGroup_Call {
	_c.Call.Return(err, err1)
	return _c
}

func (_c *MockGroupManager_StoreReceivedGroup_Call) RunAndReturn(run func(context1 context.Context, dBTX persistence.DBTX, s string, uUID uuid.UUID, state *pldapi.State) (error, error)) *MockGroupManager_StoreReceivedGroup_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIdentityResolver creates a new instance of MockIdentityResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIdentityResolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIdentityResolver {
	mock := &MockIdentityResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIdentityResolver is an autogenerated mock type for the IdentityResolver type
type MockIdentityResolver struct {
	mock.Mock
}

type MockIdentityResolver_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIdentityResolver) EXPECT() *MockIdentityResolver_Expecter {
	return &MockIdentityResolver_Expecter{mock: &_m.Mock}
}

// HandlePaladinMsg provides a mock function for the type MockIdentityResolver
func (_mock *MockIdentityResolver) HandlePaladinMsg(ctx context.Context, msg *ReceivedMessage) {
	_mock.Called(ctx, msg)
	return
}

// MockIdentityResolver_HandlePaladinMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandlePaladinMsg'
type MockIdentityResolver_HandlePaladinMsg_Call struct {
	*mock.Call
}

// HandlePaladinMsg is a helper method to define mock.On call
//   - ctx context.Context
//   - msg *ReceivedMessage
func (_e *MockIdentityResolver_Expecter) HandlePaladinMsg(ctx interface{}, msg interface{}) *MockIdentityResolver_HandlePaladinMsg_Call {
	return &MockIdentityResolver_HandlePaladinMsg_Call{Call: _e.mock.On("HandlePaladinMsg", ctx, msg)}
}

func (_c *MockIdentityResolver_HandlePaladinMsg_Call) Run(run func(ctx context.Context, msg *ReceivedMessage)) *MockIdentityResolver_HandlePaladinMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ReceivedMessage
		if args[1] != nil {
			arg1 = args[1].(*ReceivedMessage)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIdentityResolver_HandlePaladinMsg_Call) Return() *MockIdentityResolver_HandlePaladinMsg_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIdentityResolver_HandlePaladinMsg_Call) RunAndReturn(run func(ctx context.Context, msg *ReceivedMessage)) *MockIdentityResolver_HandlePaladinMsg_Call {
	_c.Run(run)
	return _c
}

// PostInit provides a mock function for the type MockIdentityResolver
func (_mock *MockIdentityResolver) PostInit(allComponents AllComponents) error {
	ret := _mock.Called(allComponents)

	if len(ret) == 0 {
		panic("no return value specified for PostInit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(AllComponents) error); ok {
		r0 = returnFunc(allComponents)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIdentityResolver_PostInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostInit'
type MockIdentityResolver_PostInit_Call struct {
	*mock.Call
}

// PostInit is a helper method to define mock.On call
//   - allComponents AllComponents
func (_e *MockIdentityResolver_Expecter) PostInit(allComponents interface{}) *MockIdentityResolver_PostInit_Call {
	return &MockIdentityResolver_PostInit_Call{Call: _e.mock.On("PostInit", allComponents)}
}

func (_c *MockIdentityResolver_PostInit_Call) Run(run func(allComponents AllComponents)) *MockIdentityResolver_PostInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 AllComponents
		if args[0] != nil {
			arg0 = args[0].(AllComponents)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIdentityResolver_PostInit_Call) Return(err error) *MockIdentityResolver_PostInit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIdentityResolver_PostInit_Call) RunAndReturn(run func(allComponents AllComponents) error) *MockIdentityResolver_PostInit_Call {
	_c.Call.Return(run)
	return _c
}

// PreInit provides a mock function for the type MockIdentityResolver
func (_mock *MockIdentityResolver) PreInit(preInitComponents PreInitComponents) (*ManagerInitResult, error) {
	ret := _mock.Called(preInitComponents)

	if len(ret) == 0 {
		panic("no return value specified for PreInit")
	}

	var r0 *ManagerInitResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(PreInitComponents) (*ManagerInitResult, error)); ok {
		return returnFunc(preInitComponents)
	}
	if returnFunc, ok := ret.Get(0).(func(PreInitComponents) *ManagerInitResult); ok {
		r0 = returnFunc(preInitComponents)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ManagerInitResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(PreInitComponents) error); ok {
		r1 = returnFunc(preInitComponents)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIdentityResolver_PreInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreInit'
type MockIdentityResolver_PreInit_Call struct {
	*mock.Call
}

// PreInit is a helper method to define mock.On call
//   - preInitComponents PreInitComponents
func (_e *MockIdentityResolver_Expecter) PreInit(preInitComponents interface{}) *MockIdentityResolver_PreInit_Call {
	return &MockIdentityResolver_PreInit_Call{Call: _e.mock.On("PreInit", preInitComponents)}
}

func (_c *MockIdentityResolver_PreInit_Call) Run(run func(preInitComponents PreInitComponents)) *MockIdentityResolver_PreInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 PreInitComponents
		if args[0] != nil {
			arg0 = args[0].(PreInitComponents)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIdentityResolver_PreInit_Call) Return(managerInitResult *ManagerInitResult, err error) *MockIdentityResolver_PreInit_Call {
	_c.Call.Return(managerInitResult, err)
	return _c
}

func (_c *MockIdentityResolver_PreInit_Call) RunAndReturn(run func(preInitComponents PreInitComponents) (*ManagerInitResult, error)) *MockIdentityResolver_PreInit_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveVerifier provides a mock function for the type MockIdentityResolver
func (_mock *MockIdentityResolver) ResolveVerifier(ctx context.Context, lookup string, algorithm string, verifierType string) (string, error) {
	ret := _mock.Called(ctx, lookup, algorithm, verifierType)

	if len(ret) == 0 {
		panic("no return value specified for ResolveVerifier")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (string, error)); ok {
		return returnFunc(ctx, lookup, algorithm, verifierType)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = returnFunc(ctx, lookup, algorithm, verifierType)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = returnFunc(ctx, lookup, algorithm, verifierType)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIdentityResolver_ResolveVerifier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveVerifier'
type MockIdentityResolver_ResolveVerifier_Call struct {
	*mock.Call
}

// ResolveVerifier is a helper method to define mock.On call
//   - ctx context.Context
//   - lookup string
//   - algorithm string
//   - verifierType string
func (_e *MockIdentityResolver_Expecter) ResolveVerifier(ctx interface{}, lookup interface{}, algorithm interface{}, verifierType interface{}) *MockIdentityResolver_ResolveVerifier_Call {
	return &MockIdentityResolver_ResolveVerifier_Call{Call: _e.mock.On("ResolveVerifier", ctx, lookup, algorithm, verifierType)}
}

func (_c *MockIdentityResolver_ResolveVerifier_Call) Run(run func(ctx context.Context, lookup string, algorithm string, verifierType string)) *MockIdentityResolver_ResolveVerifier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockIdentityResolver_ResolveVerifier_Call) Return(s string, err error) *MockIdentityResolver_ResolveVerifier_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockIdentityResolver_ResolveVerifier_Call) RunAndReturn(run func(ctx context.Context, lookup string, algorithm string, verifierType string) (string, error)) *MockIdentityResolver_ResolveVerifier_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveVerifierAsync provides a mock function for the type MockIdentityResolver
func (_mock *MockIdentityResolver) ResolveVerifierAsync(ctx context.Context, lookup string, algorithm string, verifierType string, resolved func(ctx context.Context, verifier string), failed func(ctx context.Context, err error)) {
	_mock.Called(ctx, lookup, algorithm, verifierType, resolved, failed)
	return
}

// MockIdentityResolver_ResolveVerifierAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveVerifierAsync'
type MockIdentityResolver_ResolveVerifierAsync_Call struct {
	*mock.Call
}

// ResolveVerifierAsync is a helper method to define mock.On call
//   - ctx context.Context
//   - lookup string
//   - algorithm string
//   - verifierType string
//   - resolved func(ctx context.Context, verifier string)
//   - failed func(ctx context.Context, err error)
func (_e *MockIdentityResolver_Expecter) ResolveVerifierAsync(ctx interface{}, lookup interface{}, algorithm interface{}, verifierType interface{}, resolved interface{}, failed interface{}) *MockIdentityResolver_ResolveVerifierAsync_Call {
	return &MockIdentityResolver_ResolveVerifierAsync_Call{Call: _e.mock.On("ResolveVerifierAsync", ctx, lookup, algorithm, verifierType, resolved, failed)}
}

func (_c *MockIdentityResolver_ResolveVerifierAsync_Call) Run(run func(ctx context.Context, lookup string, algorithm string, verifierType string, resolved func(ctx context.Context, verifier string), failed func(ctx context.Context, err error))) *MockIdentityResolver_ResolveVerifierAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 func(ctx context.Context, verifier string)
		if args[4] != nil {
			arg4 = args[4].(func(ctx context.Context, verifier string))
		}
		var arg5 func(ctx context.Context, err error)
		if args[5] != nil {
			arg5 = args[5].(func(ctx context.Context, err error))
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *MockIdentityResolver_ResolveVerifierAsync_Call) Return() *MockIdentityResolver_ResolveVerifierAsync_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIdentityResolver_ResolveVerifierAsync_Call) RunAndReturn(run func(ctx context.Context, lookup string, algorithm string, verifierType string, resolved func(ctx context.Context, verifier string), failed func(ctx context.Context, err error))) *MockIdentityResolver_ResolveVerifierAsync_Call {
	_c.Run(run)
	return _c
}

// Start provides a mock function for the type MockIdentityResolver
func (_mock *MockIdentityResolver) Start() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIdentityResolver_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockIdentityResolver_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockIdentityResolver_Expecter) Start() *MockIdentityResolver_Start_Call {
	return &MockIdentityResolver_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockIdentityResolver_Start_Call) Run(run func()) *MockIdentityResolver_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIdentityResolver_Start_Call) Return(err error) *MockIdentityResolver_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIdentityResolver_Start_Call) RunAndReturn(run func() error) *MockIdentityResolver_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockIdentityResolver
func (_mock *MockIdentityResolver) Stop() {
	_mock.Called()
	return
}

// MockIdentityResolver_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockIdentityResolver_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockIdentityResolver_Expecter) Stop() *MockIdentityResolver_Stop_Call {
	return &MockIdentityResolver_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockIdentityResolver_Stop_Call) Run(run func()) *MockIdentityResolver_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIdentityResolver_Stop_Call) Return() *MockIdentityResolver_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIdentityResolver_Stop_Call) RunAndReturn(run func()) *MockIdentityResolver_Stop_Call {
	_c.Run(run)
	return _c
}

// NewMockKeyResolver creates a new instance of MockKeyResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKeyResolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKeyResolver {
	mock := &MockKeyResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockKeyResolver is an autogenerated mock type for the KeyResolver type
type MockKeyResolver struct {
	mock.Mock
}

type MockKeyResolver_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKeyResolver) EXPECT() *MockKeyResolver_Expecter {
	return &MockKeyResolver_Expecter{mock: &_m.Mock}
}

// ResolveKey provides a mock function for the type MockKeyResolver
func (_mock *MockKeyResolver) ResolveKey(ctx context.Context, identifier string, algorithm string, verifierType string) (*pldapi.KeyMappingAndVerifier, error) {
	ret := _mock.Called(ctx, identifier, algorithm, verifierType)

	if len(ret) == 0 {
		panic("no return value specified for ResolveKey")
	}

	var r0 *pldapi.KeyMappingAndVerifier
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (*pldapi.KeyMappingAndVerifier, error)); ok {
		return returnFunc(ctx, identifier, algorithm, verifierType)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) *pldapi.KeyMappingAndVerifier); ok {
		r0 = returnFunc(ctx, identifier, algorithm, verifierType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.KeyMappingAndVerifier)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = returnFunc(ctx, identifier, algorithm, verifierType)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKeyResolver_ResolveKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveKey'
type MockKeyResolver_ResolveKey_Call struct {
	*mock.Call
}

// ResolveKey is a helper method to define mock.On call
//   - ctx context.Context
//   - identifier string
//   - algorithm string
//   - verifierType string
func (_e *MockKeyResolver_Expecter) ResolveKey(ctx interface{}, identifier interface{}, algorithm interface{}, verifierType interface{}) *MockKeyResolver_ResolveKey_Call {
	return &MockKeyResolver_ResolveKey_Call{Call: _e.mock.On("ResolveKey", ctx, identifier, algorithm, verifierType)}
}

func (_c *MockKeyResolver_ResolveKey_Call) Run(run func(ctx context.Context, identifier string, algorithm string, verifierType string)) *MockKeyResolver_ResolveKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockKeyResolver_ResolveKey_Call) Return(mapping *pldapi.KeyMappingAndVerifier, err error) *MockKeyResolver_ResolveKey_Call {
	_c.Call.Return(mapping, err)
	return _c
}

func (_c *MockKeyResolver_ResolveKey_Call) RunAndReturn(run func(ctx context.Context, identifier string, algorithm string, verifierType string) (*pldapi.KeyMappingAndVerifier, error)) *MockKeyResolver_ResolveKey_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKeyManagerToSigningModule creates a new instance of MockKeyManagerToSigningModule. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKeyManagerToSigningModule(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKeyManagerToSigningModule {
	mock := &MockKeyManagerToSigningModule{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockKeyManagerToSigningModule is an autogenerated mock type for the KeyManagerToSigningModule type
type MockKeyManagerToSigningModule struct {
	mock.Mock
}

type MockKeyManagerToSigningModule_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKeyManagerToSigningModule) EXPECT() *MockKeyManagerToSigningModule_Expecter {
	return &MockKeyManagerToSigningModule_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockKeyManagerToSigningModule
func (_mock *MockKeyManagerToSigningModule) Close(context1 context.Context, closeRequest *prototk.CloseRequest) (*prototk.CloseResponse, error) {
	ret := _mock.Called(context1, closeRequest)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 *prototk.CloseResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.CloseRequest) (*prototk.CloseResponse, error)); ok {
		return returnFunc(context1, closeRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.CloseRequest) *prototk.CloseResponse); ok {
		r0 = returnFunc(context1, closeRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.CloseResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.CloseRequest) error); ok {
		r1 = returnFunc(context1, closeRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKeyManagerToSigningModule_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockKeyManagerToSigningModule_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - context1 context.Context
//   - closeRequest *prototk.CloseRequest
func (_e *MockKeyManagerToSigningModule_Expecter) Close(context1 interface{}, closeRequest interface{}) *MockKeyManagerToSigningModule_Close_Call {
	return &MockKeyManagerToSigningModule_Close_Call{Call: _e.mock.On("Close", context1, closeRequest)}
}

func (_c *MockKeyManagerToSigningModule_Close_Call) Run(run func(context1 context.Context, closeRequest *prototk.CloseRequest)) *MockKeyManagerToSigningModule_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.CloseRequest
		if args[1] != nil {
			arg1 = args[1].(*prototk.CloseRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockKeyManagerToSigningModule_Close_Call) Return(closeResponse *prototk.CloseResponse, err error) *MockKeyManagerToSigningModule_Close_Call {
	_c.Call.Return(closeResponse, err)
	return _c
}

func (_c *MockKeyManagerToSigningModule_Close_Call) RunAndReturn(run func(context1 context.Context, closeRequest *prototk.CloseRequest) (*prototk.CloseResponse, error)) *MockKeyManagerToSigningModule_Close_Call {
	_c.Call.Return(run)
	return _c
}

// ConfigureSigningModule provides a mock function for the type MockKeyManagerToSigningModule
func (_mock *MockKeyManagerToSigningModule) ConfigureSigningModule(context1 context.Context, configureSigningModuleRequest *prototk.ConfigureSigningModuleRequest) (*prototk.ConfigureSigningModuleResponse, error) {
	ret := _mock.Called(context1, configureSigningModuleRequest)

	if len(ret) == 0 {
		panic("no return value specified for ConfigureSigningModule")
	}

	var r0 *prototk.ConfigureSigningModuleResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.ConfigureSigningModuleRequest) (*prototk.ConfigureSigningModuleResponse, error)); ok {
		return returnFunc(context1, configureSigningModuleRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.ConfigureSigningModuleRequest) *prototk.ConfigureSigningModuleResponse); ok {
		r0 = returnFunc(context1, configureSigningModuleRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.ConfigureSigningModuleResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.ConfigureSigningModuleRequest) error); ok {
		r1 = returnFunc(context1, configureSigningModuleRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKeyManagerToSigningModule_ConfigureSigningModule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigureSigningModule'
type MockKeyManagerToSigningModule_ConfigureSigningModule_Call struct {
	*mock.Call
}

// ConfigureSigningModule is a helper method to define mock.On call
//   - context1 context.Context
//   - configureSigningModuleRequest *prototk.ConfigureSigningModuleRequest
func (_e *MockKeyManagerToSigningModule_Expecter) ConfigureSigningModule(context1 interface{}, configureSigningModuleRequest interface{}) *MockKeyManagerToSigningModule_ConfigureSigningModule_Call {
	return &MockKeyManagerToSigningModule_ConfigureSigningModule_Call{Call: _e.mock.On("ConfigureSigningModule", context1, configureSigningModuleRequest)}
}

func (_c *MockKeyManagerToSigningModule_ConfigureSigningModule_Call) Run(run func(context1 context.Context, configureSigningModuleRequest *prototk.ConfigureSigningModuleRequest)) *MockKeyManagerToSigningModule_ConfigureSigningModule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.ConfigureSigningModuleRequest
		if args[1] != nil {
			arg1 = args[1].(*prototk.ConfigureSigningModuleRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockKeyManagerToSigningModule_ConfigureSigningModule_Call) Return(configureSigningModuleResponse *prototk.ConfigureSigningModuleResponse, err error) *MockKeyManagerToSigningModule_ConfigureSigningModule_Call {
	_c.Call.Return(configureSigningModuleResponse, err)
	return _c
}

func (_c *MockKeyManagerToSigningModule_ConfigureSigningModule_Call) RunAndReturn(run func(context1 context.Context, configureSigningModuleRequest *prototk.ConfigureSigningModuleRequest) (*prototk.ConfigureSigningModuleResponse, error)) *MockKeyManagerToSigningModule_ConfigureSigningModule_Call {
	_c.Call.Return(run)
	return _c
}

// Initialized provides a mock function for the type MockKeyManagerToSigningModule
func (_mock *MockKeyManagerToSigningModule) Initialized() {
	_mock.Called()
	return
}

// MockKeyManagerToSigningModule_Initialized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialized'
type MockKeyManagerToSigningModule_Initialized_Call struct {
	*mock.Call
}

// Initialized is a helper method to define mock.On call
func (_e *MockKeyManagerToSigningModule_Expecter) Initialized() *MockKeyManagerToSigningModule_Initialized_Call {
	return &MockKeyManagerToSigningModule_Initialized_Call{Call: _e.mock.On("Initialized")}
}

func (_c *MockKeyManagerToSigningModule_Initialized_Call) Run(run func()) *MockKeyManagerToSigningModule_Initialized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKeyManagerToSigningModule_Initialized_Call) Return() *MockKeyManagerToSigningModule_Initialized_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockKeyManagerToSigningModule_Initialized_Call) RunAndReturn(run func()) *MockKeyManagerToSigningModule_Initialized_Call {
	_c.Run(run)
	return _c
}

// ListKeys provides a mock function for the type MockKeyManagerToSigningModule
func (_mock *MockKeyManagerToSigningModule) ListKeys(context1 context.Context, listKeysRequest *prototk.ListKeysRequest) (*prototk.ListKeysResponse, error) {
	ret := _mock.Called(context1, listKeysRequest)

	if len(ret) == 0 {
		panic("no return value specified for ListKeys")
	}

	var r0 *prototk.ListKeysResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.ListKeysRequest) (*prototk.ListKeysResponse, error)); ok {
		return returnFunc(context1, listKeysRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.ListKeysRequest) *prototk.ListKeysResponse); ok {
		r0 = returnFunc(context1, listKeysRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.ListKeysResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.ListKeysRequest) error); ok {
		r1 = returnFunc(context1, listKeysRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKeyManagerToSigningModule_ListKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListKeys'
type MockKeyManagerToSigningModule_ListKeys_Call struct {
	*mock.Call
}

// ListKeys is a helper method to define mock.On call
//   - context1 context.Context
//   - listKeysRequest *prototk.ListKeysRequest
func (_e *MockKeyManagerToSigningModule_Expecter) ListKeys(context1 interface{}, listKeysRequest interface{}) *MockKeyManagerToSigningModule_ListKeys_Call {
	return &MockKeyManagerToSigningModule_ListKeys_Call{Call: _e.mock.On("ListKeys", context1, listKeysRequest)}
}

func (_c *MockKeyManagerToSigningModule_ListKeys_Call) Run(run func(context1 context.Context, listKeysRequest *prototk.ListKeysRequest)) *MockKeyManagerToSigningModule_ListKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.ListKeysRequest
		if args[1] != nil {
			arg1 = args[1].(*prototk.ListKeysRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockKeyManagerToSigningModule_ListKeys_Call) Return(listKeysResponse *prototk.ListKeysResponse, err error) *MockKeyManagerToSigningModule_ListKeys_Call {
	_c.Call.Return(listKeysResponse, err)
	return _c
}

func (_c *MockKeyManagerToSigningModule_ListKeys_Call) RunAndReturn(run func(context1 context.Context, listKeysRequest *prototk.ListKeysRequest) (*prototk.ListKeysResponse, error)) *MockKeyManagerToSigningModule_ListKeys_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveKey provides a mock function for the type MockKeyManagerToSigningModule
func (_mock *MockKeyManagerToSigningModule) ResolveKey(context1 context.Context, resolveKeyRequest *prototk.ResolveKeyRequest) (*prototk.ResolveKeyResponse, error) {
	ret := _mock.Called(context1, resolveKeyRequest)

	if len(ret) == 0 {
		panic("no return value specified for ResolveKey")
	}

	var r0 *prototk.ResolveKeyResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.ResolveKeyRequest) (*prototk.ResolveKeyResponse, error)); ok {
		return returnFunc(context1, resolveKeyRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.ResolveKeyRequest) *prototk.ResolveKeyResponse); ok {
		r0 = returnFunc(context1, resolveKeyRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.ResolveKeyResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.ResolveKeyRequest) error); ok {
		r1 = returnFunc(context1, resolveKeyRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKeyManagerToSigningModule_ResolveKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveKey'
type MockKeyManagerToSigningModule_ResolveKey_Call struct {
	*mock.Call
}

// ResolveKey is a helper method to define mock.On call
//   - context1 context.Context
//   - resolveKeyRequest *prototk.ResolveKeyRequest
func (_e *MockKeyManagerToSigningModule_Expecter) ResolveKey(context1 interface{}, resolveKeyRequest interface{}) *MockKeyManagerToSigningModule_ResolveKey_Call {
	return &MockKeyManagerToSigningModule_ResolveKey_Call{Call: _e.mock.On("ResolveKey", context1, resolveKeyRequest)}
}

func (_c *MockKeyManagerToSigningModule_ResolveKey_Call) Run(run func(context1 context.Context, resolveKeyRequest *prototk.ResolveKeyRequest)) *MockKeyManagerToSigningModule_ResolveKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.ResolveKeyRequest
		if args[1] != nil {
			arg1 = args[1].(*prototk.ResolveKeyRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockKeyManagerToSigningModule_ResolveKey_Call) Return(resolveKeyResponse *prototk.ResolveKeyResponse, err error) *MockKeyManagerToSigningModule_ResolveKey_Call {
	_c.Call.Return(resolveKeyResponse, err)
	return _c
}

func (_c *MockKeyManagerToSigningModule_ResolveKey_Call) RunAndReturn(run func(context1 context.Context, resolveKeyRequest *prototk.ResolveKeyRequest) (*prototk.ResolveKeyResponse, error)) *MockKeyManagerToSigningModule_ResolveKey_Call {
	_c.Call.Return(run)
	return _c
}

// Sign provides a mock function for the type MockKeyManagerToSigningModule
func (_mock *MockKeyManagerToSigningModule) Sign(context1 context.Context, signWithKeyRequest *prototk.SignWithKeyRequest) (*prototk.SignWithKeyResponse, error) {
	ret := _mock.Called(context1, signWithKeyRequest)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 *prototk.SignWithKeyResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.SignWithKeyRequest) (*prototk.SignWithKeyResponse, error)); ok {
		return returnFunc(context1, signWithKeyRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.SignWithKeyRequest) *prototk.SignWithKeyResponse); ok {
		r0 = returnFunc(context1, signWithKeyRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.SignWithKeyResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.SignWithKeyRequest) error); ok {
		r1 = returnFunc(context1, signWithKeyRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKeyManagerToSigningModule_Sign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sign'
type MockKeyManagerToSigningModule_Sign_Call struct {
	*mock.Call
}

// Sign is a helper method to define mock.On call
//   - context1 context.Context
//   - signWithKeyRequest *prototk.SignWithKeyRequest
func (_e *MockKeyManagerToSigningModule_Expecter) Sign(context1 interface{}, signWithKeyRequest interface{}) *MockKeyManagerToSigningModule_Sign_Call {
	return &MockKeyManagerToSigningModule_Sign_Call{Call: _e.mock.On("Sign", context1, signWithKeyRequest)}
}

func (_c *MockKeyManagerToSigningModule_Sign_Call) Run(run func(context1 context.Context, signWithKeyRequest *prototk.SignWithKeyRequest)) *MockKeyManagerToSigningModule_Sign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.SignWithKeyRequest
		if args[1] != nil {
			arg1 = args[1].(*prototk.SignWithKeyRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockKeyManagerToSigningModule_Sign_Call) Return(signWithKeyResponse *prototk.SignWithKeyResponse, err error) *MockKeyManagerToSigningModule_Sign_Call {
	_c.Call.Return(signWithKeyResponse, err)
	return _c
}

func (_c *MockKeyManagerToSigningModule_Sign_Call) RunAndReturn(run func(context1 context.Context, signWithKeyRequest *prototk.SignWithKeyRequest) (*prototk.SignWithKeyResponse, error)) *MockKeyManagerToSigningModule_Sign_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKeyManager creates a new instance of MockKeyManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKeyManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKeyManager {
	mock := &MockKeyManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockKeyManager is an autogenerated mock type for the KeyManager type
type MockKeyManager struct {
	mock.Mock
}

type MockKeyManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKeyManager) EXPECT() *MockKeyManager_Expecter {
	return &MockKeyManager_Expecter{mock: &_m.Mock}
}

// AddInMemorySigner provides a mock function for the type MockKeyManager
func (_mock *MockKeyManager) AddInMemorySigner(prefix string, signer signerapi.InMemorySigner) {
	_mock.Called(prefix, signer)
	return
}

// MockKeyManager_AddInMemorySigner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddInMemorySigner'
type MockKeyManager_AddInMemorySigner_Call struct {
	*mock.Call
}

// AddInMemorySigner is a helper method to define mock.On call
//   - prefix string
//   - signer signerapi.InMemorySigner
func (_e *MockKeyManager_Expecter) AddInMemorySigner(prefix interface{}, signer interface{}) *MockKeyManager_AddInMemorySigner_Call {
	return &MockKeyManager_AddInMemorySigner_Call{Call: _e.mock.On("AddInMemorySigner", prefix, signer)}
}

func (_c *MockKeyManager_AddInMemorySigner_Call) Run(run func(prefix string, signer signerapi.InMemorySigner)) *MockKeyManager_AddInMemorySigner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 signerapi.InMemorySigner
		if args[1] != nil {
			arg1 = args[1].(signerapi.InMemorySigner)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockKeyManager_AddInMemorySigner_Call) Return() *MockKeyManager_AddInMemorySigner_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockKeyManager_AddInMemorySigner_Call) RunAndReturn(run func(prefix string, signer signerapi.InMemorySigner)) *MockKeyManager_AddInMemorySigner_Call {
	_c.Run(run)
	return _c
}

// ConfiguredSigningModules provides a mock function for the type MockKeyManager
func (_mock *MockKeyManager) ConfiguredSigningModules() map[string]*pldconf.PluginConfig {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ConfiguredSigningModules")
	}

	var r0 map[string]*pldconf.PluginConfig
	if returnFunc, ok := ret.Get(0).(func() map[string]*pldconf.PluginConfig); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*pldconf.PluginConfig)
		}
	}
	return r0
}

// MockKeyManager_ConfiguredSigningModules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfiguredSigningModules'
type MockKeyManager_ConfiguredSigningModules_Call struct {
	*mock.Call
}

// ConfiguredSigningModules is a helper method to define mock.On call
func (_e *MockKeyManager_Expecter) ConfiguredSigningModules() *MockKeyManager_ConfiguredSigningModules_Call {
	return &MockKeyManager_ConfiguredSigningModules_Call{Call: _e.mock.On("ConfiguredSigningModules")}
}

func (_c *MockKeyManager_ConfiguredSigningModules_Call) Run(run func()) *MockKeyManager_ConfiguredSigningModules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKeyManager_ConfiguredSigningModules_Call) Return(stringToPluginConfig map[string]*pldconf.PluginConfig) *MockKeyManager_ConfiguredSigningModules_Call {
	_c.Call.Return(stringToPluginConfig)
	return _c
}

func (_c *MockKeyManager_ConfiguredSigningModules_Call) RunAndReturn(run func() map[string]*pldconf.PluginConfig) *MockKeyManager_ConfiguredSigningModules_Call {
	_c.Call.Return(run)
	return _c
}

// GetSigningModule provides a mock function for the type MockKeyManager
func (_mock *MockKeyManager) GetSigningModule(ctx context.Context, name string) (signer.SigningModule, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetSigningModule")
	}

	var r0 signer.SigningModule
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (signer.SigningModule, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) signer.SigningModule); ok {
		r0 = returnFunc(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(signer.SigningModule)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKeyManager_GetSigningModule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSigningModule'
type MockKeyManager_GetSigningModule_Call struct {
	*mock.Call
}

// GetSigningModule is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockKeyManager_Expecter) GetSigningModule(ctx interface{}, name interface{}) *MockKeyManager_GetSigningModule_Call {
	return &MockKeyManager_GetSigningModule_Call{Call: _e.mock.On("GetSigningModule", ctx, name)}
}

func (_c *MockKeyManager_GetSigningModule_Call) Run(run func(ctx context.Context, name string)) *MockKeyManager_GetSigningModule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockKeyManager_GetSigningModule_Call) Return(signingModule signer.SigningModule, err error) *MockKeyManager_GetSigningModule_Call {
	_c.Call.Return(signingModule, err)
	return _c
}

func (_c *MockKeyManager_GetSigningModule_Call) RunAndReturn(run func(ctx context.Context, name string) (signer.SigningModule, error)) *MockKeyManager_GetSigningModule_Call {
	_c.Call.Return(run)
	return _c
}

// KeyResolverForDBTX provides a mock function for the type MockKeyManager
func (_mock *MockKeyManager) KeyResolverForDBTX(dbTX persistence.DBTX) KeyResolver {
	ret := _mock.Called(dbTX)

	if len(ret) == 0 {
		panic("no return value specified for KeyResolverForDBTX")
	}

	var r0 KeyResolver
	if returnFunc, ok := ret.Get(0).(func(persistence.DBTX) KeyResolver); ok {
		r0 = returnFunc(dbTX)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(KeyResolver)
		}
	}
	return r0
}

// MockKeyManager_KeyResolverForDBTX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KeyResolverForDBTX'
type MockKeyManager_KeyResolverForDBTX_Call struct {
	*mock.Call
}

// KeyResolverForDBTX is a helper method to define mock.On call
//   - dbTX persistence.DBTX
func (_e *MockKeyManager_Expecter) KeyResolverForDBTX(dbTX interface{}) *MockKeyManager_KeyResolverForDBTX_Call {
	return &MockKeyManager_KeyResolverForDBTX_Call{Call: _e.mock.On("KeyResolverForDBTX", dbTX)}
}

func (_c *MockKeyManager_KeyResolverForDBTX_Call) Run(run func(dbTX persistence.DBTX)) *MockKeyManager_KeyResolverForDBTX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 persistence.DBTX
		if args[0] != nil {
			arg0 = args[0].(persistence.DBTX)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockKeyManager_KeyResolverForDBTX_Call) Return(keyResolver KeyResolver) *MockKeyManager_KeyResolverForDBTX_Call {
	_c.Call.Return(keyResolver)
	return _c
}

func (_c *MockKeyManager_KeyResolverForDBTX_Call) RunAndReturn(run func(dbTX persistence.DBTX) KeyResolver) *MockKeyManager_KeyResolverForDBTX_Call {
	_c.Call.Return(run)
	return _c
}

// PostInit provides a mock function for the type MockKeyManager
func (_mock *MockKeyManager) PostInit(allComponents AllComponents) error {
	ret := _mock.Called(allComponents)

	if len(ret) == 0 {
		panic("no return value specified for PostInit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(AllComponents) error); ok {
		r0 = returnFunc(allComponents)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockKeyManager_PostInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostInit'
type MockKeyManager_PostInit_Call struct {
	*mock.Call
}

// PostInit is a helper method to define mock.On call
//   - allComponents AllComponents
func (_e *MockKeyManager_Expecter) PostInit(allComponents interface{}) *MockKeyManager_PostInit_Call {
	return &MockKeyManager_PostInit_Call{Call: _e.mock.On("PostInit", allComponents)}
}

func (_c *MockKeyManager_PostInit_Call) Run(run func(allComponents AllComponents)) *MockKeyManager_PostInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 AllComponents
		if args[0] != nil {
			arg0 = args[0].(AllComponents)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockKeyManager_PostInit_Call) Return(err error) *MockKeyManager_PostInit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockKeyManager_PostInit_Call) RunAndReturn(run func(allComponents AllComponents) error) *MockKeyManager_PostInit_Call {
	_c.Call.Return(run)
	return _c
}

// PreInit provides a mock function for the type MockKeyManager
func (_mock *MockKeyManager) PreInit(preInitComponents PreInitComponents) (*ManagerInitResult, error) {
	ret := _mock.Called(preInitComponents)

	if len(ret) == 0 {
		panic("no return value specified for PreInit")
	}

	var r0 *ManagerInitResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(PreInitComponents) (*ManagerInitResult, error)); ok {
		return returnFunc(preInitComponents)
	}
	if returnFunc, ok := ret.Get(0).(func(PreInitComponents) *ManagerInitResult); ok {
		r0 = returnFunc(preInitComponents)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ManagerInitResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(PreInitComponents) error); ok {
		r1 = returnFunc(preInitComponents)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKeyManager_PreInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreInit'
type MockKeyManager_PreInit_Call struct {
	*mock.Call
}

// PreInit is a helper method to define mock.On call
//   - preInitComponents PreInitComponents
func (_e *MockKeyManager_Expecter) PreInit(preInitComponents interface{}) *MockKeyManager_PreInit_Call {
	return &MockKeyManager_PreInit_Call{Call: _e.mock.On("PreInit", preInitComponents)}
}

func (_c *MockKeyManager_PreInit_Call) Run(run func(preInitComponents PreInitComponents)) *MockKeyManager_PreInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 PreInitComponents
		if args[0] != nil {
			arg0 = args[0].(PreInitComponents)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockKeyManager_PreInit_Call) Return(managerInitResult *ManagerInitResult, err error) *MockKeyManager_PreInit_Call {
	_c.Call.Return(managerInitResult, err)
	return _c
}

func (_c *MockKeyManager_PreInit_Call) RunAndReturn(run func(preInitComponents PreInitComponents) (*ManagerInitResult, error)) *MockKeyManager_PreInit_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveBatchNewDatabaseTX provides a mock function for the type MockKeyManager
func (_mock *MockKeyManager) ResolveBatchNewDatabaseTX(ctx context.Context, algorithm string, verifierType string, identifiers []string) ([]*pldapi.KeyMappingAndVerifier, error) {
	ret := _mock.Called(ctx, algorithm, verifierType, identifiers)

	if len(ret) == 0 {
		panic("no return value specified for ResolveBatchNewDatabaseTX")
	}

	var r0 []*pldapi.KeyMappingAndVerifier
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, []string) ([]*pldapi.KeyMappingAndVerifier, error)); ok {
		return returnFunc(ctx, algorithm, verifierType, identifiers)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, []string) []*pldapi.KeyMappingAndVerifier); ok {
		r0 = returnFunc(ctx, algorithm, verifierType, identifiers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pldapi.KeyMappingAndVerifier)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, []string) error); ok {
		r1 = returnFunc(ctx, algorithm, verifierType, identifiers)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKeyManager_ResolveBatchNewDatabaseTX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveBatchNewDatabaseTX'
type MockKeyManager_ResolveBatchNewDatabaseTX_Call struct {
	*mock.Call
}

// ResolveBatchNewDatabaseTX is a helper method to define mock.On call
//   - ctx context.Context
//   - algorithm string
//   - verifierType string
//   - identifiers []string
func (_e *MockKeyManager_Expecter) ResolveBatchNewDatabaseTX(ctx interface{}, algorithm interface{}, verifierType interface{}, identifiers interface{}) *MockKeyManager_ResolveBatchNewDatabaseTX_Call {
	return &MockKeyManager_ResolveBatchNewDatabaseTX_Call{Call: _e.mock.On("ResolveBatchNewDatabaseTX", ctx, algorithm, verifierType, identifiers)}
}

func (_c *MockKeyManager_ResolveBatchNewDatabaseTX_Call) Run(run func(ctx context.Context, algorithm string, verifierType string, identifiers []string)) *MockKeyManager_ResolveBatchNewDatabaseTX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []string
		if args[3] != nil {
			arg3 = args[3].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockKeyManager_ResolveBatchNewDatabaseTX_Call) Return(resolvedKey []*pldapi.KeyMappingAndVerifier, err error) *MockKeyManager_ResolveBatchNewDatabaseTX_Call {
	_c.Call.Return(resolvedKey, err)
	return _c
}

func (_c *MockKeyManager_ResolveBatchNewDatabaseTX_Call) RunAndReturn(run func(ctx context.Context, algorithm string, verifierType string, identifiers []string) ([]*pldapi.KeyMappingAndVerifier, error)) *MockKeyManager_ResolveBatchNewDatabaseTX_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveEthAddressBatchNewDatabaseTX provides a mock function for the type MockKeyManager
func (_mock *MockKeyManager) ResolveEthAddressBatchNewDatabaseTX(ctx context.Context, identifiers []string) ([]*pldtypes.EthAddress, error) {
	ret := _mock.Called(ctx, identifiers)

	if len(ret) == 0 {
		panic("no return value specified for ResolveEthAddressBatchNewDatabaseTX")
	}

	var r0 []*pldtypes.EthAddress
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) ([]*pldtypes.EthAddress, error)); ok {
		return returnFunc(ctx, identifiers)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) []*pldtypes.EthAddress); ok {
		r0 = returnFunc(ctx, identifiers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pldtypes.EthAddress)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = returnFunc(ctx, identifiers)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKeyManager_ResolveEthAddressBatchNewDatabaseTX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveEthAddressBatchNewDatabaseTX'
type MockKeyManager_ResolveEthAddressBatchNewDatabaseTX_Call struct {
	*mock.Call
}

// ResolveEthAddressBatchNewDatabaseTX is a helper method to define mock.On call
//   - ctx context.Context
//   - identifiers []string
func (_e *MockKeyManager_Expecter) ResolveEthAddressBatchNewDatabaseTX(ctx interface{}, identifiers interface{}) *MockKeyManager_ResolveEthAddressBatchNewDatabaseTX_Call {
	return &MockKeyManager_ResolveEthAddressBatchNewDatabaseTX_Call{Call: _e.mock.On("ResolveEthAddressBatchNewDatabaseTX", ctx, identifiers)}
}

func (_c *MockKeyManager_ResolveEthAddressBatchNewDatabaseTX_Call) Run(run func(ctx context.Context, identifiers []string)) *MockKeyManager_ResolveEthAddressBatchNewDatabaseTX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockKeyManager_ResolveEthAddressBatchNewDatabaseTX_Call) Return(ethAddresses []*pldtypes.EthAddress, err error) *MockKeyManager_ResolveEthAddressBatchNewDatabaseTX_Call {
	_c.Call.Return(ethAddresses, err)
	return _c
}

func (_c *MockKeyManager_ResolveEthAddressBatchNewDatabaseTX_Call) RunAndReturn(run func(ctx context.Context, identifiers []string) ([]*pldtypes.EthAddress, error)) *MockKeyManager_ResolveEthAddressBatchNewDatabaseTX_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveEthAddressNewDatabaseTX provides a mock function for the type MockKeyManager
func (_mock *MockKeyManager) ResolveEthAddressNewDatabaseTX(ctx context.Context, identifier string) (*pldtypes.EthAddress, error) {
	ret := _mock.Called(ctx, identifier)

	if len(ret) == 0 {
		panic("no return value specified for ResolveEthAddressNewDatabaseTX")
	}

	var r0 *pldtypes.EthAddress
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*pldtypes.EthAddress, error)); ok {
		return returnFunc(ctx, identifier)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *pldtypes.EthAddress); ok {
		r0 = returnFunc(ctx, identifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldtypes.EthAddress)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, identifier)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKeyManager_ResolveEthAddressNewDatabaseTX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveEthAddressNewDatabaseTX'
type MockKeyManager_ResolveEthAddressNewDatabaseTX_Call struct {
	*mock.Call
}

// ResolveEthAddressNewDatabaseTX is a helper method to define mock.On call
//   - ctx context.Context
//   - identifier string
func (_e *MockKeyManager_Expecter) ResolveEthAddressNewDatabaseTX(ctx interface{}, identifier interface{}) *MockKeyManager_ResolveEthAddressNewDatabaseTX_Call {
	return &MockKeyManager_ResolveEthAddressNewDatabaseTX_Call{Call: _e.mock.On("ResolveEthAddressNewDatabaseTX", ctx, identifier)}
}

func (_c *MockKeyManager_ResolveEthAddressNewDatabaseTX_Call) Run(run func(ctx context.Context, identifier string)) *MockKeyManager_ResolveEthAddressNewDatabaseTX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockKeyManager_ResolveEthAddressNewDatabaseTX_Call) Return(ethAddress *pldtypes.EthAddress, err error) *MockKeyManager_ResolveEthAddressNewDatabaseTX_Call {
	_c.Call.Return(ethAddress, err)
	return _c
}

func (_c *MockKeyManager_ResolveEthAddressNewDatabaseTX_Call) RunAndReturn(run func(ctx context.Context, identifier string) (*pldtypes.EthAddress, error)) *MockKeyManager_ResolveEthAddressNewDatabaseTX_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveKeyNewDatabaseTX provides a mock function for the type MockKeyManager
func (_mock *MockKeyManager) ResolveKeyNewDatabaseTX(ctx context.Context, identifier string, algorithm string, verifierType string) (*pldapi.KeyMappingAndVerifier, error) {
	ret := _mock.Called(ctx, identifier, algorithm, verifierType)

	if len(ret) == 0 {
		panic("no return value specified for ResolveKeyNewDatabaseTX")
	}

	var r0 *pldapi.KeyMappingAndVerifier
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (*pldapi.KeyMappingAndVerifier, error)); ok {
		return returnFunc(ctx, identifier, algorithm, verifierType)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) *pldapi.KeyMappingAndVerifier); ok {
		r0 = returnFunc(ctx, identifier, algorithm, verifierType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.KeyMappingAndVerifier)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = returnFunc(ctx, identifier, algorithm, verifierType)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKeyManager_ResolveKeyNewDatabaseTX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveKeyNewDatabaseTX'
type MockKeyManager_ResolveKeyNewDatabaseTX_Call struct {
	*mock.Call
}

// ResolveKeyNewDatabaseTX is a helper method to define mock.On call
//   - ctx context.Context
//   - identifier string
//   - algorithm string
//   - verifierType string
func (_e *MockKeyManager_Expecter) ResolveKeyNewDatabaseTX(ctx interface{}, identifier interface{}, algorithm interface{}, verifierType interface{}) *MockKeyManager_ResolveKeyNewDatabaseTX_Call {
	return &MockKeyManager_ResolveKeyNewDatabaseTX_Call{Call: _e.mock.On("ResolveKeyNewDatabaseTX", ctx, identifier, algorithm, verifierType)}
}

func (_c *MockKeyManager_ResolveKeyNewDatabaseTX_Call) Run(run func(ctx context.Context, identifier string, algorithm string, verifierType string)) *MockKeyManager_ResolveKeyNewDatabaseTX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockKeyManager_ResolveKeyNewDatabaseTX_Call) Return(resolvedKey *pldapi.KeyMappingAndVerifier, err error) *MockKeyManager_ResolveKeyNewDatabaseTX_Call {
	_c.Call.Return(resolvedKey, err)
	return _c
}

func (_c *MockKeyManager_ResolveKeyNewDatabaseTX_Call) RunAndReturn(run func(ctx context.Context, identifier string, algorithm string, verifierType string) (*pldapi.KeyMappingAndVerifier, error)) *MockKeyManager_ResolveKeyNewDatabaseTX_Call {
	_c.Call.Return(run)
	return _c
}

// ReverseKeyLookup provides a mock function for the type MockKeyManager
func (_mock *MockKeyManager) ReverseKeyLookup(ctx context.Context, dbTX persistence.DBTX, algorithm string, verifierType string, verifier string) (*pldapi.KeyMappingAndVerifier, error) {
	ret := _mock.Called(ctx, dbTX, algorithm, verifierType, verifier)

	if len(ret) == 0 {
		panic("no return value specified for ReverseKeyLookup")
	}

	var r0 *pldapi.KeyMappingAndVerifier
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, string, string, string) (*pldapi.KeyMappingAndVerifier, error)); ok {
		return returnFunc(ctx, dbTX, algorithm, verifierType, verifier)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, string, string, string) *pldapi.KeyMappingAndVerifier); ok {
		r0 = returnFunc(ctx, dbTX, algorithm, verifierType, verifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.KeyMappingAndVerifier)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, string, string, string) error); ok {
		r1 = returnFunc(ctx, dbTX, algorithm, verifierType, verifier)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKeyManager_ReverseKeyLookup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReverseKeyLookup'
type MockKeyManager_ReverseKeyLookup_Call struct {
	*mock.Call
}

// ReverseKeyLookup is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - algorithm string
//   - verifierType string
//   - verifier string
func (_e *MockKeyManager_Expecter) ReverseKeyLookup(ctx interface{}, dbTX interface{}, algorithm interface{}, verifierType interface{}, verifier interface{}) *MockKeyManager_ReverseKeyLookup_Call {
	return &MockKeyManager_ReverseKeyLookup_Call{Call: _e.mock.On("ReverseKeyLookup", ctx, dbTX, algorithm, verifierType, verifier)}
}

func (_c *MockKeyManager_ReverseKeyLookup_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, algorithm string, verifierType string, verifier string)) *MockKeyManager_ReverseKeyLookup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockKeyManager_ReverseKeyLookup_Call) Return(mapping *pldapi.KeyMappingAndVerifier, err error) *MockKeyManager_ReverseKeyLookup_Call {
	_c.Call.Return(mapping, err)
	return _c
}

func (_c *MockKeyManager_ReverseKeyLookup_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, algorithm string, verifierType string, verifier string) (*pldapi.KeyMappingAndVerifier, error)) *MockKeyManager_ReverseKeyLookup_Call {
	_c.Call.Return(run)
	return _c
}

// Sign provides a mock function for the type MockKeyManager
func (_mock *MockKeyManager) Sign(ctx context.Context, mapping *pldapi.KeyMappingAndVerifier, payloadType string, payload []byte) ([]byte, error) {
	ret := _mock.Called(ctx, mapping, payloadType, payload)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pldapi.KeyMappingAndVerifier, string, []byte) ([]byte, error)); ok {
		return returnFunc(ctx, mapping, payloadType, payload)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pldapi.KeyMappingAndVerifier, string, []byte) []byte); ok {
		r0 = returnFunc(ctx, mapping, payloadType, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *pldapi.KeyMappingAndVerifier, string, []byte) error); ok {
		r1 = returnFunc(ctx, mapping, payloadType, payload)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKeyManager_Sign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sign'
type MockKeyManager_Sign_Call struct {
	*mock.Call
}

// Sign is a helper method to define mock.On call
//   - ctx context.Context
//   - mapping *pldapi.KeyMappingAndVerifier
//   - payloadType string
//   - payload []byte
func (_e *MockKeyManager_Expecter) Sign(ctx interface{}, mapping interface{}, payloadType interface{}, payload interface{}) *MockKeyManager_Sign_Call {
	return &MockKeyManager_Sign_Call{Call: _e.mock.On("Sign", ctx, mapping, payloadType, payload)}
}

func (_c *MockKeyManager_Sign_Call) Run(run func(ctx context.Context, mapping *pldapi.KeyMappingAndVerifier, payloadType string, payload []byte)) *MockKeyManager_Sign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pldapi.KeyMappingAndVerifier
		if args[1] != nil {
			arg1 = args[1].(*pldapi.KeyMappingAndVerifier)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []byte
		if args[3] != nil {
			arg3 = args[3].([]byte)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockKeyManager_Sign_Call) Return(bytes []byte, err error) *MockKeyManager_Sign_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockKeyManager_Sign_Call) RunAndReturn(run func(ctx context.Context, mapping *pldapi.KeyMappingAndVerifier, payloadType string, payload []byte) ([]byte, error)) *MockKeyManager_Sign_Call {
	_c.Call.Return(run)
	return _c
}

// SigningModuleRegistered provides a mock function for the type MockKeyManager
func (_mock *MockKeyManager) SigningModuleRegistered(name string, id uuid.UUID, toSigningModule KeyManagerToSigningModule) (plugintk.SigningModuleCallbacks, error) {
	ret := _mock.Called(name, id, toSigningModule)

	if len(ret) == 0 {
		panic("no return value specified for SigningModuleRegistered")
	}

	var r0 plugintk.SigningModuleCallbacks
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID, KeyManagerToSigningModule) (plugintk.SigningModuleCallbacks, error)); ok {
		return returnFunc(name, id, toSigningModule)
	}
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID, KeyManagerToSigningModule) plugintk.SigningModuleCallbacks); ok {
		r0 = returnFunc(name, id, toSigningModule)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plugintk.SigningModuleCallbacks)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, uuid.UUID, KeyManagerToSigningModule) error); ok {
		r1 = returnFunc(name, id, toSigningModule)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKeyManager_SigningModuleRegistered_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SigningModuleRegistered'
type MockKeyManager_SigningModuleRegistered_Call struct {
	*mock.Call
}

// SigningModuleRegistered is a helper method to define mock.On call
//   - name string
//   - id uuid.UUID
//   - toSigningModule KeyManagerToSigningModule
func (_e *MockKeyManager_Expecter) SigningModuleRegistered(name interface{}, id interface{}, toSigningModule interface{}) *MockKeyManager_SigningModuleRegistered_Call {
	return &MockKeyManager_SigningModuleRegistered_Call{Call: _e.mock.On("SigningModuleRegistered", name, id, toSigningModule)}
}

func (_c *MockKeyManager_SigningModuleRegistered_Call) Run(run func(name string, id uuid.UUID, toSigningModule KeyManagerToSigningModule)) *MockKeyManager_SigningModuleRegistered_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 KeyManagerToSigningModule
		if args[2] != nil {
			arg2 = args[2].(KeyManagerToSigningModule)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockKeyManager_SigningModuleRegistered_Call) Return(fromSigningModule plugintk.SigningModuleCallbacks, err error) *MockKeyManager_SigningModuleRegistered_Call {
	_c.Call.Return(fromSigningModule, err)
	return _c
}

func (_c *MockKeyManager_SigningModuleRegistered_Call) RunAndReturn(run func(name string, id uuid.UUID, toSigningModule KeyManagerToSigningModule) (plugintk.SigningModuleCallbacks, error)) *MockKeyManager_SigningModuleRegistered_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockKeyManager
func (_mock *MockKeyManager) Start() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockKeyManager_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockKeyManager_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockKeyManager_Expecter) Start() *MockKeyManager_Start_Call {
	return &MockKeyManager_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockKeyManager_Start_Call) Run(run func()) *MockKeyManager_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKeyManager_Start_Call) Return(err error) *MockKeyManager_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockKeyManager_Start_Call) RunAndReturn(run func() error) *MockKeyManager_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockKeyManager
func (_mock *MockKeyManager) Stop() {
	_mock.Called()
	return
}

// MockKeyManager_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockKeyManager_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockKeyManager_Expecter) Stop() *MockKeyManager_Stop_Call {
	return &MockKeyManager_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockKeyManager_Stop_Call) Run(run func()) *MockKeyManager_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKeyManager_Stop_Call) Return() *MockKeyManager_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockKeyManager_Stop_Call) RunAndReturn(run func()) *MockKeyManager_Stop_Call {
	_c.Run(run)
	return _c
}

// NewMockPluginManager creates a new instance of MockPluginManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPluginManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPluginManager {
	mock := &MockPluginManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPluginManager is an autogenerated mock type for the PluginManager type
type MockPluginManager struct {
	mock.Mock
}

type MockPluginManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPluginManager) EXPECT() *MockPluginManager_Expecter {
	return &MockPluginManager_Expecter{mock: &_m.Mock}
}

// GRPCTargetURL provides a mock function for the type MockPluginManager
func (_mock *MockPluginManager) GRPCTargetURL() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GRPCTargetURL")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockPluginManager_GRPCTargetURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GRPCTargetURL'
type MockPluginManager_GRPCTargetURL_Call struct {
	*mock.Call
}

// GRPCTargetURL is a helper method to define mock.On call
func (_e *MockPluginManager_Expecter) GRPCTargetURL() *MockPluginManager_GRPCTargetURL_Call {
	return &MockPluginManager_GRPCTargetURL_Call{Call: _e.mock.On("GRPCTargetURL")}
}

func (_c *MockPluginManager_GRPCTargetURL_Call) Run(run func()) *MockPluginManager_GRPCTargetURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPluginManager_GRPCTargetURL_Call) Return(s string) *MockPluginManager_GRPCTargetURL_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockPluginManager_GRPCTargetURL_Call) RunAndReturn(run func() string) *MockPluginManager_GRPCTargetURL_Call {
	_c.Call.Return(run)
	return _c
}

// LoaderID provides a mock function for the type MockPluginManager
func (_mock *MockPluginManager) LoaderID() uuid.UUID {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoaderID")
	}

	var r0 uuid.UUID
	if returnFunc, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	return r0
}

// MockPluginManager_LoaderID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoaderID'
type MockPluginManager_LoaderID_Call struct {
	*mock.Call
}

// LoaderID is a helper method to define mock.On call
func (_e *MockPluginManager_Expecter) LoaderID() *MockPluginManager_LoaderID_Call {
	return &MockPluginManager_LoaderID_Call{Call: _e.mock.On("LoaderID")}
}

func (_c *MockPluginManager_LoaderID_Call) Run(run func()) *MockPluginManager_LoaderID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPluginManager_LoaderID_Call) Return(uUID uuid.UUID) *MockPluginManager_LoaderID_Call {
	_c.Call.Return(uUID)
	return _c
}

func (_c *MockPluginManager_LoaderID_Call) RunAndReturn(run func() uuid.UUID) *MockPluginManager_LoaderID_Call {
	_c.Call.Return(run)
	return _c
}

// PostInit provides a mock function for the type MockPluginManager
func (_mock *MockPluginManager) PostInit(allComponents AllComponents) error {
	ret := _mock.Called(allComponents)

	if len(ret) == 0 {
		panic("no return value specified for PostInit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(AllComponents) error); ok {
		r0 = returnFunc(allComponents)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPluginManager_PostInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostInit'
type MockPluginManager_PostInit_Call struct {
	*mock.Call
}

// PostInit is a helper method to define mock.On call
//   - allComponents AllComponents
func (_e *MockPluginManager_Expecter) PostInit(allComponents interface{}) *MockPluginManager_PostInit_Call {
	return &MockPluginManager_PostInit_Call{Call: _e.mock.On("PostInit", allComponents)}
}

func (_c *MockPluginManager_PostInit_Call) Run(run func(allComponents AllComponents)) *MockPluginManager_PostInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 AllComponents
		if args[0] != nil {
			arg0 = args[0].(AllComponents)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPluginManager_PostInit_Call) Return(err error) *MockPluginManager_PostInit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPluginManager_PostInit_Call) RunAndReturn(run func(allComponents AllComponents) error) *MockPluginManager_PostInit_Call {
	_c.Call.Return(run)
	return _c
}

// PreInit provides a mock function for the type MockPluginManager
func (_mock *MockPluginManager) PreInit(preInitComponents PreInitComponents) (*ManagerInitResult, error) {
	ret := _mock.Called(preInitComponents)

	if len(ret) == 0 {
		panic("no return value specified for PreInit")
	}

	var r0 *ManagerInitResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(PreInitComponents) (*ManagerInitResult, error)); ok {
		return returnFunc(preInitComponents)
	}
	if returnFunc, ok := ret.Get(0).(func(PreInitComponents) *ManagerInitResult); ok {
		r0 = returnFunc(preInitComponents)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ManagerInitResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(PreInitComponents) error); ok {
		r1 = returnFunc(preInitComponents)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPluginManager_PreInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreInit'
type MockPluginManager_PreInit_Call struct {
	*mock.Call
}

// PreInit is a helper method to define mock.On call
//   - preInitComponents PreInitComponents
func (_e *MockPluginManager_Expecter) PreInit(preInitComponents interface{}) *MockPluginManager_PreInit_Call {
	return &MockPluginManager_PreInit_Call{Call: _e.mock.On("PreInit", preInitComponents)}
}

func (_c *MockPluginManager_PreInit_Call) Run(run func(preInitComponents PreInitComponents)) *MockPluginManager_PreInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 PreInitComponents
		if args[0] != nil {
			arg0 = args[0].(PreInitComponents)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPluginManager_PreInit_Call) Return(managerInitResult *ManagerInitResult, err error) *MockPluginManager_PreInit_Call {
	_c.Call.Return(managerInitResult, err)
	return _c
}

func (_c *MockPluginManager_PreInit_Call) RunAndReturn(run func(preInitComponents PreInitComponents) (*ManagerInitResult, error)) *MockPluginManager_PreInit_Call {
	_c.Call.Return(run)
	return _c
}

// ReloadPluginList provides a mock function for the type MockPluginManager
func (_mock *MockPluginManager) ReloadPluginList() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReloadPluginList")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPluginManager_ReloadPluginList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReloadPluginList'
type MockPluginManager_ReloadPluginList_Call struct {
	*mock.Call
}

// ReloadPluginList is a helper method to define mock.On call
func (_e *MockPluginManager_Expecter) ReloadPluginList() *MockPluginManager_ReloadPluginList_Call {
	return &MockPluginManager_ReloadPluginList_Call{Call: _e.mock.On("ReloadPluginList")}
}

func (_c *MockPluginManager_ReloadPluginList_Call) Run(run func()) *MockPluginManager_ReloadPluginList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPluginManager_ReloadPluginList_Call) Return(err error) *MockPluginManager_ReloadPluginList_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPluginManager_ReloadPluginList_Call) RunAndReturn(run func() error) *MockPluginManager_ReloadPluginList_Call {
	_c.Call.Return(run)
	return _c
}

// SendSystemCommandToLoader provides a mock function for the type MockPluginManager
func (_mock *MockPluginManager) SendSystemCommandToLoader(cmd prototk.PluginLoad_SysCommand) {
	_mock.Called(cmd)
	return
}

// MockPluginManager_SendSystemCommandToLoader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendSystemCommandToLoader'
type MockPluginManager_SendSystemCommandToLoader_Call struct {
	*mock.Call
}

// SendSystemCommandToLoader is a helper method to define mock.On call
//   - cmd prototk.PluginLoad_SysCommand
func (_e *MockPluginManager_Expecter) SendSystemCommandToLoader(cmd interface{}) *MockPluginManager_SendSystemCommandToLoader_Call {
	return &MockPluginManager_SendSystemCommandToLoader_Call{Call: _e.mock.On("SendSystemCommandToLoader", cmd)}
}

func (_c *MockPluginManager_SendSystemCommandToLoader_Call) Run(run func(cmd prototk.PluginLoad_SysCommand)) *MockPluginManager_SendSystemCommandToLoader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 prototk.PluginLoad_SysCommand
		if args[0] != nil {
			arg0 = args[0].(prototk.PluginLoad_SysCommand)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPluginManager_SendSystemCommandToLoader_Call) Return() *MockPluginManager_SendSystemCommandToLoader_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPluginManager_SendSystemCommandToLoader_Call) RunAndReturn(run func(cmd prototk.PluginLoad_SysCommand)) *MockPluginManager_SendSystemCommandToLoader_Call {
	_c.Run(run)
	return _c
}

// Start provides a mock function for the type MockPluginManager
func (_mock *MockPluginManager) Start() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPluginManager_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockPluginManager_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockPluginManager_Expecter) Start() *MockPluginManager_Start_Call {
	return &MockPluginManager_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockPluginManager_Start_Call) Run(run func()) *MockPluginManager_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPluginManager_Start_Call) Return(err error) *MockPluginManager_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPluginManager_Start_Call) RunAndReturn(run func() error) *MockPluginManager_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockPluginManager
func (_mock *MockPluginManager) Stop() {
	_mock.Called()
	return
}

// MockPluginManager_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockPluginManager_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockPluginManager_Expecter) Stop() *MockPluginManager_Stop_Call {
	return &MockPluginManager_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockPluginManager_Stop_Call) Run(run func()) *MockPluginManager_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPluginManager_Stop_Call) Return() *MockPluginManager_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPluginManager_Stop_Call) RunAndReturn(run func()) *MockPluginManager_Stop_Call {
	_c.Run(run)
	return _c
}

// WaitForInit provides a mock function for the type MockPluginManager
func (_mock *MockPluginManager) WaitForInit(ctx context.Context, pluginType prototk.PluginInfo_PluginType) error {
	ret := _mock.Called(ctx, pluginType)

	if len(ret) == 0 {
		panic("no return value specified for WaitForInit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, prototk.PluginInfo_PluginType) error); ok {
		r0 = returnFunc(ctx, pluginType)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPluginManager_WaitForInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForInit'
type MockPluginManager_WaitForInit_Call struct {
	*mock.Call
}

// WaitForInit is a helper method to define mock.On call
//   - ctx context.Context
//   - pluginType prototk.PluginInfo_PluginType
func (_e *MockPluginManager_Expecter) WaitForInit(ctx interface{}, pluginType interface{}) *MockPluginManager_WaitForInit_Call {
	return &MockPluginManager_WaitForInit_Call{Call: _e.mock.On("WaitForInit", ctx, pluginType)}
}

func (_c *MockPluginManager_WaitForInit_Call) Run(run func(ctx context.Context, pluginType prototk.PluginInfo_PluginType)) *MockPluginManager_WaitForInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 prototk.PluginInfo_PluginType
		if args[1] != nil {
			arg1 = args[1].(prototk.PluginInfo_PluginType)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPluginManager_WaitForInit_Call) Return(err error) *MockPluginManager_WaitForInit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPluginManager_WaitForInit_Call) RunAndReturn(run func(ctx context.Context, pluginType prototk.PluginInfo_PluginType) error) *MockPluginManager_WaitForInit_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPrivateTxEvent creates a new instance of MockPrivateTxEvent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPrivateTxEvent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPrivateTxEvent {
	mock := &MockPrivateTxEvent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPrivateTxEvent is an autogenerated mock type for the PrivateTxEvent type
type MockPrivateTxEvent struct {
	mock.Mock
}

type MockPrivateTxEvent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPrivateTxEvent) EXPECT() *MockPrivateTxEvent_Expecter {
	return &MockPrivateTxEvent_Expecter{mock: &_m.Mock}
}

// NewMockPrivateTxManager creates a new instance of MockPrivateTxManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPrivateTxManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPrivateTxManager {
	mock := &MockPrivateTxManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPrivateTxManager is an autogenerated mock type for the PrivateTxManager type
type MockPrivateTxManager struct {
	mock.Mock
}

type MockPrivateTxManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPrivateTxManager) EXPECT() *MockPrivateTxManager_Expecter {
	return &MockPrivateTxManager_Expecter{mock: &_m.Mock}
}

// BuildNullifier provides a mock function for the type MockPrivateTxManager
func (_mock *MockPrivateTxManager) BuildNullifier(ctx context.Context, kr KeyResolver, s *StateDistributionWithData) (*NullifierUpsert, error) {
	ret := _mock.Called(ctx, kr, s)

	if len(ret) == 0 {
		panic("no return value specified for BuildNullifier")
	}

	var r0 *NullifierUpsert
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, KeyResolver, *StateDistributionWithData) (*NullifierUpsert, error)); ok {
		return returnFunc(ctx, kr, s)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, KeyResolver, *StateDistributionWithData) *NullifierUpsert); ok {
		r0 = returnFunc(ctx, kr, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*NullifierUpsert)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, KeyResolver, *StateDistributionWithData) error); ok {
		r1 = returnFunc(ctx, kr, s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPrivateTxManager_BuildNullifier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildNullifier'
type MockPrivateTxManager_BuildNullifier_Call struct {
	*mock.Call
}

// BuildNullifier is a helper method to define mock.On call
//   - ctx context.Context
//   - kr KeyResolver
//   - s *StateDistributionWithData
func (_e *MockPrivateTxManager_Expecter) BuildNullifier(ctx interface{}, kr interface{}, s interface{}) *MockPrivateTxManager_BuildNullifier_Call {
	return &MockPrivateTxManager_BuildNullifier_Call{Call: _e.mock.On("BuildNullifier", ctx, kr, s)}
}

func (_c *MockPrivateTxManager_BuildNullifier_Call) Run(run func(ctx context.Context, kr KeyResolver, s *StateDistributionWithData)) *MockPrivateTxManager_BuildNullifier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 KeyResolver
		if args[1] != nil {
			arg1 = args[1].(KeyResolver)
		}
		var arg2 *StateDistributionWithData
		if args[2] != nil {
			arg2 = args[2].(*StateDistributionWithData)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPrivateTxManager_BuildNullifier_Call) Return(nullifierUpsert *NullifierUpsert, err error) *MockPrivateTxManager_BuildNullifier_Call {
	_c.Call.Return(nullifierUpsert, err)
	return _c
}

func (_c *MockPrivateTxManager_BuildNullifier_Call) RunAndReturn(run func(ctx context.Context, kr KeyResolver, s *StateDistributionWithData) (*NullifierUpsert, error)) *MockPrivateTxManager_BuildNullifier_Call {
	_c.Call.Return(run)
	return _c
}

// BuildNullifiers provides a mock function for the type MockPrivateTxManager
func (_mock *MockPrivateTxManager) BuildNullifiers(ctx context.Context, distributions []*StateDistributionWithData) ([]*NullifierUpsert, error) {
	ret := _mock.Called(ctx, distributions)

	if len(ret) == 0 {
		panic("no return value specified for BuildNullifiers")
	}

	var r0 []*NullifierUpsert
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*StateDistributionWithData) ([]*NullifierUpsert, error)); ok {
		return returnFunc(ctx, distributions)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*StateDistributionWithData) []*NullifierUpsert); ok {
		r0 = returnFunc(ctx, distributions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*NullifierUpsert)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*StateDistributionWithData) error); ok {
		r1 = returnFunc(ctx, distributions)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPrivateTxManager_BuildNullifiers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildNullifiers'
type MockPrivateTxManager_BuildNullifiers_Call struct {
	*mock.Call
}

// BuildNullifiers is a helper method to define mock.On call
//   - ctx context.Context
//   - distributions []*StateDistributionWithData
func (_e *MockPrivateTxManager_Expecter) BuildNullifiers(ctx interface{}, distributions interface{}) *MockPrivateTxManager_BuildNullifiers_Call {
	return &MockPrivateTxManager_BuildNullifiers_Call{Call: _e.mock.On("BuildNullifiers", ctx, distributions)}
}

func (_c *MockPrivateTxManager_BuildNullifiers_Call) Run(run func(ctx context.Context, distributions []*StateDistributionWithData)) *MockPrivateTxManager_BuildNullifiers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*StateDistributionWithData
		if args[1] != nil {
			arg1 = args[1].([]*StateDistributionWithData)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPrivateTxManager_BuildNullifiers_Call) Return(nullifiers []*NullifierUpsert, err error) *MockPrivateTxManager_BuildNullifiers_Call {
	_c.Call.Return(nullifiers, err)
	return _c
}

func (_c *MockPrivateTxManager_BuildNullifiers_Call) RunAndReturn(run func(ctx context.Context, distributions []*StateDistributionWithData) ([]*NullifierUpsert, error)) *MockPrivateTxManager_BuildNullifiers_Call {
	_c.Call.Return(run)
	return _c
}

// BuildStateDistributions provides a mock function for the type MockPrivateTxManager
func (_mock *MockPrivateTxManager) BuildStateDistributions(ctx context.Context, tx *PrivateTransaction) (*StateDistributionSet, error) {
	ret := _mock.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for BuildStateDistributions")
	}

	var r0 *StateDistributionSet
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *PrivateTransaction) (*StateDistributionSet, error)); ok {
		return returnFunc(ctx, tx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *PrivateTransaction) *StateDistributionSet); ok {
		r0 = returnFunc(ctx, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StateDistributionSet)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *PrivateTransaction) error); ok {
		r1 = returnFunc(ctx, tx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPrivateTxManager_BuildStateDistributions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildStateDistributions'
type MockPrivateTxManager_BuildStateDistributions_Call struct {
	*mock.Call
}

// BuildStateDistributions is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *PrivateTransaction
func (_e *MockPrivateTxManager_Expecter) BuildStateDistributions(ctx interface{}, tx interface{}) *MockPrivateTxManager_BuildStateDistributions_Call {
	return &MockPrivateTxManager_BuildStateDistributions_Call{Call: _e.mock.On("BuildStateDistributions", ctx, tx)}
}

func (_c *MockPrivateTxManager_BuildStateDistributions_Call) Run(run func(ctx context.Context, tx *PrivateTransaction)) *MockPrivateTxManager_BuildStateDistributions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *PrivateTransaction
		if args[1] != nil {
			arg1 = args[1].(*PrivateTransaction)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPrivateTxManager_BuildStateDistributions_Call) Return(stateDistributionSet *StateDistributionSet, err error) *MockPrivateTxManager_BuildStateDistributions_Call {
	_c.Call.Return(stateDistributionSet, err)
	return _c
}

func (_c *MockPrivateTxManager_BuildStateDistributions_Call) RunAndReturn(run func(ctx context.Context, tx *PrivateTransaction) (*StateDistributionSet, error)) *MockPrivateTxManager_BuildStateDistributions_Call {
	_c.Call.Return(run)
	return _c
}

// CallPrivateSmartContract provides a mock function for the type MockPrivateTxManager
func (_mock *MockPrivateTxManager) CallPrivateSmartContract(ctx context.Context, call *ResolvedTransaction) (*abi.ComponentValue, error) {
	ret := _mock.Called(ctx, call)

	if len(ret) == 0 {
		panic("no return value specified for CallPrivateSmartContract")
	}

	var r0 *abi.ComponentValue
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ResolvedTransaction) (*abi.ComponentValue, error)); ok {
		return returnFunc(ctx, call)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ResolvedTransaction) *abi.ComponentValue); ok {
		r0 = returnFunc(ctx, call)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abi.ComponentValue)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ResolvedTransaction) error); ok {
		r1 = returnFunc(ctx, call)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPrivateTxManager_CallPrivateSmartContract_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallPrivateSmartContract'
type MockPrivateTxManager_CallPrivateSmartContract_Call struct {
	*mock.Call
}

// CallPrivateSmartContract is a helper method to define mock.On call
//   - ctx context.Context
//   - call *ResolvedTransaction
func (_e *MockPrivateTxManager_Expecter) CallPrivateSmartContract(ctx interface{}, call interface{}) *MockPrivateTxManager_CallPrivateSmartContract_Call {
	return &MockPrivateTxManager_CallPrivateSmartContract_Call{Call: _e.mock.On("CallPrivateSmartContract", ctx, call)}
}

func (_c *MockPrivateTxManager_CallPrivateSmartContract_Call) Run(run func(ctx context.Context, call *ResolvedTransaction)) *MockPrivateTxManager_CallPrivateSmartContract_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ResolvedTransaction
		if args[1] != nil {
			arg1 = args[1].(*ResolvedTransaction)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPrivateTxManager_CallPrivateSmartContract_Call) Return(componentValue *abi.ComponentValue, err error) *MockPrivateTxManager_CallPrivateSmartContract_Call {
	_c.Call.Return(componentValue, err)
	return _c
}

func (_c *MockPrivateTxManager_CallPrivateSmartContract_Call) RunAndReturn(run func(ctx context.Context, call *ResolvedTransaction) (*abi.ComponentValue, error)) *MockPrivateTxManager_CallPrivateSmartContract_Call {
	_c.Call.Return(run)
	return _c
}

// GetTxStatus provides a mock function for the type MockPrivateTxManager
func (_mock *MockPrivateTxManager) GetTxStatus(ctx context.Context, domainAddress string, txID uuid.UUID) (PrivateTxStatus, error) {
	ret := _mock.Called(ctx, domainAddress, txID)

	if len(ret) == 0 {
		panic("no return value specified for GetTxStatus")
	}

	var r0 PrivateTxStatus
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uuid.UUID) (PrivateTxStatus, error)); ok {
		return returnFunc(ctx, domainAddress, txID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uuid.UUID) PrivateTxStatus); ok {
		r0 = returnFunc(ctx, domainAddress, txID)
	} else {
		r0 = ret.Get(0).(PrivateTxStatus)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, domainAddress, txID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPrivateTxManager_GetTxStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTxStatus'
type MockPrivateTxManager_GetTxStatus_Call struct {
	*mock.Call
}

// GetTxStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - domainAddress string
//   - txID uuid.UUID
func (_e *MockPrivateTxManager_Expecter) GetTxStatus(ctx interface{}, domainAddress interface{}, txID interface{}) *MockPrivateTxManager_GetTxStatus_Call {
	return &MockPrivateTxManager_GetTxStatus_Call{Call: _e.mock.On("GetTxStatus", ctx, domainAddress, txID)}
}

func (_c *MockPrivateTxManager_GetTxStatus_Call) Run(run func(ctx context.Context, domainAddress string, txID uuid.UUID)) *MockPrivateTxManager_GetTxStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPrivateTxManager_GetTxStatus_Call) Return(status PrivateTxStatus, err error) *MockPrivateTxManager_GetTxStatus_Call {
	_c.Call.Return(status, err)
	return _c
}

func (_c *MockPrivateTxManager_GetTxStatus_Call) RunAndReturn(run func(ctx context.Context, domainAddress string, txID uuid.UUID) (PrivateTxStatus, error)) *MockPrivateTxManager_GetTxStatus_Call {
	_c.Call.Return(run)
	return _c
}

// HandleNewTx provides a mock function for the type MockPrivateTxManager
func (_mock *MockPrivateTxManager) HandleNewTx(ctx context.Context, dbTX persistence.DBTX, tx *ValidatedTransaction) error {
	ret := _mock.Called(ctx, dbTX, tx)

	if len(ret) == 0 {
		panic("no return value specified for HandleNewTx")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, *ValidatedTransaction) error); ok {
		r0 = returnFunc(ctx, dbTX, tx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPrivateTxManager_HandleNewTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleNewTx'
type MockPrivateTxManager_HandleNewTx_Call struct {
	*mock.Call
}

// HandleNewTx is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - tx *ValidatedTransaction
func (_e *MockPrivateTxManager_Expecter) HandleNewTx(ctx interface{}, dbTX interface{}, tx interface{}) *MockPrivateTxManager_HandleNewTx_Call {
	return &MockPrivateTxManager_HandleNewTx_Call{Call: _e.mock.On("HandleNewTx", ctx, dbTX, tx)}
}

func (_c *MockPrivateTxManager_HandleNewTx_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, tx *ValidatedTransaction)) *MockPrivateTxManager_HandleNewTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 *ValidatedTransaction
		if args[2] != nil {
			arg2 = args[2].(*ValidatedTransaction)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPrivateTxManager_HandleNewTx_Call) Return(err error) *MockPrivateTxManager_HandleNewTx_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPrivateTxManager_HandleNewTx_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, tx *ValidatedTransaction) error) *MockPrivateTxManager_HandleNewTx_Call {
	_c.Call.Return(run)
	return _c
}

// HandlePaladinMsg provides a mock function for the type MockPrivateTxManager
func (_mock *MockPrivateTxManager) HandlePaladinMsg(ctx context.Context, msg *ReceivedMessage) {
	_mock.Called(ctx, msg)
	return
}

// MockPrivateTxManager_HandlePaladinMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandlePaladinMsg'
type MockPrivateTxManager_HandlePaladinMsg_Call struct {
	*mock.Call
}

// HandlePaladinMsg is a helper method to define mock.On call
//   - ctx context.Context
//   - msg *ReceivedMessage
func (_e *MockPrivateTxManager_Expecter) HandlePaladinMsg(ctx interface{}, msg interface{}) *MockPrivateTxManager_HandlePaladinMsg_Call {
	return &MockPrivateTxManager_HandlePaladinMsg_Call{Call: _e.mock.On("HandlePaladinMsg", ctx, msg)}
}

func (_c *MockPrivateTxManager_HandlePaladinMsg_Call) Run(run func(ctx context.Context, msg *ReceivedMessage)) *MockPrivateTxManager_HandlePaladinMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ReceivedMessage
		if args[1] != nil {
			arg1 = args[1].(*ReceivedMessage)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPrivateTxManager_HandlePaladinMsg_Call) Return() *MockPrivateTxManager_HandlePaladinMsg_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPrivateTxManager_HandlePaladinMsg_Call) RunAndReturn(run func(ctx context.Context, msg *ReceivedMessage)) *MockPrivateTxManager_HandlePaladinMsg_Call {
	_c.Run(run)
	return _c
}

// NotifyFailedPublicTx provides a mock function for the type MockPrivateTxManager
func (_mock *MockPrivateTxManager) NotifyFailedPublicTx(ctx context.Context, dbTX persistence.DBTX, confirms []*PublicTxMatch) error {
	ret := _mock.Called(ctx, dbTX, confirms)

	if len(ret) == 0 {
		panic("no return value specified for NotifyFailedPublicTx")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, []*PublicTxMatch) error); ok {
		r0 = returnFunc(ctx, dbTX, confirms)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPrivateTxManager_NotifyFailedPublicTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyFailedPublicTx'
type MockPrivateTxManager_NotifyFailedPublicTx_Call struct {
	*mock.Call
}

// NotifyFailedPublicTx is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - confirms []*PublicTxMatch
func (_e *MockPrivateTxManager_Expecter) NotifyFailedPublicTx(ctx interface{}, dbTX interface{}, confirms interface{}) *MockPrivateTxManager_NotifyFailedPublicTx_Call {
	return &MockPrivateTxManager_NotifyFailedPublicTx_Call{Call: _e.mock.On("NotifyFailedPublicTx", ctx, dbTX, confirms)}
}

func (_c *MockPrivateTxManager_NotifyFailedPublicTx_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, confirms []*PublicTxMatch)) *MockPrivateTxManager_NotifyFailedPublicTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 []*PublicTxMatch
		if args[2] != nil {
			arg2 = args[2].([]*PublicTxMatch)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPrivateTxManager_NotifyFailedPublicTx_Call) Return(err error) *MockPrivateTxManager_NotifyFailedPublicTx_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPrivateTxManager_NotifyFailedPublicTx_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, confirms []*PublicTxMatch) error) *MockPrivateTxManager_NotifyFailedPublicTx_Call {
	_c.Call.Return(run)
	return _c
}

// PostInit provides a mock function for the type MockPrivateTxManager
func (_mock *MockPrivateTxManager) PostInit(allComponents AllComponents) error {
	ret := _mock.Called(allComponents)

	if len(ret) == 0 {
		panic("no return value specified for PostInit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(AllComponents) error); ok {
		r0 = returnFunc(allComponents)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPrivateTxManager_PostInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostInit'
type MockPrivateTxManager_PostInit_Call struct {
	*mock.Call
}

// PostInit is a helper method to define mock.On call
//   - allComponents AllComponents
func (_e *MockPrivateTxManager_Expecter) PostInit(allComponents interface{}) *MockPrivateTxManager_PostInit_Call {
	return &MockPrivateTxManager_PostInit_Call{Call: _e.mock.On("PostInit", allComponents)}
}

func (_c *MockPrivateTxManager_PostInit_Call) Run(run func(allComponents AllComponents)) *MockPrivateTxManager_PostInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 AllComponents
		if args[0] != nil {
			arg0 = args[0].(AllComponents)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPrivateTxManager_PostInit_Call) Return(err error) *MockPrivateTxManager_PostInit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPrivateTxManager_PostInit_Call) RunAndReturn(run func(allComponents AllComponents) error) *MockPrivateTxManager_PostInit_Call {
	_c.Call.Return(run)
	return _c
}

// PreInit provides a mock function for the type MockPrivateTxManager
func (_mock *MockPrivateTxManager) PreInit(preInitComponents PreInitComponents) (*ManagerInitResult, error) {
	ret := _mock.Called(preInitComponents)

	if len(ret) == 0 {
		panic("no return value specified for PreInit")
	}

	var r0 *ManagerInitResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(PreInitComponents) (*ManagerInitResult, error)); ok {
		return returnFunc(preInitComponents)
	}
	if returnFunc, ok := ret.Get(0).(func(PreInitComponents) *ManagerInitResult); ok {
		r0 = returnFunc(preInitComponents)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ManagerInitResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(PreInitComponents) error); ok {
		r1 = returnFunc(preInitComponents)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPrivateTxManager_PreInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreInit'
type MockPrivateTxManager_PreInit_Call struct {
	*mock.Call
}

// PreInit is a helper method to define mock.On call
//   - preInitComponents PreInitComponents
func (_e *MockPrivateTxManager_Expecter) PreInit(preInitComponents interface{}) *MockPrivateTxManager_PreInit_Call {
	return &MockPrivateTxManager_PreInit_Call{Call: _e.mock.On("PreInit", preInitComponents)}
}

func (_c *MockPrivateTxManager_PreInit_Call) Run(run func(preInitComponents PreInitComponents)) *MockPrivateTxManager_PreInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 PreInitComponents
		if args[0] != nil {
			arg0 = args[0].(PreInitComponents)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPrivateTxManager_PreInit_Call) Return(managerInitResult *ManagerInitResult, err error) *MockPrivateTxManager_PreInit_Call {
	_c.Call.Return(managerInitResult, err)
	return _c
}

func (_c *MockPrivateTxManager_PreInit_Call) RunAndReturn(run func(preInitComponents PreInitComponents) (*ManagerInitResult, error)) *MockPrivateTxManager_PreInit_Call {
	_c.Call.Return(run)
	return _c
}

// PrivateTransactionConfirmed provides a mock function for the type MockPrivateTxManager
func (_mock *MockPrivateTxManager) PrivateTransactionConfirmed(ctx context.Context, receipt *TxCompletion) {
	_mock.Called(ctx, receipt)
	return
}

// MockPrivateTxManager_PrivateTransactionConfirmed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrivateTransactionConfirmed'
type MockPrivateTxManager_PrivateTransactionConfirmed_Call struct {
	*mock.Call
}

// PrivateTransactionConfirmed is a helper method to define mock.On call
//   - ctx context.Context
//   - receipt *TxCompletion
func (_e *MockPrivateTxManager_Expecter) PrivateTransactionConfirmed(ctx interface{}, receipt interface{}) *MockPrivateTxManager_PrivateTransactionConfirmed_Call {
	return &MockPrivateTxManager_PrivateTransactionConfirmed_Call{Call: _e.mock.On("PrivateTransactionConfirmed", ctx, receipt)}
}

func (_c *MockPrivateTxManager_PrivateTransactionConfirmed_Call) Run(run func(ctx context.Context, receipt *TxCompletion)) *MockPrivateTxManager_PrivateTransactionConfirmed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *TxCompletion
		if args[1] != nil {
			arg1 = args[1].(*TxCompletion)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPrivateTxManager_PrivateTransactionConfirmed_Call) Return() *MockPrivateTxManager_PrivateTransactionConfirmed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPrivateTxManager_PrivateTransactionConfirmed_Call) RunAndReturn(run func(ctx context.Context, receipt *TxCompletion)) *MockPrivateTxManager_PrivateTransactionConfirmed_Call {
	_c.Run(run)
	return _c
}

// Start provides a mock function for the type MockPrivateTxManager
func (_mock *MockPrivateTxManager) Start() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPrivateTxManager_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockPrivateTxManager_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockPrivateTxManager_Expecter) Start() *MockPrivateTxManager_Start_Call {
	return &MockPrivateTxManager_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockPrivateTxManager_Start_Call) Run(run func()) *MockPrivateTxManager_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPrivateTxManager_Start_Call) Return(err error) *MockPrivateTxManager_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPrivateTxManager_Start_Call) RunAndReturn(run func() error) *MockPrivateTxManager_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockPrivateTxManager
func (_mock *MockPrivateTxManager) Stop() {
	_mock.Called()
	return
}

// MockPrivateTxManager_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockPrivateTxManager_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockPrivateTxManager_Expecter) Stop() *MockPrivateTxManager_Stop_Call {
	return &MockPrivateTxManager_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockPrivateTxManager_Stop_Call) Run(run func()) *MockPrivateTxManager_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPrivateTxManager_Stop_Call) Return() *MockPrivateTxManager_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPrivateTxManager_Stop_Call) RunAndReturn(run func()) *MockPrivateTxManager_Stop_Call {
	_c.Run(run)
	return _c
}

// Subscribe provides a mock function for the type MockPrivateTxManager
func (_mock *MockPrivateTxManager) Subscribe(ctx context.Context, subscriber PrivateTxEventSubscriber) {
	_mock.Called(ctx, subscriber)
	return
}

// MockPrivateTxManager_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockPrivateTxManager_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - subscriber PrivateTxEventSubscriber
func (_e *MockPrivateTxManager_Expecter) Subscribe(ctx interface{}, subscriber interface{}) *MockPrivateTxManager_Subscribe_Call {
	return &MockPrivateTxManager_Subscribe_Call{Call: _e.mock.On("Subscribe", ctx, subscriber)}
}

func (_c *MockPrivateTxManager_Subscribe_Call) Run(run func(ctx context.Context, subscriber PrivateTxEventSubscriber)) *MockPrivateTxManager_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 PrivateTxEventSubscriber
		if args[1] != nil {
			arg1 = args[1].(PrivateTxEventSubscriber)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPrivateTxManager_Subscribe_Call) Return() *MockPrivateTxManager_Subscribe_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPrivateTxManager_Subscribe_Call) RunAndReturn(run func(ctx context.Context, subscriber PrivateTxEventSubscriber)) *MockPrivateTxManager_Subscribe_Call {
	_c.Run(run)
	return _c
}

// NewMockPublicTxManager creates a new instance of MockPublicTxManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPublicTxManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPublicTxManager {
	mock := &MockPublicTxManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPublicTxManager is an autogenerated mock type for the PublicTxManager type
type MockPublicTxManager struct {
	mock.Mock
}

type MockPublicTxManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPublicTxManager) EXPECT() *MockPublicTxManager_Expecter {
	return &MockPublicTxManager_Expecter{mock: &_m.Mock}
}

// GetPublicTransactionForHash provides a mock function for the type MockPublicTxManager
func (_mock *MockPublicTxManager) GetPublicTransactionForHash(ctx context.Context, dbTX persistence.DBTX, hash pldtypes.Bytes32) (*pldapi.PublicTxWithBinding, error) {
	ret := _mock.Called(ctx, dbTX, hash)

	if len(ret) == 0 {
		panic("no return value specified for GetPublicTransactionForHash")
	}

	var r0 *pldapi.PublicTxWithBinding
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, pldtypes.Bytes32) (*pldapi.PublicTxWithBinding, error)); ok {
		return returnFunc(ctx, dbTX, hash)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, pldtypes.Bytes32) *pldapi.PublicTxWithBinding); ok {
		r0 = returnFunc(ctx, dbTX, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.PublicTxWithBinding)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, pldtypes.Bytes32) error); ok {
		r1 = returnFunc(ctx, dbTX, hash)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPublicTxManager_GetPublicTransactionForHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublicTransactionForHash'
type MockPublicTxManager_GetPublicTransactionForHash_Call struct {
	*mock.Call
}

// GetPublicTransactionForHash is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - hash pldtypes.Bytes32
func (_e *MockPublicTxManager_Expecter) GetPublicTransactionForHash(ctx interface{}, dbTX interface{}, hash interface{}) *MockPublicTxManager_GetPublicTransactionForHash_Call {
	return &MockPublicTxManager_GetPublicTransactionForHash_Call{Call: _e.mock.On("GetPublicTransactionForHash", ctx, dbTX, hash)}
}

func (_c *MockPublicTxManager_GetPublicTransactionForHash_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, hash pldtypes.Bytes32)) *MockPublicTxManager_GetPublicTransactionForHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 pldtypes.Bytes32
		if args[2] != nil {
			arg2 = args[2].(pldtypes.Bytes32)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPublicTxManager_GetPublicTransactionForHash_Call) Return(publicTxWithBinding *pldapi.PublicTxWithBinding, err error) *MockPublicTxManager_GetPublicTransactionForHash_Call {
	_c.Call.Return(publicTxWithBinding, err)
	return _c
}

func (_c *MockPublicTxManager_GetPublicTransactionForHash_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, hash pldtypes.Bytes32) (*pldapi.PublicTxWithBinding, error)) *MockPublicTxManager_GetPublicTransactionForHash_Call {
	_c.Call.Return(run)
	return _c
}

// MatchUpdateConfirmedTransactions provides a mock function for the type MockPublicTxManager
func (_mock *MockPublicTxManager) MatchUpdateConfirmedTransactions(ctx context.Context, dbTX persistence.DBTX, itxs []*blockindexer.IndexedTransactionNotify) ([]*PublicTxMatch, error) {
	ret := _mock.Called(ctx, dbTX, itxs)

	if len(ret) == 0 {
		panic("no return value specified for MatchUpdateConfirmedTransactions")
	}

	var r0 []*PublicTxMatch
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, []*blockindexer.IndexedTransactionNotify) ([]*PublicTxMatch, error)); ok {
		return returnFunc(ctx, dbTX, itxs)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, []*blockindexer.IndexedTransactionNotify) []*PublicTxMatch); ok {
		r0 = returnFunc(ctx, dbTX, itxs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*PublicTxMatch)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, []*blockindexer.IndexedTransactionNotify) error); ok {
		r1 = returnFunc(ctx, dbTX, itxs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPublicTxManager_MatchUpdateConfirmedTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MatchUpdateConfirmedTransactions'
type MockPublicTxManager_MatchUpdateConfirmedTransactions_Call struct {
	*mock.Call
}

// MatchUpdateConfirmedTransactions is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - itxs []*blockindexer.IndexedTransactionNotify
func (_e *MockPublicTxManager_Expecter) MatchUpdateConfirmedTransactions(ctx interface{}, dbTX interface{}, itxs interface{}) *MockPublicTxManager_MatchUpdateConfirmedTransactions_Call {
	return &MockPublicTxManager_MatchUpdateConfirmedTransactions_Call{Call: _e.mock.On("MatchUpdateConfirmedTransactions", ctx, dbTX, itxs)}
}

func (_c *MockPublicTxManager_MatchUpdateConfirmedTransactions_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, itxs []*blockindexer.IndexedTransactionNotify)) *MockPublicTxManager_MatchUpdateConfirmedTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 []*blockindexer.IndexedTransactionNotify
		if args[2] != nil {
			arg2 = args[2].([]*blockindexer.IndexedTransactionNotify)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPublicTxManager_MatchUpdateConfirmedTransactions_Call) Return(publicTxMatchs []*PublicTxMatch, err error) *MockPublicTxManager_MatchUpdateConfirmedTransactions_Call {
	_c.Call.Return(publicTxMatchs, err)
	return _c
}

func (_c *MockPublicTxManager_MatchUpdateConfirmedTransactions_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, itxs []*blockindexer.IndexedTransactionNotify) ([]*PublicTxMatch, error)) *MockPublicTxManager_MatchUpdateConfirmedTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyConfirmPersisted provides a mock function for the type MockPublicTxManager
func (_mock *MockPublicTxManager) NotifyConfirmPersisted(ctx context.Context, confirms []*PublicTxMatch) {
	_mock.Called(ctx, confirms)
	return
}

// MockPublicTxManager_NotifyConfirmPersisted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyConfirmPersisted'
type MockPublicTxManager_NotifyConfirmPersisted_Call struct {
	*mock.Call
}

// NotifyConfirmPersisted is a helper method to define mock.On call
//   - ctx context.Context
//   - confirms []*PublicTxMatch
func (_e *MockPublicTxManager_Expecter) NotifyConfirmPersisted(ctx interface{}, confirms interface{}) *MockPublicTxManager_NotifyConfirmPersisted_Call {
	return &MockPublicTxManager_NotifyConfirmPersisted_Call{Call: _e.mock.On("NotifyConfirmPersisted", ctx, confirms)}
}

func (_c *MockPublicTxManager_NotifyConfirmPersisted_Call) Run(run func(ctx context.Context, confirms []*PublicTxMatch)) *MockPublicTxManager_NotifyConfirmPersisted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*PublicTxMatch
		if args[1] != nil {
			arg1 = args[1].([]*PublicTxMatch)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPublicTxManager_NotifyConfirmPersisted_Call) Return() *MockPublicTxManager_NotifyConfirmPersisted_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPublicTxManager_NotifyConfirmPersisted_Call) RunAndReturn(run func(ctx context.Context, confirms []*PublicTxMatch)) *MockPublicTxManager_NotifyConfirmPersisted_Call {
	_c.Run(run)
	return _c
}

// PostInit provides a mock function for the type MockPublicTxManager
func (_mock *MockPublicTxManager) PostInit(allComponents AllComponents) error {
	ret := _mock.Called(allComponents)

	if len(ret) == 0 {
		panic("no return value specified for PostInit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(AllComponents) error); ok {
		r0 = returnFunc(allComponents)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPublicTxManager_PostInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostInit'
type MockPublicTxManager_PostInit_Call struct {
	*mock.Call
}

// PostInit is a helper method to define mock.On call
//   - allComponents AllComponents
func (_e *MockPublicTxManager_Expecter) PostInit(allComponents interface{}) *MockPublicTxManager_PostInit_Call {
	return &MockPublicTxManager_PostInit_Call{Call: _e.mock.On("PostInit", allComponents)}
}

func (_c *MockPublicTxManager_PostInit_Call) Run(run func(allComponents AllComponents)) *MockPublicTxManager_PostInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 AllComponents
		if args[0] != nil {
			arg0 = args[0].(AllComponents)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPublicTxManager_PostInit_Call) Return(err error) *MockPublicTxManager_PostInit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPublicTxManager_PostInit_Call) RunAndReturn(run func(allComponents AllComponents) error) *MockPublicTxManager_PostInit_Call {
	_c.Call.Return(run)
	return _c
}

// PreInit provides a mock function for the type MockPublicTxManager
func (_mock *MockPublicTxManager) PreInit(preInitComponents PreInitComponents) (*ManagerInitResult, error) {
	ret := _mock.Called(preInitComponents)

	if len(ret) == 0 {
		panic("no return value specified for PreInit")
	}

	var r0 *ManagerInitResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(PreInitComponents) (*ManagerInitResult, error)); ok {
		return returnFunc(preInitComponents)
	}
	if returnFunc, ok := ret.Get(0).(func(PreInitComponents) *ManagerInitResult); ok {
		r0 = returnFunc(preInitComponents)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ManagerInitResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(PreInitComponents) error); ok {
		r1 = returnFunc(preInitComponents)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPublicTxManager_PreInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreInit'
type MockPublicTxManager_PreInit_Call struct {
	*mock.Call
}

// PreInit is a helper method to define mock.On call
//   - preInitComponents PreInitComponents
func (_e *MockPublicTxManager_Expecter) PreInit(preInitComponents interface{}) *MockPublicTxManager_PreInit_Call {
	return &MockPublicTxManager_PreInit_Call{Call: _e.mock.On("PreInit", preInitComponents)}
}

func (_c *MockPublicTxManager_PreInit_Call) Run(run func(preInitComponents PreInitComponents)) *MockPublicTxManager_PreInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 PreInitComponents
		if args[0] != nil {
			arg0 = args[0].(PreInitComponents)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPublicTxManager_PreInit_Call) Return(managerInitResult *ManagerInitResult, err error) *MockPublicTxManager_PreInit_Call {
	_c.Call.Return(managerInitResult, err)
	return _c
}

func (_c *MockPublicTxManager_PreInit_Call) RunAndReturn(run func(preInitComponents PreInitComponents) (*ManagerInitResult, error)) *MockPublicTxManager_PreInit_Call {
	_c.Call.Return(run)
	return _c
}

// QueryPublicTxForTransactions provides a mock function for the type MockPublicTxManager
func (_mock *MockPublicTxManager) QueryPublicTxForTransactions(ctx context.Context, dbTX persistence.DBTX, boundToTxns []uuid.UUID, jq *query.QueryJSON) (map[uuid.UUID][]*pldapi.PublicTx, error) {
	ret := _mock.Called(ctx, dbTX, boundToTxns, jq)

	if len(ret) == 0 {
		panic("no return value specified for QueryPublicTxForTransactions")
	}

	var r0 map[uuid.UUID][]*pldapi.PublicTx
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, []uuid.UUID, *query.QueryJSON) (map[uuid.UUID][]*pldapi.PublicTx, error)); ok {
		return returnFunc(ctx, dbTX, boundToTxns, jq)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, []uuid.UUID, *query.QueryJSON) map[uuid.UUID][]*pldapi.PublicTx); ok {
		r0 = returnFunc(ctx, dbTX, boundToTxns, jq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uuid.UUID][]*pldapi.PublicTx)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, []uuid.UUID, *query.QueryJSON) error); ok {
		r1 = returnFunc(ctx, dbTX, boundToTxns, jq)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPublicTxManager_QueryPublicTxForTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryPublicTxForTransactions'
type MockPublicTxManager_QueryPublicTxForTransactions_Call struct {
	*mock.Call
}

// QueryPublicTxForTransactions is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - boundToTxns []uuid.UUID
//   - jq *query.QueryJSON
func (_e *MockPublicTxManager_Expecter) QueryPublicTxForTransactions(ctx interface{}, dbTX interface{}, boundToTxns interface{}, jq interface{}) *MockPublicTxManager_QueryPublicTxForTransactions_Call {
	return &MockPublicTxManager_QueryPublicTxForTransactions_Call{Call: _e.mock.On("QueryPublicTxForTransactions", ctx, dbTX, boundToTxns, jq)}
}

func (_c *MockPublicTxManager_QueryPublicTxForTransactions_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, boundToTxns []uuid.UUID, jq *query.QueryJSON)) *MockPublicTxManager_QueryPublicTxForTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 []uuid.UUID
		if args[2] != nil {
			arg2 = args[2].([]uuid.UUID)
		}
		var arg3 *query.QueryJSON
		if args[3] != nil {
			arg3 = args[3].(*query.QueryJSON)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockPublicTxManager_QueryPublicTxForTransactions_Call) Return(uUIDToPublicTxs map[uuid.UUID][]*pldapi.PublicTx, err error) *MockPublicTxManager_QueryPublicTxForTransactions_Call {
	_c.Call.Return(uUIDToPublicTxs, err)
	return _c
}

func (_c *MockPublicTxManager_QueryPublicTxForTransactions_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, boundToTxns []uuid.UUID, jq *query.QueryJSON) (map[uuid.UUID][]*pldapi.PublicTx, error)) *MockPublicTxManager_QueryPublicTxForTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// QueryPublicTxWithBindings provides a mock function for the type MockPublicTxManager
func (_mock *MockPublicTxManager) QueryPublicTxWithBindings(ctx context.Context, dbTX persistence.DBTX, jq *query.QueryJSON) ([]*pldapi.PublicTxWithBinding, error) {
	ret := _mock.Called(ctx, dbTX, jq)

	if len(ret) == 0 {
		panic("no return value specified for QueryPublicTxWithBindings")
	}

	var r0 []*pldapi.PublicTxWithBinding
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, *query.QueryJSON) ([]*pldapi.PublicTxWithBinding, error)); ok {
		return returnFunc(ctx, dbTX, jq)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, *query.QueryJSON) []*pldapi.PublicTxWithBinding); ok {
		r0 = returnFunc(ctx, dbTX, jq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pldapi.PublicTxWithBinding)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, *query.QueryJSON) error); ok {
		r1 = returnFunc(ctx, dbTX, jq)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPublicTxManager_QueryPublicTxWithBindings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryPublicTxWithBindings'
type MockPublicTxManager_QueryPublicTxWithBindings_Call struct {
	*mock.Call
}

// QueryPublicTxWithBindings is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - jq *query.QueryJSON
func (_e *MockPublicTxManager_Expecter) QueryPublicTxWithBindings(ctx interface{}, dbTX interface{}, jq interface{}) *MockPublicTxManager_QueryPublicTxWithBindings_Call {
	return &MockPublicTxManager_QueryPublicTxWithBindings_Call{Call: _e.mock.On("QueryPublicTxWithBindings", ctx, dbTX, jq)}
}

func (_c *MockPublicTxManager_QueryPublicTxWithBindings_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, jq *query.QueryJSON)) *MockPublicTxManager_QueryPublicTxWithBindings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 *query.QueryJSON
		if args[2] != nil {
			arg2 = args[2].(*query.QueryJSON)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPublicTxManager_QueryPublicTxWithBindings_Call) Return(publicTxWithBindings []*pldapi.PublicTxWithBinding, err error) *MockPublicTxManager_QueryPublicTxWithBindings_Call {
	_c.Call.Return(publicTxWithBindings, err)
	return _c
}

func (_c *MockPublicTxManager_QueryPublicTxWithBindings_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, jq *query.QueryJSON) ([]*pldapi.PublicTxWithBinding, error)) *MockPublicTxManager_QueryPublicTxWithBindings_Call {
	_c.Call.Return(run)
	return _c
}

// SingleTransactionSubmit provides a mock function for the type MockPublicTxManager
func (_mock *MockPublicTxManager) SingleTransactionSubmit(ctx context.Context, transaction *PublicTxSubmission) (*pldapi.PublicTx, error) {
	ret := _mock.Called(ctx, transaction)

	if len(ret) == 0 {
		panic("no return value specified for SingleTransactionSubmit")
	}

	var r0 *pldapi.PublicTx
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *PublicTxSubmission) (*pldapi.PublicTx, error)); ok {
		return returnFunc(ctx, transaction)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *PublicTxSubmission) *pldapi.PublicTx); ok {
		r0 = returnFunc(ctx, transaction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.PublicTx)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *PublicTxSubmission) error); ok {
		r1 = returnFunc(ctx, transaction)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPublicTxManager_SingleTransactionSubmit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SingleTransactionSubmit'
type MockPublicTxManager_SingleTransactionSubmit_Call struct {
	*mock.Call
}

// SingleTransactionSubmit is a helper method to define mock.On call
//   - ctx context.Context
//   - transaction *PublicTxSubmission
func (_e *MockPublicTxManager_Expecter) SingleTransactionSubmit(ctx interface{}, transaction interface{}) *MockPublicTxManager_SingleTransactionSubmit_Call {
	return &MockPublicTxManager_SingleTransactionSubmit_Call{Call: _e.mock.On("SingleTransactionSubmit", ctx, transaction)}
}

func (_c *MockPublicTxManager_SingleTransactionSubmit_Call) Run(run func(ctx context.Context, transaction *PublicTxSubmission)) *MockPublicTxManager_SingleTransactionSubmit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *PublicTxSubmission
		if args[1] != nil {
			arg1 = args[1].(*PublicTxSubmission)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPublicTxManager_SingleTransactionSubmit_Call) Return(publicTx *pldapi.PublicTx, err error) *MockPublicTxManager_SingleTransactionSubmit_Call {
	_c.Call.Return(publicTx, err)
	return _c
}

func (_c *MockPublicTxManager_SingleTransactionSubmit_Call) RunAndReturn(run func(ctx context.Context, transaction *PublicTxSubmission) (*pldapi.PublicTx, error)) *MockPublicTxManager_SingleTransactionSubmit_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockPublicTxManager
func (_mock *MockPublicTxManager) Start() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPublicTxManager_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockPublicTxManager_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockPublicTxManager_Expecter) Start() *MockPublicTxManager_Start_Call {
	return &MockPublicTxManager_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockPublicTxManager_Start_Call) Run(run func()) *MockPublicTxManager_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPublicTxManager_Start_Call) Return(err error) *MockPublicTxManager_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPublicTxManager_Start_Call) RunAndReturn(run func() error) *MockPublicTxManager_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockPublicTxManager
func (_mock *MockPublicTxManager) Stop() {
	_mock.Called()
	return
}

// MockPublicTxManager_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockPublicTxManager_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockPublicTxManager_Expecter) Stop() *MockPublicTxManager_Stop_Call {
	return &MockPublicTxManager_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockPublicTxManager_Stop_Call) Run(run func()) *MockPublicTxManager_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPublicTxManager_Stop_Call) Return() *MockPublicTxManager_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPublicTxManager_Stop_Call) RunAndReturn(run func()) *MockPublicTxManager_Stop_Call {
	_c.Run(run)
	return _c
}

// UpdateTransaction provides a mock function for the type MockPublicTxManager
func (_mock *MockPublicTxManager) UpdateTransaction(ctx context.Context, id uuid.UUID, pubTXID uint64, from *pldtypes.EthAddress, tx *pldapi.TransactionInput, publicTxData []byte, txmgrDBUpdate func(dbTX persistence.DBTX) error) error {
	ret := _mock.Called(ctx, id, pubTXID, from, tx, publicTxData, txmgrDBUpdate)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTransaction")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uint64, *pldtypes.EthAddress, *pldapi.TransactionInput, []byte, func(dbTX persistence.DBTX) error) error); ok {
		r0 = returnFunc(ctx, id, pubTXID, from, tx, publicTxData, txmgrDBUpdate)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPublicTxManager_UpdateTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTransaction'
type MockPublicTxManager_UpdateTransaction_Call struct {
	*mock.Call
}

// UpdateTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - pubTXID uint64
//   - from *pldtypes.EthAddress
//   - tx *pldapi.TransactionInput
//   - publicTxData []byte
//   - txmgrDBUpdate func(dbTX persistence.DBTX) error
func (_e *MockPublicTxManager_Expecter) UpdateTransaction(ctx interface{}, id interface{}, pubTXID interface{}, from interface{}, tx interface{}, publicTxData interface{}, txmgrDBUpdate interface{}) *MockPublicTxManager_UpdateTransaction_Call {
	return &MockPublicTxManager_UpdateTransaction_Call{Call: _e.mock.On("UpdateTransaction", ctx, id, pubTXID, from, tx, publicTxData, txmgrDBUpdate)}
}

func (_c *MockPublicTxManager_UpdateTransaction_Call) Run(run func(ctx context.Context, id uuid.UUID, pubTXID uint64, from *pldtypes.EthAddress, tx *pldapi.TransactionInput, publicTxData []byte, txmgrDBUpdate func(dbTX persistence.DBTX) error)) *MockPublicTxManager_UpdateTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 uint64
		if args[2] != nil {
			arg2 = args[2].(uint64)
		}
		var arg3 *pldtypes.EthAddress
		if args[3] != nil {
			arg3 = args[3].(*pldtypes.EthAddress)
		}
		var arg4 *pldapi.TransactionInput
		if args[4] != nil {
			arg4 = args[4].(*pldapi.TransactionInput)
		}
		var arg5 []byte
		if args[5] != nil {
			arg5 = args[5].([]byte)
		}
		var arg6 func(dbTX persistence.DBTX) error
		if args[6] != nil {
			arg6 = args[6].(func(dbTX persistence.DBTX) error)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
		)
	})
	return _c
}

func (_c *MockPublicTxManager_UpdateTransaction_Call) Return(err error) *MockPublicTxManager_UpdateTransaction_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPublicTxManager_UpdateTransaction_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, pubTXID uint64, from *pldtypes.EthAddress, tx *pldapi.TransactionInput, publicTxData []byte, txmgrDBUpdate func(dbTX persistence.DBTX) error) error) *MockPublicTxManager_UpdateTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateTransaction provides a mock function for the type MockPublicTxManager
func (_mock *MockPublicTxManager) ValidateTransaction(ctx context.Context, dbTX persistence.DBTX, transaction *PublicTxSubmission) error {
	ret := _mock.Called(ctx, dbTX, transaction)

	if len(ret) == 0 {
		panic("no return value specified for ValidateTransaction")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, *PublicTxSubmission) error); ok {
		r0 = returnFunc(ctx, dbTX, transaction)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPublicTxManager_ValidateTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateTransaction'
type MockPublicTxManager_ValidateTransaction_Call struct {
	*mock.Call
}

// ValidateTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - transaction *PublicTxSubmission
func (_e *MockPublicTxManager_Expecter) ValidateTransaction(ctx interface{}, dbTX interface{}, transaction interface{}) *MockPublicTxManager_ValidateTransaction_Call {
	return &MockPublicTxManager_ValidateTransaction_Call{Call: _e.mock.On("ValidateTransaction", ctx, dbTX, transaction)}
}

func (_c *MockPublicTxManager_ValidateTransaction_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, transaction *PublicTxSubmission)) *MockPublicTxManager_ValidateTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 *PublicTxSubmission
		if args[2] != nil {
			arg2 = args[2].(*PublicTxSubmission)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPublicTxManager_ValidateTransaction_Call) Return(err error) *MockPublicTxManager_ValidateTransaction_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPublicTxManager_ValidateTransaction_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, transaction *PublicTxSubmission) error) *MockPublicTxManager_ValidateTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// WriteNewTransactions provides a mock function for the type MockPublicTxManager
func (_mock *MockPublicTxManager) WriteNewTransactions(ctx context.Context, dbTX persistence.DBTX, transactions []*PublicTxSubmission) ([]*pldapi.PublicTx, error) {
	ret := _mock.Called(ctx, dbTX, transactions)

	if len(ret) == 0 {
		panic("no return value specified for WriteNewTransactions")
	}

	var r0 []*pldapi.PublicTx
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, []*PublicTxSubmission) ([]*pldapi.PublicTx, error)); ok {
		return returnFunc(ctx, dbTX, transactions)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, []*PublicTxSubmission) []*pldapi.PublicTx); ok {
		r0 = returnFunc(ctx, dbTX, transactions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pldapi.PublicTx)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, []*PublicTxSubmission) error); ok {
		r1 = returnFunc(ctx, dbTX, transactions)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPublicTxManager_WriteNewTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteNewTransactions'
type MockPublicTxManager_WriteNewTransactions_Call struct {
	*mock.Call
}

// WriteNewTransactions is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - transactions []*PublicTxSubmission
func (_e *MockPublicTxManager_Expecter) WriteNewTransactions(ctx interface{}, dbTX interface{}, transactions interface{}) *MockPublicTxManager_WriteNewTransactions_Call {
	return &MockPublicTxManager_WriteNewTransactions_Call{Call: _e.mock.On("WriteNewTransactions", ctx, dbTX, transactions)}
}

func (_c *MockPublicTxManager_WriteNewTransactions_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, transactions []*PublicTxSubmission)) *MockPublicTxManager_WriteNewTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 []*PublicTxSubmission
		if args[2] != nil {
			arg2 = args[2].([]*PublicTxSubmission)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPublicTxManager_WriteNewTransactions_Call) Return(publicTxs []*pldapi.PublicTx, err error) *MockPublicTxManager_WriteNewTransactions_Call {
	_c.Call.Return(publicTxs, err)
	return _c
}

func (_c *MockPublicTxManager_WriteNewTransactions_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, transactions []*PublicTxSubmission) ([]*pldapi.PublicTx, error)) *MockPublicTxManager_WriteNewTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRegistryManagerToRegistry creates a new instance of MockRegistryManagerToRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRegistryManagerToRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRegistryManagerToRegistry {
	mock := &MockRegistryManagerToRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRegistryManagerToRegistry is an autogenerated mock type for the RegistryManagerToRegistry type
type MockRegistryManagerToRegistry struct {
	mock.Mock
}

type MockRegistryManagerToRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRegistryManagerToRegistry) EXPECT() *MockRegistryManagerToRegistry_Expecter {
	return &MockRegistryManagerToRegistry_Expecter{mock: &_m.Mock}
}

// ConfigureRegistry provides a mock function for the type MockRegistryManagerToRegistry
func (_mock *MockRegistryManagerToRegistry) ConfigureRegistry(context1 context.Context, configureRegistryRequest *prototk.ConfigureRegistryRequest) (*prototk.ConfigureRegistryResponse, error) {
	ret := _mock.Called(context1, configureRegistryRequest)

	if len(ret) == 0 {
		panic("no return value specified for ConfigureRegistry")
	}

	var r0 *prototk.ConfigureRegistryResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.ConfigureRegistryRequest) (*prototk.ConfigureRegistryResponse, error)); ok {
		return returnFunc(context1, configureRegistryRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.ConfigureRegistryRequest) *prototk.ConfigureRegistryResponse); ok {
		r0 = returnFunc(context1, configureRegistryRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.ConfigureRegistryResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.ConfigureRegistryRequest) error); ok {
		r1 = returnFunc(context1, configureRegistryRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRegistryManagerToRegistry_ConfigureRegistry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigureRegistry'
type MockRegistryManagerToRegistry_ConfigureRegistry_Call struct {
	*mock.Call
}

// ConfigureRegistry is a helper method to define mock.On call
//   - context1 context.Context
//   - configureRegistryRequest *prototk.ConfigureRegistryRequest
func (_e *MockRegistryManagerToRegistry_Expecter) ConfigureRegistry(context1 interface{}, configureRegistryRequest interface{}) *MockRegistryManagerToRegistry_ConfigureRegistry_Call {
	return &MockRegistryManagerToRegistry_ConfigureRegistry_Call{Call: _e.mock.On("ConfigureRegistry", context1, configureRegistryRequest)}
}

func (_c *MockRegistryManagerToRegistry_ConfigureRegistry_Call) Run(run func(context1 context.Context, configureRegistryRequest *prototk.ConfigureRegistryRequest)) *MockRegistryManagerToRegistry_ConfigureRegistry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.ConfigureRegistryRequest
		if args[1] != nil {
			arg1 = args[1].(*prototk.ConfigureRegistryRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRegistryManagerToRegistry_ConfigureRegistry_Call) Return(configureRegistryResponse *prototk.ConfigureRegistryResponse, err error) *MockRegistryManagerToRegistry_ConfigureRegistry_Call {
	_c.Call.Return(configureRegistryResponse, err)
	return _c
}

func (_c *MockRegistryManagerToRegistry_ConfigureRegistry_Call) RunAndReturn(run func(context1 context.Context, configureRegistryRequest *prototk.ConfigureRegistryRequest) (*prototk.ConfigureRegistryResponse, error)) *MockRegistryManagerToRegistry_ConfigureRegistry_Call {
	_c.Call.Return(run)
	return _c
}

// HandleRegistryEvents provides a mock function for the type MockRegistryManagerToRegistry
func (_mock *MockRegistryManagerToRegistry) HandleRegistryEvents(context1 context.Context, handleRegistryEventsRequest *prototk.HandleRegistryEventsRequest) (*prototk.HandleRegistryEventsResponse, error) {
	ret := _mock.Called(context1, handleRegistryEventsRequest)

	if len(ret) == 0 {
		panic("no return value specified for HandleRegistryEvents")
	}

	var r0 *prototk.HandleRegistryEventsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.HandleRegistryEventsRequest) (*prototk.HandleRegistryEventsResponse, error)); ok {
		return returnFunc(context1, handleRegistryEventsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.HandleRegistryEventsRequest) *prototk.HandleRegistryEventsResponse); ok {
		r0 = returnFunc(context1, handleRegistryEventsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.HandleRegistryEventsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.HandleRegistryEventsRequest) error); ok {
		r1 = returnFunc(context1, handleRegistryEventsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRegistryManagerToRegistry_HandleRegistryEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleRegistryEvents'
type MockRegistryManagerToRegistry_HandleRegistryEvents_Call struct {
	*mock.Call
}

// HandleRegistryEvents is a helper method to define mock.On call
//   - context1 context.Context
//   - handleRegistryEventsRequest *prototk.HandleRegistryEventsRequest
func (_e *MockRegistryManagerToRegistry_Expecter) HandleRegistryEvents(context1 interface{}, handleRegistryEventsRequest interface{}) *MockRegistryManagerToRegistry_HandleRegistryEvents_Call {
	return &MockRegistryManagerToRegistry_HandleRegistryEvents_Call{Call: _e.mock.On("HandleRegistryEvents", context1, handleRegistryEventsRequest)}
}

func (_c *MockRegistryManagerToRegistry_HandleRegistryEvents_Call) Run(run func(context1 context.Context, handleRegistryEventsRequest *prototk.HandleRegistryEventsRequest)) *MockRegistryManagerToRegistry_HandleRegistryEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.HandleRegistryEventsRequest
		if args[1] != nil {
			arg1 = args[1].(*prototk.HandleRegistryEventsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRegistryManagerToRegistry_HandleRegistryEvents_Call) Return(handleRegistryEventsResponse *prototk.HandleRegistryEventsResponse, err error) *MockRegistryManagerToRegistry_HandleRegistryEvents_Call {
	_c.Call.Return(handleRegistryEventsResponse, err)
	return _c
}

func (_c *MockRegistryManagerToRegistry_HandleRegistryEvents_Call) RunAndReturn(run func(context1 context.Context, handleRegistryEventsRequest *prototk.HandleRegistryEventsRequest) (*prototk.HandleRegistryEventsResponse, error)) *MockRegistryManagerToRegistry_HandleRegistryEvents_Call {
	_c.Call.Return(run)
	return _c
}

// Initialized provides a mock function for the type MockRegistryManagerToRegistry
func (_mock *MockRegistryManagerToRegistry) Initialized() {
	_mock.Called()
	return
}

// MockRegistryManagerToRegistry_Initialized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialized'
type MockRegistryManagerToRegistry_Initialized_Call struct {
	*mock.Call
}

// Initialized is a helper method to define mock.On call
func (_e *MockRegistryManagerToRegistry_Expecter) Initialized() *MockRegistryManagerToRegistry_Initialized_Call {
	return &MockRegistryManagerToRegistry_Initialized_Call{Call: _e.mock.On("Initialized")}
}

func (_c *MockRegistryManagerToRegistry_Initialized_Call) Run(run func()) *MockRegistryManagerToRegistry_Initialized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRegistryManagerToRegistry_Initialized_Call) Return() *MockRegistryManagerToRegistry_Initialized_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRegistryManagerToRegistry_Initialized_Call) RunAndReturn(run func()) *MockRegistryManagerToRegistry_Initialized_Call {
	_c.Run(run)
	return _c
}

// NewMockRegistryManager creates a new instance of MockRegistryManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRegistryManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRegistryManager {
	mock := &MockRegistryManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRegistryManager is an autogenerated mock type for the RegistryManager type
type MockRegistryManager struct {
	mock.Mock
}

type MockRegistryManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRegistryManager) EXPECT() *MockRegistryManager_Expecter {
	return &MockRegistryManager_Expecter{mock: &_m.Mock}
}

// ConfiguredRegistries provides a mock function for the type MockRegistryManager
func (_mock *MockRegistryManager) ConfiguredRegistries() map[string]*pldconf.PluginConfig {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ConfiguredRegistries")
	}

	var r0 map[string]*pldconf.PluginConfig
	if returnFunc, ok := ret.Get(0).(func() map[string]*pldconf.PluginConfig); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*pldconf.PluginConfig)
		}
	}
	return r0
}

// MockRegistryManager_ConfiguredRegistries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfiguredRegistries'
type MockRegistryManager_ConfiguredRegistries_Call struct {
	*mock.Call
}

// ConfiguredRegistries is a helper method to define mock.On call
func (_e *MockRegistryManager_Expecter) ConfiguredRegistries() *MockRegistryManager_ConfiguredRegistries_Call {
	return &MockRegistryManager_ConfiguredRegistries_Call{Call: _e.mock.On("ConfiguredRegistries")}
}

func (_c *MockRegistryManager_ConfiguredRegistries_Call) Run(run func()) *MockRegistryManager_ConfiguredRegistries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRegistryManager_ConfiguredRegistries_Call) Return(stringToPluginConfig map[string]*pldconf.PluginConfig) *MockRegistryManager_ConfiguredRegistries_Call {
	_c.Call.Return(stringToPluginConfig)
	return _c
}

func (_c *MockRegistryManager_ConfiguredRegistries_Call) RunAndReturn(run func() map[string]*pldconf.PluginConfig) *MockRegistryManager_ConfiguredRegistries_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeTransports provides a mock function for the type MockRegistryManager
func (_mock *MockRegistryManager) GetNodeTransports(ctx context.Context, node string) ([]*RegistryNodeTransportEntry, error) {
	ret := _mock.Called(ctx, node)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeTransports")
	}

	var r0 []*RegistryNodeTransportEntry
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]*RegistryNodeTransportEntry, error)); ok {
		return returnFunc(ctx, node)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []*RegistryNodeTransportEntry); ok {
		r0 = returnFunc(ctx, node)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*RegistryNodeTransportEntry)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, node)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRegistryManager_GetNodeTransports_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeTransports'
type MockRegistryManager_GetNodeTransports_Call struct {
	*mock.Call
}

// GetNodeTransports is a helper method to define mock.On call
//   - ctx context.Context
//   - node string
func (_e *MockRegistryManager_Expecter) GetNodeTransports(ctx interface{}, node interface{}) *MockRegistryManager_GetNodeTransports_Call {
	return &MockRegistryManager_GetNodeTransports_Call{Call: _e.mock.On("GetNodeTransports", ctx, node)}
}

func (_c *MockRegistryManager_GetNodeTransports_Call) Run(run func(ctx context.Context, node string)) *MockRegistryManager_GetNodeTransports_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRegistryManager_GetNodeTransports_Call) Return(registryNodeTransportEntrys []*RegistryNodeTransportEntry, err error) *MockRegistryManager_GetNodeTransports_Call {
	_c.Call.Return(registryNodeTransportEntrys, err)
	return _c
}

func (_c *MockRegistryManager_GetNodeTransports_Call) RunAndReturn(run func(ctx context.Context, node string) ([]*RegistryNodeTransportEntry, error)) *MockRegistryManager_GetNodeTransports_Call {
	_c.Call.Return(run)
	return _c
}

// GetRegistry provides a mock function for the type MockRegistryManager
func (_mock *MockRegistryManager) GetRegistry(ctx context.Context, name string) (Registry, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetRegistry")
	}

	var r0 Registry
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (Registry, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) Registry); ok {
		r0 = returnFunc(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Registry)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRegistryManager_GetRegistry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRegistry'
type MockRegistryManager_GetRegistry_Call struct {
	*mock.Call
}

// GetRegistry is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockRegistryManager_Expecter) GetRegistry(ctx interface{}, name interface{}) *MockRegistryManager_GetRegistry_Call {
	return &MockRegistryManager_GetRegistry_Call{Call: _e.mock.On("GetRegistry", ctx, name)}
}

func (_c *MockRegistryManager_GetRegistry_Call) Run(run func(ctx context.Context, name string)) *MockRegistryManager_GetRegistry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRegistryManager_GetRegistry_Call) Return(registry Registry, err error) *MockRegistryManager_GetRegistry_Call {
	_c.Call.Return(registry, err)
	return _c
}

func (_c *MockRegistryManager_GetRegistry_Call) RunAndReturn(run func(ctx context.Context, name string) (Registry, error)) *MockRegistryManager_GetRegistry_Call {
	_c.Call.Return(run)
	return _c
}

// PostInit provides a mock function for the type MockRegistryManager
func (_mock *MockRegistryManager) PostInit(allComponents AllComponents) error {
	ret := _mock.Called(allComponents)

	if len(ret) == 0 {
		panic("no return value specified for PostInit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(AllComponents) error); ok {
		r0 = returnFunc(allComponents)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRegistryManager_PostInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostInit'
type MockRegistryManager_PostInit_Call struct {
	*mock.Call
}

// PostInit is a helper method to define mock.On call
//   - allComponents AllComponents
func (_e *MockRegistryManager_Expecter) PostInit(allComponents interface{}) *MockRegistryManager_PostInit_Call {
	return &MockRegistryManager_PostInit_Call{Call: _e.mock.On("PostInit", allComponents)}
}

func (_c *MockRegistryManager_PostInit_Call) Run(run func(allComponents AllComponents)) *MockRegistryManager_PostInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 AllComponents
		if args[0] != nil {
			arg0 = args[0].(AllComponents)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRegistryManager_PostInit_Call) Return(err error) *MockRegistryManager_PostInit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRegistryManager_PostInit_Call) RunAndReturn(run func(allComponents AllComponents) error) *MockRegistryManager_PostInit_Call {
	_c.Call.Return(run)
	return _c
}

// PreInit provides a mock function for the type MockRegistryManager
func (_mock *MockRegistryManager) PreInit(preInitComponents PreInitComponents) (*ManagerInitResult, error) {
	ret := _mock.Called(preInitComponents)

	if len(ret) == 0 {
		panic("no return value specified for PreInit")
	}

	var r0 *ManagerInitResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(PreInitComponents) (*ManagerInitResult, error)); ok {
		return returnFunc(preInitComponents)
	}
	if returnFunc, ok := ret.Get(0).(func(PreInitComponents) *ManagerInitResult); ok {
		r0 = returnFunc(preInitComponents)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ManagerInitResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(PreInitComponents) error); ok {
		r1 = returnFunc(preInitComponents)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRegistryManager_PreInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreInit'
type MockRegistryManager_PreInit_Call struct {
	*mock.Call
}

// PreInit is a helper method to define mock.On call
//   - preInitComponents PreInitComponents
func (_e *MockRegistryManager_Expecter) PreInit(preInitComponents interface{}) *MockRegistryManager_PreInit_Call {
	return &MockRegistryManager_PreInit_Call{Call: _e.mock.On("PreInit", preInitComponents)}
}

func (_c *MockRegistryManager_PreInit_Call) Run(run func(preInitComponents PreInitComponents)) *MockRegistryManager_PreInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 PreInitComponents
		if args[0] != nil {
			arg0 = args[0].(PreInitComponents)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRegistryManager_PreInit_Call) Return(managerInitResult *ManagerInitResult, err error) *MockRegistryManager_PreInit_Call {
	_c.Call.Return(managerInitResult, err)
	return _c
}

func (_c *MockRegistryManager_PreInit_Call) RunAndReturn(run func(preInitComponents PreInitComponents) (*ManagerInitResult, error)) *MockRegistryManager_PreInit_Call {
	_c.Call.Return(run)
	return _c
}

// RegistryRegistered provides a mock function for the type MockRegistryManager
func (_mock *MockRegistryManager) RegistryRegistered(name string, id uuid.UUID, toRegistry RegistryManagerToRegistry) (plugintk.RegistryCallbacks, error) {
	ret := _mock.Called(name, id, toRegistry)

	if len(ret) == 0 {
		panic("no return value specified for RegistryRegistered")
	}

	var r0 plugintk.RegistryCallbacks
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID, RegistryManagerToRegistry) (plugintk.RegistryCallbacks, error)); ok {
		return returnFunc(name, id, toRegistry)
	}
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID, RegistryManagerToRegistry) plugintk.RegistryCallbacks); ok {
		r0 = returnFunc(name, id, toRegistry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plugintk.RegistryCallbacks)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, uuid.UUID, RegistryManagerToRegistry) error); ok {
		r1 = returnFunc(name, id, toRegistry)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRegistryManager_RegistryRegistered_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegistryRegistered'
type MockRegistryManager_RegistryRegistered_Call struct {
	*mock.Call
}

// RegistryRegistered is a helper method to define mock.On call
//   - name string
//   - id uuid.UUID
//   - toRegistry RegistryManagerToRegistry
func (_e *MockRegistryManager_Expecter) RegistryRegistered(name interface{}, id interface{}, toRegistry interface{}) *MockRegistryManager_RegistryRegistered_Call {
	return &MockRegistryManager_RegistryRegistered_Call{Call: _e.mock.On("RegistryRegistered", name, id, toRegistry)}
}

func (_c *MockRegistryManager_RegistryRegistered_Call) Run(run func(name string, id uuid.UUID, toRegistry RegistryManagerToRegistry)) *MockRegistryManager_RegistryRegistered_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 RegistryManagerToRegistry
		if args[2] != nil {
			arg2 = args[2].(RegistryManagerToRegistry)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRegistryManager_RegistryRegistered_Call) Return(fromRegistry plugintk.RegistryCallbacks, err error) *MockRegistryManager_RegistryRegistered_Call {
	_c.Call.Return(fromRegistry, err)
	return _c
}

func (_c *MockRegistryManager_RegistryRegistered_Call) RunAndReturn(run func(name string, id uuid.UUID, toRegistry RegistryManagerToRegistry) (plugintk.RegistryCallbacks, error)) *MockRegistryManager_RegistryRegistered_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockRegistryManager
func (_mock *MockRegistryManager) Start() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRegistryManager_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockRegistryManager_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockRegistryManager_Expecter) Start() *MockRegistryManager_Start_Call {
	return &MockRegistryManager_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockRegistryManager_Start_Call) Run(run func()) *MockRegistryManager_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRegistryManager_Start_Call) Return(err error) *MockRegistryManager_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRegistryManager_Start_Call) RunAndReturn(run func() error) *MockRegistryManager_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockRegistryManager
func (_mock *MockRegistryManager) Stop() {
	_mock.Called()
	return
}

// MockRegistryManager_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockRegistryManager_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockRegistryManager_Expecter) Stop() *MockRegistryManager_Stop_Call {
	return &MockRegistryManager_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockRegistryManager_Stop_Call) Run(run func()) *MockRegistryManager_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRegistryManager_Stop_Call) Return() *MockRegistryManager_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRegistryManager_Stop_Call) RunAndReturn(run func()) *MockRegistryManager_Stop_Call {
	_c.Run(run)
	return _c
}

// NewMockRegistry creates a new instance of MockRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRegistry {
	mock := &MockRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRegistry is an autogenerated mock type for the Registry type
type MockRegistry struct {
	mock.Mock
}

type MockRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRegistry) EXPECT() *MockRegistry_Expecter {
	return &MockRegistry_Expecter{mock: &_m.Mock}
}

// GetEntryProperties provides a mock function for the type MockRegistry
func (_mock *MockRegistry) GetEntryProperties(ctx context.Context, dbTX persistence.DBTX, fActive pldapi.ActiveFilter, entityIDs ...pldtypes.HexBytes) ([]*pldapi.RegistryProperty, error) {
	// pldtypes.HexBytes
	_va := make([]interface{}, len(entityIDs))
	for _i := range entityIDs {
		_va[_i] = entityIDs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dbTX, fActive)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEntryProperties")
	}

	var r0 []*pldapi.RegistryProperty
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, pldapi.ActiveFilter, ...pldtypes.HexBytes) ([]*pldapi.RegistryProperty, error)); ok {
		return returnFunc(ctx, dbTX, fActive, entityIDs...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, pldapi.ActiveFilter, ...pldtypes.HexBytes) []*pldapi.RegistryProperty); ok {
		r0 = returnFunc(ctx, dbTX, fActive, entityIDs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pldapi.RegistryProperty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, pldapi.ActiveFilter, ...pldtypes.HexBytes) error); ok {
		r1 = returnFunc(ctx, dbTX, fActive, entityIDs...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRegistry_GetEntryProperties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEntryProperties'
type MockRegistry_GetEntryProperties_Call struct {
	*mock.Call
}

// GetEntryProperties is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - fActive pldapi.ActiveFilter
//   - entityIDs ...pldtypes.HexBytes
func (_e *MockRegistry_Expecter) GetEntryProperties(ctx interface{}, dbTX interface{}, fActive interface{}, entityIDs ...interface{}) *MockRegistry_GetEntryProperties_Call {
	return &MockRegistry_GetEntryProperties_Call{Call: _e.mock.On("GetEntryProperties",
		append([]interface{}{ctx, dbTX, fActive}, entityIDs...)...)}
}

func (_c *MockRegistry_GetEntryProperties_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, fActive pldapi.ActiveFilter, entityIDs ...pldtypes.HexBytes)) *MockRegistry_GetEntryProperties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 pldapi.ActiveFilter
		if args[2] != nil {
			arg2 = args[2].(pldapi.ActiveFilter)
		}
		var arg3 []pldtypes.HexBytes
		variadicArgs := make([]pldtypes.HexBytes, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(pldtypes.HexBytes)
			}
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockRegistry_GetEntryProperties_Call) Return(registryPropertys []*pldapi.RegistryProperty, err error) *MockRegistry_GetEntryProperties_Call {
	_c.Call.Return(registryPropertys, err)
	return _c
}

func (_c *MockRegistry_GetEntryProperties_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, fActive pldapi.ActiveFilter, entityIDs ...pldtypes.HexBytes) ([]*pldapi.RegistryProperty, error)) *MockRegistry_GetEntryProperties_Call {
	_c.Call.Return(run)
	return _c
}

// QueryEntries provides a mock function for the type MockRegistry
func (_mock *MockRegistry) QueryEntries(ctx context.Context, dbTX persistence.DBTX, fActive pldapi.ActiveFilter, jq *query.QueryJSON) ([]*pldapi.RegistryEntry, error) {
	ret := _mock.Called(ctx, dbTX, fActive, jq)

	if len(ret) == 0 {
		panic("no return value specified for QueryEntries")
	}

	var r0 []*pldapi.RegistryEntry
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, pldapi.ActiveFilter, *query.QueryJSON) ([]*pldapi.RegistryEntry, error)); ok {
		return returnFunc(ctx, dbTX, fActive, jq)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, pldapi.ActiveFilter, *query.QueryJSON) []*pldapi.RegistryEntry); ok {
		r0 = returnFunc(ctx, dbTX, fActive, jq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pldapi.RegistryEntry)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, pldapi.ActiveFilter, *query.QueryJSON) error); ok {
		r1 = returnFunc(ctx, dbTX, fActive, jq)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRegistry_QueryEntries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryEntries'
type MockRegistry_QueryEntries_Call struct {
	*mock.Call
}

// QueryEntries is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - fActive pldapi.ActiveFilter
//   - jq *query.QueryJSON
func (_e *MockRegistry_Expecter) QueryEntries(ctx interface{}, dbTX interface{}, fActive interface{}, jq interface{}) *MockRegistry_QueryEntries_Call {
	return &MockRegistry_QueryEntries_Call{Call: _e.mock.On("QueryEntries", ctx, dbTX, fActive, jq)}
}

func (_c *MockRegistry_QueryEntries_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, fActive pldapi.ActiveFilter, jq *query.QueryJSON)) *MockRegistry_QueryEntries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 pldapi.ActiveFilter
		if args[2] != nil {
			arg2 = args[2].(pldapi.ActiveFilter)
		}
		var arg3 *query.QueryJSON
		if args[3] != nil {
			arg3 = args[3].(*query.QueryJSON)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockRegistry_QueryEntries_Call) Return(registryEntrys []*pldapi.RegistryEntry, err error) *MockRegistry_QueryEntries_Call {
	_c.Call.Return(registryEntrys, err)
	return _c
}

func (_c *MockRegistry_QueryEntries_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, fActive pldapi.ActiveFilter, jq *query.QueryJSON) ([]*pldapi.RegistryEntry, error)) *MockRegistry_QueryEntries_Call {
	_c.Call.Return(run)
	return _c
}

// QueryEntriesWithProps provides a mock function for the type MockRegistry
func (_mock *MockRegistry) QueryEntriesWithProps(ctx context.Context, dbTX persistence.DBTX, fActive pldapi.ActiveFilter, jq *query.QueryJSON) ([]*pldapi.RegistryEntryWithProperties, error) {
	ret := _mock.Called(ctx, dbTX, fActive, jq)

	if len(ret) == 0 {
		panic("no return value specified for QueryEntriesWithProps")
	}

	var r0 []*pldapi.RegistryEntryWithProperties
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, pldapi.ActiveFilter, *query.QueryJSON) ([]*pldapi.RegistryEntryWithProperties, error)); ok {
		return returnFunc(ctx, dbTX, fActive, jq)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, pldapi.ActiveFilter, *query.QueryJSON) []*pldapi.RegistryEntryWithProperties); ok {
		r0 = returnFunc(ctx, dbTX, fActive, jq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pldapi.RegistryEntryWithProperties)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, pldapi.ActiveFilter, *query.QueryJSON) error); ok {
		r1 = returnFunc(ctx, dbTX, fActive, jq)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRegistry_QueryEntriesWithProps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryEntriesWithProps'
type MockRegistry_QueryEntriesWithProps_Call struct {
	*mock.Call
}

// QueryEntriesWithProps is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - fActive pldapi.ActiveFilter
//   - jq *query.QueryJSON
func (_e *MockRegistry_Expecter) QueryEntriesWithProps(ctx interface{}, dbTX interface{}, fActive interface{}, jq interface{}) *MockRegistry_QueryEntriesWithProps_Call {
	return &MockRegistry_QueryEntriesWithProps_Call{Call: _e.mock.On("QueryEntriesWithProps", ctx, dbTX, fActive, jq)}
}

func (_c *MockRegistry_QueryEntriesWithProps_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, fActive pldapi.ActiveFilter, jq *query.QueryJSON)) *MockRegistry_QueryEntriesWithProps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 pldapi.ActiveFilter
		if args[2] != nil {
			arg2 = args[2].(pldapi.ActiveFilter)
		}
		var arg3 *query.QueryJSON
		if args[3] != nil {
			arg3 = args[3].(*query.QueryJSON)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockRegistry_QueryEntriesWithProps_Call) Return(registryEntryWithPropertiess []*pldapi.RegistryEntryWithProperties, err error) *MockRegistry_QueryEntriesWithProps_Call {
	_c.Call.Return(registryEntryWithPropertiess, err)
	return _c
}

func (_c *MockRegistry_QueryEntriesWithProps_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, fActive pldapi.ActiveFilter, jq *query.QueryJSON) ([]*pldapi.RegistryEntryWithProperties, error)) *MockRegistry_QueryEntriesWithProps_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStateManager creates a new instance of MockStateManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStateManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStateManager {
	mock := &MockStateManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStateManager is an autogenerated mock type for the StateManager type
type MockStateManager struct {
	mock.Mock
}

type MockStateManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStateManager) EXPECT() *MockStateManager_Expecter {
	return &MockStateManager_Expecter{mock: &_m.Mock}
}

// EnsureABISchemas provides a mock function for the type MockStateManager
func (_mock *MockStateManager) EnsureABISchemas(ctx context.Context, dbTX persistence.DBTX, domainName string, defs []*abi.Parameter) ([]Schema, error) {
	ret := _mock.Called(ctx, dbTX, domainName, defs)

	if len(ret) == 0 {
		panic("no return value specified for EnsureABISchemas")
	}

	var r0 []Schema
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, string, []*abi.Parameter) ([]Schema, error)); ok {
		return returnFunc(ctx, dbTX, domainName, defs)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, string, []*abi.Parameter) []Schema); ok {
		r0 = returnFunc(ctx, dbTX, domainName, defs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Schema)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, string, []*abi.Parameter) error); ok {
		r1 = returnFunc(ctx, dbTX, domainName, defs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStateManager_EnsureABISchemas_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureABISchemas'
type MockStateManager_EnsureABISchemas_Call struct {
	*mock.Call
}

// EnsureABISchemas is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - domainName string
//   - defs []*abi.Parameter
func (_e *MockStateManager_Expecter) EnsureABISchemas(ctx interface{}, dbTX interface{}, domainName interface{}, defs interface{}) *MockStateManager_EnsureABISchemas_Call {
	return &MockStateManager_EnsureABISchemas_Call{Call: _e.mock.On("EnsureABISchemas", ctx, dbTX, domainName, defs)}
}

func (_c *MockStateManager_EnsureABISchemas_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, domainName string, defs []*abi.Parameter)) *MockStateManager_EnsureABISchemas_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []*abi.Parameter
		if args[3] != nil {
			arg3 = args[3].([]*abi.Parameter)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockStateManager_EnsureABISchemas_Call) Return(schemas []Schema, err error) *MockStateManager_EnsureABISchemas_Call {
	_c.Call.Return(schemas, err)
	return _c
}

func (_c *MockStateManager_EnsureABISchemas_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, domainName string, defs []*abi.Parameter) ([]Schema, error)) *MockStateManager_EnsureABISchemas_Call {
	_c.Call.Return(run)
	return _c
}

// FindStates provides a mock function for the type MockStateManager
func (_mock *MockStateManager) FindStates(ctx context.Context, dbTX persistence.DBTX, domainName string, schemaID pldtypes.Bytes32, query1 *query.QueryJSON, extQueryOptions *StateQueryOptions) ([]*pldapi.State, error) {
	ret := _mock.Called(ctx, dbTX, domainName, schemaID, query1, extQueryOptions)

	if len(ret) == 0 {
		panic("no return value specified for FindStates")
	}

	var r0 []*pldapi.State
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, string, pldtypes.Bytes32, *query.QueryJSON, *StateQueryOptions) ([]*pldapi.State, error)); ok {
		return returnFunc(ctx, dbTX, domainName, schemaID, query1, extQueryOptions)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, string, pldtypes.Bytes32, *query.QueryJSON, *StateQueryOptions) []*pldapi.State); ok {
		r0 = returnFunc(ctx, dbTX, domainName, schemaID, query1, extQueryOptions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pldapi.State)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, string, pldtypes.Bytes32, *query.QueryJSON, *StateQueryOptions) error); ok {
		r1 = returnFunc(ctx, dbTX, domainName, schemaID, query1, extQueryOptions)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStateManager_FindStates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindStates'
type MockStateManager_FindStates_Call struct {
	*mock.Call
}

// FindStates is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - domainName string
//   - schemaID pldtypes.Bytes32
//   - query1 *query.QueryJSON
//   - extQueryOptions *StateQueryOptions
func (_e *MockStateManager_Expecter) FindStates(ctx interface{}, dbTX interface{}, domainName interface{}, schemaID interface{}, query1 interface{}, extQueryOptions interface{}) *MockStateManager_FindStates_Call {
	return &MockStateManager_FindStates_Call{Call: _e.mock.On("FindStates", ctx, dbTX, domainName, schemaID, query1, extQueryOptions)}
}

func (_c *MockStateManager_FindStates_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, domainName string, schemaID pldtypes.Bytes32, query1 *query.QueryJSON, extQueryOptions *StateQueryOptions)) *MockStateManager_FindStates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 pldtypes.Bytes32
		if args[3] != nil {
			arg3 = args[3].(pldtypes.Bytes32)
		}
		var arg4 *query.QueryJSON
		if args[4] != nil {
			arg4 = args[4].(*query.QueryJSON)
		}
		var arg5 *StateQueryOptions
		if args[5] != nil {
			arg5 = args[5].(*StateQueryOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *MockStateManager_FindStates_Call) Return(s []*pldapi.State, err error) *MockStateManager_FindStates_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockStateManager_FindStates_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, domainName string, schemaID pldtypes.Bytes32, query1 *query.QueryJSON, extQueryOptions *StateQueryOptions) ([]*pldapi.State, error)) *MockStateManager_FindStates_Call {
	_c.Call.Return(run)
	return _c
}

// GetDomainContext provides a mock function for the type MockStateManager
func (_mock *MockStateManager) GetDomainContext(ctx context.Context, id uuid.UUID) DomainContext {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetDomainContext")
	}

	var r0 DomainContext
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) DomainContext); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(DomainContext)
		}
	}
	return r0
}

// MockStateManager_GetDomainContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDomainContext'
type MockStateManager_GetDomainContext_Call struct {
	*mock.Call
}

// GetDomainContext is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockStateManager_Expecter) GetDomainContext(ctx interface{}, id interface{}) *MockStateManager_GetDomainContext_Call {
	return &MockStateManager_GetDomainContext_Call{Call: _e.mock.On("GetDomainContext", ctx, id)}
}

func (_c *MockStateManager_GetDomainContext_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockStateManager_GetDomainContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStateManager_GetDomainContext_Call) Return(domainContext DomainContext) *MockStateManager_GetDomainContext_Call {
	_c.Call.Return(domainContext)
	return _c
}

func (_c *MockStateManager_GetDomainContext_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) DomainContext) *MockStateManager_GetDomainContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetSchemaByID provides a mock function for the type MockStateManager
func (_mock *MockStateManager) GetSchemaByID(ctx context.Context, dbTX persistence.DBTX, domainName string, schemaID pldtypes.Bytes32, failNotFound bool) (*pldapi.Schema, error) {
	ret := _mock.Called(ctx, dbTX, domainName, schemaID, failNotFound)

	if len(ret) == 0 {
		panic("no return value specified for GetSchemaByID")
	}

	var r0 *pldapi.Schema
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, string, pldtypes.Bytes32, bool) (*pldapi.Schema, error)); ok {
		return returnFunc(ctx, dbTX, domainName, schemaID, failNotFound)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, string, pldtypes.Bytes32, bool) *pldapi.Schema); ok {
		r0 = returnFunc(ctx, dbTX, domainName, schemaID, failNotFound)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.Schema)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, string, pldtypes.Bytes32, bool) error); ok {
		r1 = returnFunc(ctx, dbTX, domainName, schemaID, failNotFound)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStateManager_GetSchemaByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSchemaByID'
type MockStateManager_GetSchemaByID_Call struct {
	*mock.Call
}

// GetSchemaByID is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - domainName string
//   - schemaID pldtypes.Bytes32
//   - failNotFound bool
func (_e *MockStateManager_Expecter) GetSchemaByID(ctx interface{}, dbTX interface{}, domainName interface{}, schemaID interface{}, failNotFound interface{}) *MockStateManager_GetSchemaByID_Call {
	return &MockStateManager_GetSchemaByID_Call{Call: _e.mock.On("GetSchemaByID", ctx, dbTX, domainName, schemaID, failNotFound)}
}

func (_c *MockStateManager_GetSchemaByID_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, domainName string, schemaID pldtypes.Bytes32, failNotFound bool)) *MockStateManager_GetSchemaByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 pldtypes.Bytes32
		if args[3] != nil {
			arg3 = args[3].(pldtypes.Bytes32)
		}
		var arg4 bool
		if args[4] != nil {
			arg4 = args[4].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockStateManager_GetSchemaByID_Call) Return(schema *pldapi.Schema, err error) *MockStateManager_GetSchemaByID_Call {
	_c.Call.Return(schema, err)
	return _c
}

func (_c *MockStateManager_GetSchemaByID_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, domainName string, schemaID pldtypes.Bytes32, failNotFound bool) (*pldapi.Schema, error)) *MockStateManager_GetSchemaByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatesByID provides a mock function for the type MockStateManager
func (_mock *MockStateManager) GetStatesByID(ctx context.Context, dbTX persistence.DBTX, domainName string, contractAddress *pldtypes.EthAddress, stateIDs []pldtypes.HexBytes, failNotFound bool, withLabels bool) ([]*pldapi.State, error) {
	ret := _mock.Called(ctx, dbTX, domainName, contractAddress, stateIDs, failNotFound, withLabels)

	if len(ret) == 0 {
		panic("no return value specified for GetStatesByID")
	}

	var r0 []*pldapi.State
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, string, *pldtypes.EthAddress, []pldtypes.HexBytes, bool, bool) ([]*pldapi.State, error)); ok {
		return returnFunc(ctx, dbTX, domainName, contractAddress, stateIDs, failNotFound, withLabels)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, string, *pldtypes.EthAddress, []pldtypes.HexBytes, bool, bool) []*pldapi.State); ok {
		r0 = returnFunc(ctx, dbTX, domainName, contractAddress, stateIDs, failNotFound, withLabels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pldapi.State)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, string, *pldtypes.EthAddress, []pldtypes.HexBytes, bool, bool) error); ok {
		r1 = returnFunc(ctx, dbTX, domainName, contractAddress, stateIDs, failNotFound, withLabels)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStateManager_GetStatesByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatesByID'
type MockStateManager_GetStatesByID_Call struct {
	*mock.Call
}

// GetStatesByID is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - domainName string
//   - contractAddress *pldtypes.EthAddress
//   - stateIDs []pldtypes.HexBytes
//   - failNotFound bool
//   - withLabels bool
func (_e *MockStateManager_Expecter) GetStatesByID(ctx interface{}, dbTX interface{}, domainName interface{}, contractAddress interface{}, stateIDs interface{}, failNotFound interface{}, withLabels interface{}) *MockStateManager_GetStatesByID_Call {
	return &MockStateManager_GetStatesByID_Call{Call: _e.mock.On("GetStatesByID", ctx, dbTX, domainName, contractAddress, stateIDs, failNotFound, withLabels)}
}

func (_c *MockStateManager_GetStatesByID_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, domainName string, contractAddress *pldtypes.EthAddress, stateIDs []pldtypes.HexBytes, failNotFound bool, withLabels bool)) *MockStateManager_GetStatesByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 *pldtypes.EthAddress
		if args[3] != nil {
			arg3 = args[3].(*pldtypes.EthAddress)
		}
		var arg4 []pldtypes.HexBytes
		if args[4] != nil {
			arg4 = args[4].([]pldtypes.HexBytes)
		}
		var arg5 bool
		if args[5] != nil {
			arg5 = args[5].(bool)
		}
		var arg6 bool
		if args[6] != nil {
			arg6 = args[6].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
		)
	})
	return _c
}

func (_c *MockStateManager_GetStatesByID_Call) Return(states []*pldapi.State, err error) *MockStateManager_GetStatesByID_Call {
	_c.Call.Return(states, err)
	return _c
}

func (_c *MockStateManager_GetStatesByID_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, domainName string, contractAddress *pldtypes.EthAddress, stateIDs []pldtypes.HexBytes, failNotFound bool, withLabels bool) ([]*pldapi.State, error)) *MockStateManager_GetStatesByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionStates provides a mock function for the type MockStateManager
func (_mock *MockStateManager) GetTransactionStates(ctx context.Context, dbTX persistence.DBTX, txID uuid.UUID) (*pldapi.TransactionStates, error) {
	ret := _mock.Called(ctx, dbTX, txID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionStates")
	}

	var r0 *pldapi.TransactionStates
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, uuid.UUID) (*pldapi.TransactionStates, error)); ok {
		return returnFunc(ctx, dbTX, txID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, uuid.UUID) *pldapi.TransactionStates); ok {
		r0 = returnFunc(ctx, dbTX, txID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.TransactionStates)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, dbTX, txID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStateManager_GetTransactionStates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionStates'
type MockStateManager_GetTransactionStates_Call struct {
	*mock.Call
}

// GetTransactionStates is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - txID uuid.UUID
func (_e *MockStateManager_Expecter) GetTransactionStates(ctx interface{}, dbTX interface{}, txID interface{}) *MockStateManager_GetTransactionStates_Call {
	return &MockStateManager_GetTransactionStates_Call{Call: _e.mock.On("GetTransactionStates", ctx, dbTX, txID)}
}

func (_c *MockStateManager_GetTransactionStates_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, txID uuid.UUID)) *MockStateManager_GetTransactionStates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStateManager_GetTransactionStates_Call) Return(transactionStates *pldapi.TransactionStates, err error) *MockStateManager_GetTransactionStates_Call {
	_c.Call.Return(transactionStates, err)
	return _c
}

func (_c *MockStateManager_GetTransactionStates_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, txID uuid.UUID) (*pldapi.TransactionStates, error)) *MockStateManager_GetTransactionStates_Call {
	_c.Call.Return(run)
	return _c
}

// ListDomainContexts provides a mock function for the type MockStateManager
func (_mock *MockStateManager) ListDomainContexts() []DomainContextInfo {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListDomainContexts")
	}

	var r0 []DomainContextInfo
	if returnFunc, ok := ret.Get(0).(func() []DomainContextInfo); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DomainContextInfo)
		}
	}
	return r0
}

// MockStateManager_ListDomainContexts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDomainContexts'
type MockStateManager_ListDomainContexts_Call struct {
	*mock.Call
}

// ListDomainContexts is a helper method to define mock.On call
func (_e *MockStateManager_Expecter) ListDomainContexts() *MockStateManager_ListDomainContexts_Call {
	return &MockStateManager_ListDomainContexts_Call{Call: _e.mock.On("ListDomainContexts")}
}

func (_c *MockStateManager_ListDomainContexts_Call) Run(run func()) *MockStateManager_ListDomainContexts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStateManager_ListDomainContexts_Call) Return(domainContextInfos []DomainContextInfo) *MockStateManager_ListDomainContexts_Call {
	_c.Call.Return(domainContextInfos)
	return _c
}

func (_c *MockStateManager_ListDomainContexts_Call) RunAndReturn(run func() []DomainContextInfo) *MockStateManager_ListDomainContexts_Call {
	_c.Call.Return(run)
	return _c
}

// NewDomainContext provides a mock function for the type MockStateManager
func (_mock *MockStateManager) NewDomainContext(ctx context.Context, domain Domain, contractAddress pldtypes.EthAddress) DomainContext {
	ret := _mock.Called(ctx, domain, contractAddress)

	if len(ret) == 0 {
		panic("no return value specified for NewDomainContext")
	}

	var r0 DomainContext
	if returnFunc, ok := ret.Get(0).(func(context.Context, Domain, pldtypes.EthAddress) DomainContext); ok {
		r0 = returnFunc(ctx, domain, contractAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(DomainContext)
		}
	}
	return r0
}

// MockStateManager_NewDomainContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewDomainContext'
type MockStateManager_NewDomainContext_Call struct {
	*mock.Call
}

// NewDomainContext is a helper method to define mock.On call
//   - ctx context.Context
//   - domain Domain
//   - contractAddress pldtypes.EthAddress
func (_e *MockStateManager_Expecter) NewDomainContext(ctx interface{}, domain interface{}, contractAddress interface{}) *MockStateManager_NewDomainContext_Call {
	return &MockStateManager_NewDomainContext_Call{Call: _e.mock.On("NewDomainContext", ctx, domain, contractAddress)}
}

func (_c *MockStateManager_NewDomainContext_Call) Run(run func(ctx context.Context, domain Domain, contractAddress pldtypes.EthAddress)) *MockStateManager_NewDomainContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 Domain
		if args[1] != nil {
			arg1 = args[1].(Domain)
		}
		var arg2 pldtypes.EthAddress
		if args[2] != nil {
			arg2 = args[2].(pldtypes.EthAddress)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStateManager_NewDomainContext_Call) Return(domainContext DomainContext) *MockStateManager_NewDomainContext_Call {
	_c.Call.Return(domainContext)
	return _c
}

func (_c *MockStateManager_NewDomainContext_Call) RunAndReturn(run func(ctx context.Context, domain Domain, contractAddress pldtypes.EthAddress) DomainContext) *MockStateManager_NewDomainContext_Call {
	_c.Call.Return(run)
	return _c
}

// PostInit provides a mock function for the type MockStateManager
func (_mock *MockStateManager) PostInit(allComponents AllComponents) error {
	ret := _mock.Called(allComponents)

	if len(ret) == 0 {
		panic("no return value specified for PostInit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(AllComponents) error); ok {
		r0 = returnFunc(allComponents)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStateManager_PostInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostInit'
type MockStateManager_PostInit_Call struct {
	*mock.Call
}

// PostInit is a helper method to define mock.On call
//   - allComponents AllComponents
func (_e *MockStateManager_Expecter) PostInit(allComponents interface{}) *MockStateManager_PostInit_Call {
	return &MockStateManager_PostInit_Call{Call: _e.mock.On("PostInit", allComponents)}
}

func (_c *MockStateManager_PostInit_Call) Run(run func(allComponents AllComponents)) *MockStateManager_PostInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 AllComponents
		if args[0] != nil {
			arg0 = args[0].(AllComponents)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStateManager_PostInit_Call) Return(err error) *MockStateManager_PostInit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStateManager_PostInit_Call) RunAndReturn(run func(allComponents AllComponents) error) *MockStateManager_PostInit_Call {
	_c.Call.Return(run)
	return _c
}

// PreInit provides a mock function for the type MockStateManager
func (_mock *MockStateManager) PreInit(preInitComponents PreInitComponents) (*ManagerInitResult, error) {
	ret := _mock.Called(preInitComponents)

	if len(ret) == 0 {
		panic("no return value specified for PreInit")
	}

	var r0 *ManagerInitResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(PreInitComponents) (*ManagerInitResult, error)); ok {
		return returnFunc(preInitComponents)
	}
	if returnFunc, ok := ret.Get(0).(func(PreInitComponents) *ManagerInitResult); ok {
		r0 = returnFunc(preInitComponents)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ManagerInitResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(PreInitComponents) error); ok {
		r1 = returnFunc(preInitComponents)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStateManager_PreInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreInit'
type MockStateManager_PreInit_Call struct {
	*mock.Call
}

// PreInit is a helper method to define mock.On call
//   - preInitComponents PreInitComponents
func (_e *MockStateManager_Expecter) PreInit(preInitComponents interface{}) *MockStateManager_PreInit_Call {
	return &MockStateManager_PreInit_Call{Call: _e.mock.On("PreInit", preInitComponents)}
}

func (_c *MockStateManager_PreInit_Call) Run(run func(preInitComponents PreInitComponents)) *MockStateManager_PreInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 PreInitComponents
		if args[0] != nil {
			arg0 = args[0].(PreInitComponents)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStateManager_PreInit_Call) Return(managerInitResult *ManagerInitResult, err error) *MockStateManager_PreInit_Call {
	_c.Call.Return(managerInitResult, err)
	return _c
}

func (_c *MockStateManager_PreInit_Call) RunAndReturn(run func(preInitComponents PreInitComponents) (*ManagerInitResult, error)) *MockStateManager_PreInit_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockStateManager
func (_mock *MockStateManager) Start() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStateManager_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockStateManager_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockStateManager_Expecter) Start() *MockStateManager_Start_Call {
	return &MockStateManager_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockStateManager_Start_Call) Run(run func()) *MockStateManager_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStateManager_Start_Call) Return(err error) *MockStateManager_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStateManager_Start_Call) RunAndReturn(run func() error) *MockStateManager_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockStateManager
func (_mock *MockStateManager) Stop() {
	_mock.Called()
	return
}

// MockStateManager_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockStateManager_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockStateManager_Expecter) Stop() *MockStateManager_Stop_Call {
	return &MockStateManager_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockStateManager_Stop_Call) Run(run func()) *MockStateManager_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStateManager_Stop_Call) Return() *MockStateManager_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockStateManager_Stop_Call) RunAndReturn(run func()) *MockStateManager_Stop_Call {
	_c.Run(run)
	return _c
}

// WriteNullifiersForReceivedStates provides a mock function for the type MockStateManager
func (_mock *MockStateManager) WriteNullifiersForReceivedStates(ctx context.Context, dbTX persistence.DBTX, domainName string, nullifiers []*NullifierUpsert) error {
	ret := _mock.Called(ctx, dbTX, domainName, nullifiers)

	if len(ret) == 0 {
		panic("no return value specified for WriteNullifiersForReceivedStates")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, string, []*NullifierUpsert) error); ok {
		r0 = returnFunc(ctx, dbTX, domainName, nullifiers)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStateManager_WriteNullifiersForReceivedStates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteNullifiersForReceivedStates'
type MockStateManager_WriteNullifiersForReceivedStates_Call struct {
	*mock.Call
}

// WriteNullifiersForReceivedStates is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - domainName string
//   - nullifiers []*NullifierUpsert
func (_e *MockStateManager_Expecter) WriteNullifiersForReceivedStates(ctx interface{}, dbTX interface{}, domainName interface{}, nullifiers interface{}) *MockStateManager_WriteNullifiersForReceivedStates_Call {
	return &MockStateManager_WriteNullifiersForReceivedStates_Call{Call: _e.mock.On("WriteNullifiersForReceivedStates", ctx, dbTX, domainName, nullifiers)}
}

func (_c *MockStateManager_WriteNullifiersForReceivedStates_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, domainName string, nullifiers []*NullifierUpsert)) *MockStateManager_WriteNullifiersForReceivedStates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []*NullifierUpsert
		if args[3] != nil {
			arg3 = args[3].([]*NullifierUpsert)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockStateManager_WriteNullifiersForReceivedStates_Call) Return(err error) *MockStateManager_WriteNullifiersForReceivedStates_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStateManager_WriteNullifiersForReceivedStates_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, domainName string, nullifiers []*NullifierUpsert) error) *MockStateManager_WriteNullifiersForReceivedStates_Call {
	_c.Call.Return(run)
	return _c
}

// WritePreVerifiedStates provides a mock function for the type MockStateManager
func (_mock *MockStateManager) WritePreVerifiedStates(ctx context.Context, dbTX persistence.DBTX, domainName string, states []*StateUpsertOutsideContext) ([]*pldapi.State, error) {
	ret := _mock.Called(ctx, dbTX, domainName, states)

	if len(ret) == 0 {
		panic("no return value specified for WritePreVerifiedStates")
	}

	var r0 []*pldapi.State
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, string, []*StateUpsertOutsideContext) ([]*pldapi.State, error)); ok {
		return returnFunc(ctx, dbTX, domainName, states)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, string, []*StateUpsertOutsideContext) []*pldapi.State); ok {
		r0 = returnFunc(ctx, dbTX, domainName, states)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pldapi.State)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, string, []*StateUpsertOutsideContext) error); ok {
		r1 = returnFunc(ctx, dbTX, domainName, states)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStateManager_WritePreVerifiedStates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WritePreVerifiedStates'
type MockStateManager_WritePreVerifiedStates_Call struct {
	*mock.Call
}

// WritePreVerifiedStates is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - domainName string
//   - states []*StateUpsertOutsideContext
func (_e *MockStateManager_Expecter) WritePreVerifiedStates(ctx interface{}, dbTX interface{}, domainName interface{}, states interface{}) *MockStateManager_WritePreVerifiedStates_Call {
	return &MockStateManager_WritePreVerifiedStates_Call{Call: _e.mock.On("WritePreVerifiedStates", ctx, dbTX, domainName, states)}
}

func (_c *MockStateManager_WritePreVerifiedStates_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, domainName string, states []*StateUpsertOutsideContext)) *MockStateManager_WritePreVerifiedStates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []*StateUpsertOutsideContext
		if args[3] != nil {
			arg3 = args[3].([]*StateUpsertOutsideContext)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockStateManager_WritePreVerifiedStates_Call) Return(states1 []*pldapi.State, err error) *MockStateManager_WritePreVerifiedStates_Call {
	_c.Call.Return(states1, err)
	return _c
}

func (_c *MockStateManager_WritePreVerifiedStates_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, domainName string, states []*StateUpsertOutsideContext) ([]*pldapi.State, error)) *MockStateManager_WritePreVerifiedStates_Call {
	_c.Call.Return(run)
	return _c
}

// WriteReceivedStates provides a mock function for the type MockStateManager
func (_mock *MockStateManager) WriteReceivedStates(ctx context.Context, dbTX persistence.DBTX, domainName string, states []*StateUpsertOutsideContext) ([]*pldapi.State, error) {
	ret := _mock.Called(ctx, dbTX, domainName, states)

	if len(ret) == 0 {
		panic("no return value specified for WriteReceivedStates")
	}

	var r0 []*pldapi.State
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, string, []*StateUpsertOutsideContext) ([]*pldapi.State, error)); ok {
		return returnFunc(ctx, dbTX, domainName, states)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, string, []*StateUpsertOutsideContext) []*pldapi.State); ok {
		r0 = returnFunc(ctx, dbTX, domainName, states)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pldapi.State)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, string, []*StateUpsertOutsideContext) error); ok {
		r1 = returnFunc(ctx, dbTX, domainName, states)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStateManager_WriteReceivedStates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteReceivedStates'
type MockStateManager_WriteReceivedStates_Call struct {
	*mock.Call
}

// WriteReceivedStates is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - domainName string
//   - states []*StateUpsertOutsideContext
func (_e *MockStateManager_Expecter) WriteReceivedStates(ctx interface{}, dbTX interface{}, domainName interface{}, states interface{}) *MockStateManager_WriteReceivedStates_Call {
	return &MockStateManager_WriteReceivedStates_Call{Call: _e.mock.On("WriteReceivedStates", ctx, dbTX, domainName, states)}
}

func (_c *MockStateManager_WriteReceivedStates_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, domainName string, states []*StateUpsertOutsideContext)) *MockStateManager_WriteReceivedStates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []*StateUpsertOutsideContext
		if args[3] != nil {
			arg3 = args[3].([]*StateUpsertOutsideContext)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockStateManager_WriteReceivedStates_Call) Return(states1 []*pldapi.State, err error) *MockStateManager_WriteReceivedStates_Call {
	_c.Call.Return(states1, err)
	return _c
}

func (_c *MockStateManager_WriteReceivedStates_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, domainName string, states []*StateUpsertOutsideContext) ([]*pldapi.State, error)) *MockStateManager_WriteReceivedStates_Call {
	_c.Call.Return(run)
	return _c
}

// WriteStateFinalizations provides a mock function for the type MockStateManager
func (_mock *MockStateManager) WriteStateFinalizations(ctx context.Context, dbTX persistence.DBTX, spends []*pldapi.StateSpendRecord, reads []*pldapi.StateReadRecord, confirms []*pldapi.StateConfirmRecord, infoRecords []*pldapi.StateInfoRecord) error {
	ret := _mock.Called(ctx, dbTX, spends, reads, confirms, infoRecords)

	if len(ret) == 0 {
		panic("no return value specified for WriteStateFinalizations")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, []*pldapi.StateSpendRecord, []*pldapi.StateReadRecord, []*pldapi.StateConfirmRecord, []*pldapi.StateInfoRecord) error); ok {
		r0 = returnFunc(ctx, dbTX, spends, reads, confirms, infoRecords)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStateManager_WriteStateFinalizations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteStateFinalizations'
type MockStateManager_WriteStateFinalizations_Call struct {
	*mock.Call
}

// WriteStateFinalizations is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - spends []*pldapi.StateSpendRecord
//   - reads []*pldapi.StateReadRecord
//   - confirms []*pldapi.StateConfirmRecord
//   - infoRecords []*pldapi.StateInfoRecord
func (_e *MockStateManager_Expecter) WriteStateFinalizations(ctx interface{}, dbTX interface{}, spends interface{}, reads interface{}, confirms interface{}, infoRecords interface{}) *MockStateManager_WriteStateFinalizations_Call {
	return &MockStateManager_WriteStateFinalizations_Call{Call: _e.mock.On("WriteStateFinalizations", ctx, dbTX, spends, reads, confirms, infoRecords)}
}

func (_c *MockStateManager_WriteStateFinalizations_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, spends []*pldapi.StateSpendRecord, reads []*pldapi.StateReadRecord, confirms []*pldapi.StateConfirmRecord, infoRecords []*pldapi.StateInfoRecord)) *MockStateManager_WriteStateFinalizations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 []*pldapi.StateSpendRecord
		if args[2] != nil {
			arg2 = args[2].([]*pldapi.StateSpendRecord)
		}
		var arg3 []*pldapi.StateReadRecord
		if args[3] != nil {
			arg3 = args[3].([]*pldapi.StateReadRecord)
		}
		var arg4 []*pldapi.StateConfirmRecord
		if args[4] != nil {
			arg4 = args[4].([]*pldapi.StateConfirmRecord)
		}
		var arg5 []*pldapi.StateInfoRecord
		if args[5] != nil {
			arg5 = args[5].([]*pldapi.StateInfoRecord)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *MockStateManager_WriteStateFinalizations_Call) Return(err error) *MockStateManager_WriteStateFinalizations_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStateManager_WriteStateFinalizations_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, spends []*pldapi.StateSpendRecord, reads []*pldapi.StateReadRecord, confirms []*pldapi.StateConfirmRecord, infoRecords []*pldapi.StateInfoRecord) error) *MockStateManager_WriteStateFinalizations_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDomainContext creates a new instance of MockDomainContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDomainContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDomainContext {
	mock := &MockDomainContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDomainContext is an autogenerated mock type for the DomainContext type
type MockDomainContext struct {
	mock.Mock
}

type MockDomainContext_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDomainContext) EXPECT() *MockDomainContext_Expecter {
	return &MockDomainContext_Expecter{mock: &_m.Mock}
}

// AddStateLocks provides a mock function for the type MockDomainContext
func (_mock *MockDomainContext) AddStateLocks(locks ...*pldapi.StateLock) error {
	// *pldapi.StateLock
	_va := make([]interface{}, len(locks))
	for _i := range locks {
		_va[_i] = locks[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddStateLocks")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(...*pldapi.StateLock) error); ok {
		r0 = returnFunc(locks...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDomainContext_AddStateLocks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddStateLocks'
type MockDomainContext_AddStateLocks_Call struct {
	*mock.Call
}

// AddStateLocks is a helper method to define mock.On call
//   - locks ...*pldapi.StateLock
func (_e *MockDomainContext_Expecter) AddStateLocks(locks ...interface{}) *MockDomainContext_AddStateLocks_Call {
	return &MockDomainContext_AddStateLocks_Call{Call: _e.mock.On("AddStateLocks",
		append([]interface{}{}, locks...)...)}
}

func (_c *MockDomainContext_AddStateLocks_Call) Run(run func(locks ...*pldapi.StateLock)) *MockDomainContext_AddStateLocks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []*pldapi.StateLock
		variadicArgs := make([]*pldapi.StateLock, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(*pldapi.StateLock)
			}
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *MockDomainContext_AddStateLocks_Call) Return(err error) *MockDomainContext_AddStateLocks_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDomainContext_AddStateLocks_Call) RunAndReturn(run func(locks ...*pldapi.StateLock) error) *MockDomainContext_AddStateLocks_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function for the type MockDomainContext
func (_mock *MockDomainContext) Close() {
	_mock.Called()
	return
}

// MockDomainContext_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockDomainContext_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockDomainContext_Expecter) Close() *MockDomainContext_Close_Call {
	return &MockDomainContext_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockDomainContext_Close_Call) Run(run func()) *MockDomainContext_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDomainContext_Close_Call) Return() *MockDomainContext_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDomainContext_Close_Call) RunAndReturn(run func()) *MockDomainContext_Close_Call {
	_c.Run(run)
	return _c
}

// Ctx provides a mock function for the type MockDomainContext
func (_mock *MockDomainContext) Ctx() context.Context {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ctx")
	}

	var r0 context.Context
	if returnFunc, ok := ret.Get(0).(func() context.Context); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	return r0
}

// MockDomainContext_Ctx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ctx'
type MockDomainContext_Ctx_Call struct {
	*mock.Call
}

// Ctx is a helper method to define mock.On call
func (_e *MockDomainContext_Expecter) Ctx() *MockDomainContext_Ctx_Call {
	return &MockDomainContext_Ctx_Call{Call: _e.mock.On("Ctx")}
}

func (_c *MockDomainContext_Ctx_Call) Run(run func()) *MockDomainContext_Ctx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDomainContext_Ctx_Call) Return(context1 context.Context) *MockDomainContext_Ctx_Call {
	_c.Call.Return(context1)
	return _c
}

func (_c *MockDomainContext_Ctx_Call) RunAndReturn(run func() context.Context) *MockDomainContext_Ctx_Call {
	_c.Call.Return(run)
	return _c
}

// ExportSnapshot provides a mock function for the type MockDomainContext
func (_mock *MockDomainContext) ExportSnapshot() ([]byte, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ExportSnapshot")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []byte); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainContext_ExportSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportSnapshot'
type MockDomainContext_ExportSnapshot_Call struct {
	*mock.Call
}

// ExportSnapshot is a helper method to define mock.On call
func (_e *MockDomainContext_Expecter) ExportSnapshot() *MockDomainContext_ExportSnapshot_Call {
	return &MockDomainContext_ExportSnapshot_Call{Call: _e.mock.On("ExportSnapshot")}
}

func (_c *MockDomainContext_ExportSnapshot_Call) Run(run func()) *MockDomainContext_ExportSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDomainContext_ExportSnapshot_Call) Return(bytes []byte, err error) *MockDomainContext_ExportSnapshot_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockDomainContext_ExportSnapshot_Call) RunAndReturn(run func() ([]byte, error)) *MockDomainContext_ExportSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// FindAvailableNullifiers provides a mock function for the type MockDomainContext
func (_mock *MockDomainContext) FindAvailableNullifiers(dbTX persistence.DBTX, schemaID pldtypes.Bytes32, query1 *query.QueryJSON) (Schema, []*pldapi.State, error) {
	ret := _mock.Called(dbTX, schemaID, query1)

	if len(ret) == 0 {
		panic("no return value specified for FindAvailableNullifiers")
	}

	var r0 Schema
	var r1 []*pldapi.State
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(persistence.DBTX, pldtypes.Bytes32, *query.QueryJSON) (Schema, []*pldapi.State, error)); ok {
		return returnFunc(dbTX, schemaID, query1)
	}
	if returnFunc, ok := ret.Get(0).(func(persistence.DBTX, pldtypes.Bytes32, *query.QueryJSON) Schema); ok {
		r0 = returnFunc(dbTX, schemaID, query1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Schema)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(persistence.DBTX, pldtypes.Bytes32, *query.QueryJSON) []*pldapi.State); ok {
		r1 = returnFunc(dbTX, schemaID, query1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*pldapi.State)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(persistence.DBTX, pldtypes.Bytes32, *query.QueryJSON) error); ok {
		r2 = returnFunc(dbTX, schemaID, query1)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockDomainContext_FindAvailableNullifiers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAvailableNullifiers'
type MockDomainContext_FindAvailableNullifiers_Call struct {
	*mock.Call
}

// FindAvailableNullifiers is a helper method to define mock.On call
//   - dbTX persistence.DBTX
//   - schemaID pldtypes.Bytes32
//   - query1 *query.QueryJSON
func (_e *MockDomainContext_Expecter) FindAvailableNullifiers(dbTX interface{}, schemaID interface{}, query1 interface{}) *MockDomainContext_FindAvailableNullifiers_Call {
	return &MockDomainContext_FindAvailableNullifiers_Call{Call: _e.mock.On("FindAvailableNullifiers", dbTX, schemaID, query1)}
}

func (_c *MockDomainContext_FindAvailableNullifiers_Call) Run(run func(dbTX persistence.DBTX, schemaID pldtypes.Bytes32, query1 *query.QueryJSON)) *MockDomainContext_FindAvailableNullifiers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 persistence.DBTX
		if args[0] != nil {
			arg0 = args[0].(persistence.DBTX)
		}
		var arg1 pldtypes.Bytes32
		if args[1] != nil {
			arg1 = args[1].(pldtypes.Bytes32)
		}
		var arg2 *query.QueryJSON
		if args[2] != nil {
			arg2 = args[2].(*query.QueryJSON)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDomainContext_FindAvailableNullifiers_Call) Return(schema Schema, states []*pldapi.State, err error) *MockDomainContext_FindAvailableNullifiers_Call {
	_c.Call.Return(schema, states, err)
	return _c
}

func (_c *MockDomainContext_FindAvailableNullifiers_Call) RunAndReturn(run func(dbTX persistence.DBTX, schemaID pldtypes.Bytes32, query1 *query.QueryJSON) (Schema, []*pldapi.State, error)) *MockDomainContext_FindAvailableNullifiers_Call {
	_c.Call.Return(run)
	return _c
}

// FindAvailableStates provides a mock function for the type MockDomainContext
func (_mock *MockDomainContext) FindAvailableStates(dbTX persistence.DBTX, schemaID pldtypes.Bytes32, query1 *query.QueryJSON) (Schema, []*pldapi.State, error) {
	ret := _mock.Called(dbTX, schemaID, query1)

	if len(ret) == 0 {
		panic("no return value specified for FindAvailableStates")
	}

	var r0 Schema
	var r1 []*pldapi.State
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(persistence.DBTX, pldtypes.Bytes32, *query.QueryJSON) (Schema, []*pldapi.State, error)); ok {
		return returnFunc(dbTX, schemaID, query1)
	}
	if returnFunc, ok := ret.Get(0).(func(persistence.DBTX, pldtypes.Bytes32, *query.QueryJSON) Schema); ok {
		r0 = returnFunc(dbTX, schemaID, query1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Schema)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(persistence.DBTX, pldtypes.Bytes32, *query.QueryJSON) []*pldapi.State); ok {
		r1 = returnFunc(dbTX, schemaID, query1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*pldapi.State)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(persistence.DBTX, pldtypes.Bytes32, *query.QueryJSON) error); ok {
		r2 = returnFunc(dbTX, schemaID, query1)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockDomainContext_FindAvailableStates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAvailableStates'
type MockDomainContext_FindAvailableStates_Call struct {
	*mock.Call
}

// FindAvailableStates is a helper method to define mock.On call
//   - dbTX persistence.DBTX
//   - schemaID pldtypes.Bytes32
//   - query1 *query.QueryJSON
func (_e *MockDomainContext_Expecter) FindAvailableStates(dbTX interface{}, schemaID interface{}, query1 interface{}) *MockDomainContext_FindAvailableStates_Call {
	return &MockDomainContext_FindAvailableStates_Call{Call: _e.mock.On("FindAvailableStates", dbTX, schemaID, query1)}
}

func (_c *MockDomainContext_FindAvailableStates_Call) Run(run func(dbTX persistence.DBTX, schemaID pldtypes.Bytes32, query1 *query.QueryJSON)) *MockDomainContext_FindAvailableStates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 persistence.DBTX
		if args[0] != nil {
			arg0 = args[0].(persistence.DBTX)
		}
		var arg1 pldtypes.Bytes32
		if args[1] != nil {
			arg1 = args[1].(pldtypes.Bytes32)
		}
		var arg2 *query.QueryJSON
		if args[2] != nil {
			arg2 = args[2].(*query.QueryJSON)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDomainContext_FindAvailableStates_Call) Return(schema Schema, states []*pldapi.State, err error) *MockDomainContext_FindAvailableStates_Call {
	_c.Call.Return(schema, states, err)
	return _c
}

func (_c *MockDomainContext_FindAvailableStates_Call) RunAndReturn(run func(dbTX persistence.DBTX, schemaID pldtypes.Bytes32, query1 *query.QueryJSON) (Schema, []*pldapi.State, error)) *MockDomainContext_FindAvailableStates_Call {
	_c.Call.Return(run)
	return _c
}

// Flush provides a mock function for the type MockDomainContext
func (_mock *MockDomainContext) Flush(dbTX persistence.DBTX) error {
	ret := _mock.Called(dbTX)

	if len(ret) == 0 {
		panic("no return value specified for Flush")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(persistence.DBTX) error); ok {
		r0 = returnFunc(dbTX)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDomainContext_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type MockDomainContext_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
//   - dbTX persistence.DBTX
func (_e *MockDomainContext_Expecter) Flush(dbTX interface{}) *MockDomainContext_Flush_Call {
	return &MockDomainContext_Flush_Call{Call: _e.mock.On("Flush", dbTX)}
}

func (_c *MockDomainContext_Flush_Call) Run(run func(dbTX persistence.DBTX)) *MockDomainContext_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 persistence.DBTX
		if args[0] != nil {
			arg0 = args[0].(persistence.DBTX)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDomainContext_Flush_Call) Return(err error) *MockDomainContext_Flush_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDomainContext_Flush_Call) RunAndReturn(run func(dbTX persistence.DBTX) error) *MockDomainContext_Flush_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatesByID provides a mock function for the type MockDomainContext
func (_mock *MockDomainContext) GetStatesByID(dbTX persistence.DBTX, schemaID pldtypes.Bytes32, ids []string) (Schema, []*pldapi.State, error) {
	ret := _mock.Called(dbTX, schemaID, ids)

	if len(ret) == 0 {
		panic("no return value specified for GetStatesByID")
	}

	var r0 Schema
	var r1 []*pldapi.State
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(persistence.DBTX, pldtypes.Bytes32, []string) (Schema, []*pldapi.State, error)); ok {
		return returnFunc(dbTX, schemaID, ids)
	}
	if returnFunc, ok := ret.Get(0).(func(persistence.DBTX, pldtypes.Bytes32, []string) Schema); ok {
		r0 = returnFunc(dbTX, schemaID, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Schema)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(persistence.DBTX, pldtypes.Bytes32, []string) []*pldapi.State); ok {
		r1 = returnFunc(dbTX, schemaID, ids)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*pldapi.State)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(persistence.DBTX, pldtypes.Bytes32, []string) error); ok {
		r2 = returnFunc(dbTX, schemaID, ids)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockDomainContext_GetStatesByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatesByID'
type MockDomainContext_GetStatesByID_Call struct {
	*mock.Call
}

// GetStatesByID is a helper method to define mock.On call
//   - dbTX persistence.DBTX
//   - schemaID pldtypes.Bytes32
//   - ids []string
func (_e *MockDomainContext_Expecter) GetStatesByID(dbTX interface{}, schemaID interface{}, ids interface{}) *MockDomainContext_GetStatesByID_Call {
	return &MockDomainContext_GetStatesByID_Call{Call: _e.mock.On("GetStatesByID", dbTX, schemaID, ids)}
}

func (_c *MockDomainContext_GetStatesByID_Call) Run(run func(dbTX persistence.DBTX, schemaID pldtypes.Bytes32, ids []string)) *MockDomainContext_GetStatesByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 persistence.DBTX
		if args[0] != nil {
			arg0 = args[0].(persistence.DBTX)
		}
		var arg1 pldtypes.Bytes32
		if args[1] != nil {
			arg1 = args[1].(pldtypes.Bytes32)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDomainContext_GetStatesByID_Call) Return(schema Schema, states []*pldapi.State, err error) *MockDomainContext_GetStatesByID_Call {
	_c.Call.Return(schema, states, err)
	return _c
}

func (_c *MockDomainContext_GetStatesByID_Call) RunAndReturn(run func(dbTX persistence.DBTX, schemaID pldtypes.Bytes32, ids []string) (Schema, []*pldapi.State, error)) *MockDomainContext_GetStatesByID_Call {
	_c.Call.Return(run)
	return _c
}

// ImportSnapshot provides a mock function for the type MockDomainContext
func (_mock *MockDomainContext) ImportSnapshot(bytes []byte) error {
	ret := _mock.Called(bytes)

	if len(ret) == 0 {
		panic("no return value specified for ImportSnapshot")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = returnFunc(bytes)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDomainContext_ImportSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImportSnapshot'
type MockDomainContext_ImportSnapshot_Call struct {
	*mock.Call
}

// ImportSnapshot is a helper method to define mock.On call
//   - bytes []byte
func (_e *MockDomainContext_Expecter) ImportSnapshot(bytes interface{}) *MockDomainContext_ImportSnapshot_Call {
	return &MockDomainContext_ImportSnapshot_Call{Call: _e.mock.On("ImportSnapshot", bytes)}
}

func (_c *MockDomainContext_ImportSnapshot_Call) Run(run func(bytes []byte)) *MockDomainContext_ImportSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDomainContext_ImportSnapshot_Call) Return(err error) *MockDomainContext_ImportSnapshot_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDomainContext_ImportSnapshot_Call) RunAndReturn(run func(bytes []byte) error) *MockDomainContext_ImportSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function for the type MockDomainContext
func (_mock *MockDomainContext) Info() DomainContextInfo {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 DomainContextInfo
	if returnFunc, ok := ret.Get(0).(func() DomainContextInfo); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(DomainContextInfo)
	}
	return r0
}

// MockDomainContext_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockDomainContext_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
func (_e *MockDomainContext_Expecter) Info() *MockDomainContext_Info_Call {
	return &MockDomainContext_Info_Call{Call: _e.mock.On("Info")}
}

func (_c *MockDomainContext_Info_Call) Run(run func()) *MockDomainContext_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDomainContext_Info_Call) Return(domainContextInfo DomainContextInfo) *MockDomainContext_Info_Call {
	_c.Call.Return(domainContextInfo)
	return _c
}

func (_c *MockDomainContext_Info_Call) RunAndReturn(run func() DomainContextInfo) *MockDomainContext_Info_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function for the type MockDomainContext
func (_mock *MockDomainContext) Reset() {
	_mock.Called()
	return
}

// MockDomainContext_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type MockDomainContext_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
func (_e *MockDomainContext_Expecter) Reset() *MockDomainContext_Reset_Call {
	return &MockDomainContext_Reset_Call{Call: _e.mock.On("Reset")}
}

func (_c *MockDomainContext_Reset_Call) Run(run func()) *MockDomainContext_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDomainContext_Reset_Call) Return() *MockDomainContext_Reset_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDomainContext_Reset_Call) RunAndReturn(run func()) *MockDomainContext_Reset_Call {
	_c.Run(run)
	return _c
}

// ResetTransactions provides a mock function for the type MockDomainContext
func (_mock *MockDomainContext) ResetTransactions(transactionID ...uuid.UUID) {
	// uuid.UUID
	_va := make([]interface{}, len(transactionID))
	for _i := range transactionID {
		_va[_i] = transactionID[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_mock.Called(_ca...)
	return
}

// MockDomainContext_ResetTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetTransactions'
type MockDomainContext_ResetTransactions_Call struct {
	*mock.Call
}

// ResetTransactions is a helper method to define mock.On call
//   - transactionID ...uuid.UUID
func (_e *MockDomainContext_Expecter) ResetTransactions(transactionID ...interface{}) *MockDomainContext_ResetTransactions_Call {
	return &MockDomainContext_ResetTransactions_Call{Call: _e.mock.On("ResetTransactions",
		append([]interface{}{}, transactionID...)...)}
}

func (_c *MockDomainContext_ResetTransactions_Call) Run(run func(transactionID ...uuid.UUID)) *MockDomainContext_ResetTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []uuid.UUID
		variadicArgs := make([]uuid.UUID, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(uuid.UUID)
			}
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *MockDomainContext_ResetTransactions_Call) Return() *MockDomainContext_ResetTransactions_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDomainContext_ResetTransactions_Call) RunAndReturn(run func(transactionID ...uuid.UUID)) *MockDomainContext_ResetTransactions_Call {
	_c.Run(run)
	return _c
}

// StateLocksByTransaction provides a mock function for the type MockDomainContext
func (_mock *MockDomainContext) StateLocksByTransaction() map[uuid.UUID][]pldapi.StateLock {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for StateLocksByTransaction")
	}

	var r0 map[uuid.UUID][]pldapi.StateLock
	if returnFunc, ok := ret.Get(0).(func() map[uuid.UUID][]pldapi.StateLock); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uuid.UUID][]pldapi.StateLock)
		}
	}
	return r0
}

// MockDomainContext_StateLocksByTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StateLocksByTransaction'
type MockDomainContext_StateLocksByTransaction_Call struct {
	*mock.Call
}

// StateLocksByTransaction is a helper method to define mock.On call
func (_e *MockDomainContext_Expecter) StateLocksByTransaction() *MockDomainContext_StateLocksByTransaction_Call {
	return &MockDomainContext_StateLocksByTransaction_Call{Call: _e.mock.On("StateLocksByTransaction")}
}

func (_c *MockDomainContext_StateLocksByTransaction_Call) Run(run func()) *MockDomainContext_StateLocksByTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDomainContext_StateLocksByTransaction_Call) Return(uUIDToStateLocks map[uuid.UUID][]pldapi.StateLock) *MockDomainContext_StateLocksByTransaction_Call {
	_c.Call.Return(uUIDToStateLocks)
	return _c
}

func (_c *MockDomainContext_StateLocksByTransaction_Call) RunAndReturn(run func() map[uuid.UUID][]pldapi.StateLock) *MockDomainContext_StateLocksByTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertNullifiers provides a mock function for the type MockDomainContext
func (_mock *MockDomainContext) UpsertNullifiers(nullifiers ...*NullifierUpsert) error {
	// *NullifierUpsert
	_va := make([]interface{}, len(nullifiers))
	for _i := range nullifiers {
		_va[_i] = nullifiers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpsertNullifiers")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(...*NullifierUpsert) error); ok {
		r0 = returnFunc(nullifiers...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDomainContext_UpsertNullifiers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertNullifiers'
type MockDomainContext_UpsertNullifiers_Call struct {
	*mock.Call
}

// UpsertNullifiers is a helper method to define mock.On call
//   - nullifiers ...*NullifierUpsert
func (_e *MockDomainContext_Expecter) UpsertNullifiers(nullifiers ...interface{}) *MockDomainContext_UpsertNullifiers_Call {
	return &MockDomainContext_UpsertNullifiers_Call{Call: _e.mock.On("UpsertNullifiers",
		append([]interface{}{}, nullifiers...)...)}
}

func (_c *MockDomainContext_UpsertNullifiers_Call) Run(run func(nullifiers ...*NullifierUpsert)) *MockDomainContext_UpsertNullifiers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []*NullifierUpsert
		variadicArgs := make([]*NullifierUpsert, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(*NullifierUpsert)
			}
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *MockDomainContext_UpsertNullifiers_Call) Return(err error) *MockDomainContext_UpsertNullifiers_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDomainContext_UpsertNullifiers_Call) RunAndReturn(run func(nullifiers ...*NullifierUpsert) error) *MockDomainContext_UpsertNullifiers_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertStates provides a mock function for the type MockDomainContext
func (_mock *MockDomainContext) UpsertStates(dbTX persistence.DBTX, states ...*StateUpsert) ([]*pldapi.State, error) {
	// *StateUpsert
	_va := make([]interface{}, len(states))
	for _i := range states {
		_va[_i] = states[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, dbTX)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpsertStates")
	}

	var r0 []*pldapi.State
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(persistence.DBTX, ...*StateUpsert) ([]*pldapi.State, error)); ok {
		return returnFunc(dbTX, states...)
	}
	if returnFunc, ok := ret.Get(0).(func(persistence.DBTX, ...*StateUpsert) []*pldapi.State); ok {
		r0 = returnFunc(dbTX, states...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pldapi.State)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(persistence.DBTX, ...*StateUpsert) error); ok {
		r1 = returnFunc(dbTX, states...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainContext_UpsertStates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertStates'
type MockDomainContext_UpsertStates_Call struct {
	*mock.Call
}

// UpsertStates is a helper method to define mock.On call
//   - dbTX persistence.DBTX
//   - states ...*StateUpsert
func (_e *MockDomainContext_Expecter) UpsertStates(dbTX interface{}, states ...interface{}) *MockDomainContext_UpsertStates_Call {
	return &MockDomainContext_UpsertStates_Call{Call: _e.mock.On("UpsertStates",
		append([]interface{}{dbTX}, states...)...)}
}

func (_c *MockDomainContext_UpsertStates_Call) Run(run func(dbTX persistence.DBTX, states ...*StateUpsert)) *MockDomainContext_UpsertStates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 persistence.DBTX
		if args[0] != nil {
			arg0 = args[0].(persistence.DBTX)
		}
		var arg1 []*StateUpsert
		variadicArgs := make([]*StateUpsert, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(*StateUpsert)
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockDomainContext_UpsertStates_Call) Return(s []*pldapi.State, err error) *MockDomainContext_UpsertStates_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockDomainContext_UpsertStates_Call) RunAndReturn(run func(dbTX persistence.DBTX, states ...*StateUpsert) ([]*pldapi.State, error)) *MockDomainContext_UpsertStates_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSchema creates a new instance of MockSchema. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSchema(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSchema {
	mock := &MockSchema{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSchema is an autogenerated mock type for the Schema type
type MockSchema struct {
	mock.Mock
}

type MockSchema_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSchema) EXPECT() *MockSchema_Expecter {
	return &MockSchema_Expecter{mock: &_m.Mock}
}

// ID provides a mock function for the type MockSchema
func (_mock *MockSchema) ID() pldtypes.Bytes32 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 pldtypes.Bytes32
	if returnFunc, ok := ret.Get(0).(func() pldtypes.Bytes32); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pldtypes.Bytes32)
		}
	}
	return r0
}

// MockSchema_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockSchema_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MockSchema_Expecter) ID() *MockSchema_ID_Call {
	return &MockSchema_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *MockSchema_ID_Call) Run(run func()) *MockSchema_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSchema_ID_Call) Return(bytes32 pldtypes.Bytes32) *MockSchema_ID_Call {
	_c.Call.Return(bytes32)
	return _c
}

func (_c *MockSchema_ID_Call) RunAndReturn(run func() pldtypes.Bytes32) *MockSchema_ID_Call {
	_c.Call.Return(run)
	return _c
}

// Persisted provides a mock function for the type MockSchema
func (_mock *MockSchema) Persisted() *pldapi.Schema {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Persisted")
	}

	var r0 *pldapi.Schema
	if returnFunc, ok := ret.Get(0).(func() *pldapi.Schema); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.Schema)
		}
	}
	return r0
}

// MockSchema_Persisted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Persisted'
type MockSchema_Persisted_Call struct {
	*mock.Call
}

// Persisted is a helper method to define mock.On call
func (_e *MockSchema_Expecter) Persisted() *MockSchema_Persisted_Call {
	return &MockSchema_Persisted_Call{Call: _e.mock.On("Persisted")}
}

func (_c *MockSchema_Persisted_Call) Run(run func()) *MockSchema_Persisted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSchema_Persisted_Call) Return(schema *pldapi.Schema) *MockSchema_Persisted_Call {
	_c.Call.Return(schema)
	return _c
}

func (_c *MockSchema_Persisted_Call) RunAndReturn(run func() *pldapi.Schema) *MockSchema_Persisted_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessState provides a mock function for the type MockSchema
func (_mock *MockSchema) ProcessState(ctx context.Context, contractAddress *pldtypes.EthAddress, data pldtypes.RawJSON, id pldtypes.HexBytes, customHash bool) (*StateWithLabels, error) {
	ret := _mock.Called(ctx, contractAddress, data, id, customHash)

	if len(ret) == 0 {
		panic("no return value specified for ProcessState")
	}

	var r0 *StateWithLabels
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pldtypes.EthAddress, pldtypes.RawJSON, pldtypes.HexBytes, bool) (*StateWithLabels, error)); ok {
		return returnFunc(ctx, contractAddress, data, id, customHash)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pldtypes.EthAddress, pldtypes.RawJSON, pldtypes.HexBytes, bool) *StateWithLabels); ok {
		r0 = returnFunc(ctx, contractAddress, data, id, customHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StateWithLabels)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *pldtypes.EthAddress, pldtypes.RawJSON, pldtypes.HexBytes, bool) error); ok {
		r1 = returnFunc(ctx, contractAddress, data, id, customHash)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSchema_ProcessState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessState'
type MockSchema_ProcessState_Call struct {
	*mock.Call
}

// ProcessState is a helper method to define mock.On call
//   - ctx context.Context
//   - contractAddress *pldtypes.EthAddress
//   - data pldtypes.RawJSON
//   - id pldtypes.HexBytes
//   - customHash bool
func (_e *MockSchema_Expecter) ProcessState(ctx interface{}, contractAddress interface{}, data interface{}, id interface{}, customHash interface{}) *MockSchema_ProcessState_Call {
	return &MockSchema_ProcessState_Call{Call: _e.mock.On("ProcessState", ctx, contractAddress, data, id, customHash)}
}

func (_c *MockSchema_ProcessState_Call) Run(run func(ctx context.Context, contractAddress *pldtypes.EthAddress, data pldtypes.RawJSON, id pldtypes.HexBytes, customHash bool)) *MockSchema_ProcessState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pldtypes.EthAddress
		if args[1] != nil {
			arg1 = args[1].(*pldtypes.EthAddress)
		}
		var arg2 pldtypes.RawJSON
		if args[2] != nil {
			arg2 = args[2].(pldtypes.RawJSON)
		}
		var arg3 pldtypes.HexBytes
		if args[3] != nil {
			arg3 = args[3].(pldtypes.HexBytes)
		}
		var arg4 bool
		if args[4] != nil {
			arg4 = args[4].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockSchema_ProcessState_Call) Return(stateWithLabels *StateWithLabels, err error) *MockSchema_ProcessState_Call {
	_c.Call.Return(stateWithLabels, err)
	return _c
}

func (_c *MockSchema_ProcessState_Call) RunAndReturn(run func(ctx context.Context, contractAddress *pldtypes.EthAddress, data pldtypes.RawJSON, id pldtypes.HexBytes, customHash bool) (*StateWithLabels, error)) *MockSchema_ProcessState_Call {
	_c.Call.Return(run)
	return _c
}

// RecoverLabels provides a mock function for the type MockSchema
func (_mock *MockSchema) RecoverLabels(ctx context.Context, s *pldapi.State) (*StateWithLabels, error) {
	ret := _mock.Called(ctx, s)

	if len(ret) == 0 {
		panic("no return value specified for RecoverLabels")
	}

	var r0 *StateWithLabels
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pldapi.State) (*StateWithLabels, error)); ok {
		return returnFunc(ctx, s)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pldapi.State) *StateWithLabels); ok {
		r0 = returnFunc(ctx, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StateWithLabels)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *pldapi.State) error); ok {
		r1 = returnFunc(ctx, s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSchema_RecoverLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecoverLabels'
type MockSchema_RecoverLabels_Call struct {
	*mock.Call
}

// RecoverLabels is a helper method to define mock.On call
//   - ctx context.Context
//   - s *pldapi.State
func (_e *MockSchema_Expecter) RecoverLabels(ctx interface{}, s interface{}) *MockSchema_RecoverLabels_Call {
	return &MockSchema_RecoverLabels_Call{Call: _e.mock.On("RecoverLabels", ctx, s)}
}

func (_c *MockSchema_RecoverLabels_Call) Run(run func(ctx context.Context, s *pldapi.State)) *MockSchema_RecoverLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pldapi.State
		if args[1] != nil {
			arg1 = args[1].(*pldapi.State)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSchema_RecoverLabels_Call) Return(stateWithLabels *StateWithLabels, err error) *MockSchema_RecoverLabels_Call {
	_c.Call.Return(stateWithLabels, err)
	return _c
}

func (_c *MockSchema_RecoverLabels_Call) RunAndReturn(run func(ctx context.Context, s *pldapi.State) (*StateWithLabels, error)) *MockSchema_RecoverLabels_Call {
	_c.Call.Return(run)
	return _c
}

// Signature provides a mock function for the type MockSchema
func (_mock *MockSchema) Signature() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Signature")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockSchema_Signature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Signature'
type MockSchema_Signature_Call struct {
	*mock.Call
}

// Signature is a helper method to define mock.On call
func (_e *MockSchema_Expecter) Signature() *MockSchema_Signature_Call {
	return &MockSchema_Signature_Call{Call: _e.mock.On("Signature")}
}

func (_c *MockSchema_Signature_Call) Run(run func()) *MockSchema_Signature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSchema_Signature_Call) Return(s string) *MockSchema_Signature_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockSchema_Signature_Call) RunAndReturn(run func() string) *MockSchema_Signature_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function for the type MockSchema
func (_mock *MockSchema) Type() pldapi.SchemaType {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 pldapi.SchemaType
	if returnFunc, ok := ret.Get(0).(func() pldapi.SchemaType); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(pldapi.SchemaType)
	}
	return r0
}

// MockSchema_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type MockSchema_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *MockSchema_Expecter) Type() *MockSchema_Type_Call {
	return &MockSchema_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *MockSchema_Type_Call) Run(run func()) *MockSchema_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSchema_Type_Call) Return(schemaType pldapi.SchemaType) *MockSchema_Type_Call {
	_c.Call.Return(schemaType)
	return _c
}

func (_c *MockSchema_Type_Call) RunAndReturn(run func() pldapi.SchemaType) *MockSchema_Type_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransportManagerToTransport creates a new instance of MockTransportManagerToTransport. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransportManagerToTransport(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransportManagerToTransport {
	mock := &MockTransportManagerToTransport{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTransportManagerToTransport is an autogenerated mock type for the TransportManagerToTransport type
type MockTransportManagerToTransport struct {
	mock.Mock
}

type MockTransportManagerToTransport_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransportManagerToTransport) EXPECT() *MockTransportManagerToTransport_Expecter {
	return &MockTransportManagerToTransport_Expecter{mock: &_m.Mock}
}

// ActivatePeer provides a mock function for the type MockTransportManagerToTransport
func (_mock *MockTransportManagerToTransport) ActivatePeer(context1 context.Context, activatePeerRequest *prototk.ActivatePeerRequest) (*prototk.ActivatePeerResponse, error) {
	ret := _mock.Called(context1, activatePeerRequest)

	if len(ret) == 0 {
		panic("no return value specified for ActivatePeer")
	}

	var r0 *prototk.ActivatePeerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.ActivatePeerRequest) (*prototk.ActivatePeerResponse, error)); ok {
		return returnFunc(context1, activatePeerRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.ActivatePeerRequest) *prototk.ActivatePeerResponse); ok {
		r0 = returnFunc(context1, activatePeerRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.ActivatePeerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.ActivatePeerRequest) error); ok {
		r1 = returnFunc(context1, activatePeerRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransportManagerToTransport_ActivatePeer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ActivatePeer'
type MockTransportManagerToTransport_ActivatePeer_Call struct {
	*mock.Call
}

// ActivatePeer is a helper method to define mock.On call
//   - context1 context.Context
//   - activatePeerRequest *prototk.ActivatePeerRequest
func (_e *MockTransportManagerToTransport_Expecter) ActivatePeer(context1 interface{}, activatePeerRequest interface{}) *MockTransportManagerToTransport_ActivatePeer_Call {
	return &MockTransportManagerToTransport_ActivatePeer_Call{Call: _e.mock.On("ActivatePeer", context1, activatePeerRequest)}
}

func (_c *MockTransportManagerToTransport_ActivatePeer_Call) Run(run func(context1 context.Context, activatePeerRequest *prototk.ActivatePeerRequest)) *MockTransportManagerToTransport_ActivatePeer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.ActivatePeerRequest
		if args[1] != nil {
			arg1 = args[1].(*prototk.ActivatePeerRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTransportManagerToTransport_ActivatePeer_Call) Return(activatePeerResponse *prototk.ActivatePeerResponse, err error) *MockTransportManagerToTransport_ActivatePeer_Call {
	_c.Call.Return(activatePeerResponse, err)
	return _c
}

func (_c *MockTransportManagerToTransport_ActivatePeer_Call) RunAndReturn(run func(context1 context.Context, activatePeerRequest *prototk.ActivatePeerRequest) (*prototk.ActivatePeerResponse, error)) *MockTransportManagerToTransport_ActivatePeer_Call {
	_c.Call.Return(run)
	return _c
}

// ConfigureTransport provides a mock function for the type MockTransportManagerToTransport
func (_mock *MockTransportManagerToTransport) ConfigureTransport(context1 context.Context, configureTransportRequest *prototk.ConfigureTransportRequest) (*prototk.ConfigureTransportResponse, error) {
	ret := _mock.Called(context1, configureTransportRequest)

	if len(ret) == 0 {
		panic("no return value specified for ConfigureTransport")
	}

	var r0 *prototk.ConfigureTransportResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.ConfigureTransportRequest) (*prototk.ConfigureTransportResponse, error)); ok {
		return returnFunc(context1, configureTransportRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.ConfigureTransportRequest) *prototk.ConfigureTransportResponse); ok {
		r0 = returnFunc(context1, configureTransportRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.ConfigureTransportResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.ConfigureTransportRequest) error); ok {
		r1 = returnFunc(context1, configureTransportRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransportManagerToTransport_ConfigureTransport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigureTransport'
type MockTransportManagerToTransport_ConfigureTransport_Call struct {
	*mock.Call
}

// ConfigureTransport is a helper method to define mock.On call
//   - context1 context.Context
//   - configureTransportRequest *prototk.ConfigureTransportRequest
func (_e *MockTransportManagerToTransport_Expecter) ConfigureTransport(context1 interface{}, configureTransportRequest interface{}) *MockTransportManagerToTransport_ConfigureTransport_Call {
	return &MockTransportManagerToTransport_ConfigureTransport_Call{Call: _e.mock.On("ConfigureTransport", context1, configureTransportRequest)}
}

func (_c *MockTransportManagerToTransport_ConfigureTransport_Call) Run(run func(context1 context.Context, configureTransportRequest *prototk.ConfigureTransportRequest)) *MockTransportManagerToTransport_ConfigureTransport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.ConfigureTransportRequest
		if args[1] != nil {
			arg1 = args[1].(*prototk.ConfigureTransportRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTransportManagerToTransport_ConfigureTransport_Call) Return(configureTransportResponse *prototk.ConfigureTransportResponse, err error) *MockTransportManagerToTransport_ConfigureTransport_Call {
	_c.Call.Return(configureTransportResponse, err)
	return _c
}

func (_c *MockTransportManagerToTransport_ConfigureTransport_Call) RunAndReturn(run func(context1 context.Context, configureTransportRequest *prototk.ConfigureTransportRequest) (*prototk.ConfigureTransportResponse, error)) *MockTransportManagerToTransport_ConfigureTransport_Call {
	_c.Call.Return(run)
	return _c
}

// DeactivatePeer provides a mock function for the type MockTransportManagerToTransport
func (_mock *MockTransportManagerToTransport) DeactivatePeer(context1 context.Context, deactivatePeerRequest *prototk.DeactivatePeerRequest) (*prototk.DeactivatePeerResponse, error) {
	ret := _mock.Called(context1, deactivatePeerRequest)

	if len(ret) == 0 {
		panic("no return value specified for DeactivatePeer")
	}

	var r0 *prototk.DeactivatePeerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.DeactivatePeerRequest) (*prototk.DeactivatePeerResponse, error)); ok {
		return returnFunc(context1, deactivatePeerRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.DeactivatePeerRequest) *prototk.DeactivatePeerResponse); ok {
		r0 = returnFunc(context1, deactivatePeerRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.DeactivatePeerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.DeactivatePeerRequest) error); ok {
		r1 = returnFunc(context1, deactivatePeerRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransportManagerToTransport_DeactivatePeer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeactivatePeer'
type MockTransportManagerToTransport_DeactivatePeer_Call struct {
	*mock.Call
}

// DeactivatePeer is a helper method to define mock.On call
//   - context1 context.Context
//   - deactivatePeerRequest *prototk.DeactivatePeerRequest
func (_e *MockTransportManagerToTransport_Expecter) DeactivatePeer(context1 interface{}, deactivatePeerRequest interface{}) *MockTransportManagerToTransport_DeactivatePeer_Call {
	return &MockTransportManagerToTransport_DeactivatePeer_Call{Call: _e.mock.On("DeactivatePeer", context1, deactivatePeerRequest)}
}

func (_c *MockTransportManagerToTransport_DeactivatePeer_Call) Run(run func(context1 context.Context, deactivatePeerRequest *prototk.DeactivatePeerRequest)) *MockTransportManagerToTransport_DeactivatePeer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.DeactivatePeerRequest
		if args[1] != nil {
			arg1 = args[1].(*prototk.DeactivatePeerRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTransportManagerToTransport_DeactivatePeer_Call) Return(deactivatePeerResponse *prototk.DeactivatePeerResponse, err error) *MockTransportManagerToTransport_DeactivatePeer_Call {
	_c.Call.Return(deactivatePeerResponse, err)
	return _c
}

func (_c *MockTransportManagerToTransport_DeactivatePeer_Call) RunAndReturn(run func(context1 context.Context, deactivatePeerRequest *prototk.DeactivatePeerRequest) (*prototk.DeactivatePeerResponse, error)) *MockTransportManagerToTransport_DeactivatePeer_Call {
	_c.Call.Return(run)
	return _c
}

// GetLocalDetails provides a mock function for the type MockTransportManagerToTransport
func (_mock *MockTransportManagerToTransport) GetLocalDetails(context1 context.Context, getLocalDetailsRequest *prototk.GetLocalDetailsRequest) (*prototk.GetLocalDetailsResponse, error) {
	ret := _mock.Called(context1, getLocalDetailsRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetLocalDetails")
	}

	var r0 *prototk.GetLocalDetailsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.GetLocalDetailsRequest) (*prototk.GetLocalDetailsResponse, error)); ok {
		return returnFunc(context1, getLocalDetailsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.GetLocalDetailsRequest) *prototk.GetLocalDetailsResponse); ok {
		r0 = returnFunc(context1, getLocalDetailsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.GetLocalDetailsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.GetLocalDetailsRequest) error); ok {
		r1 = returnFunc(context1, getLocalDetailsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransportManagerToTransport_GetLocalDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLocalDetails'
type MockTransportManagerToTransport_GetLocalDetails_Call struct {
	*mock.Call
}

// GetLocalDetails is a helper method to define mock.On call
//   - context1 context.Context
//   - getLocalDetailsRequest *prototk.GetLocalDetailsRequest
func (_e *MockTransportManagerToTransport_Expecter) GetLocalDetails(context1 interface{}, getLocalDetailsRequest interface{}) *MockTransportManagerToTransport_GetLocalDetails_Call {
	return &MockTransportManagerToTransport_GetLocalDetails_Call{Call: _e.mock.On("GetLocalDetails", context1, getLocalDetailsRequest)}
}

func (_c *MockTransportManagerToTransport_GetLocalDetails_Call) Run(run func(context1 context.Context, getLocalDetailsRequest *prototk.GetLocalDetailsRequest)) *MockTransportManagerToTransport_GetLocalDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.GetLocalDetailsRequest
		if args[1] != nil {
			arg1 = args[1].(*prototk.GetLocalDetailsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTransportManagerToTransport_GetLocalDetails_Call) Return(getLocalDetailsResponse *prototk.GetLocalDetailsResponse, err error) *MockTransportManagerToTransport_GetLocalDetails_Call {
	_c.Call.Return(getLocalDetailsResponse, err)
	return _c
}

func (_c *MockTransportManagerToTransport_GetLocalDetails_Call) RunAndReturn(run func(context1 context.Context, getLocalDetailsRequest *prototk.GetLocalDetailsRequest) (*prototk.GetLocalDetailsResponse, error)) *MockTransportManagerToTransport_GetLocalDetails_Call {
	_c.Call.Return(run)
	return _c
}

// Initialized provides a mock function for the type MockTransportManagerToTransport
func (_mock *MockTransportManagerToTransport) Initialized() {
	_mock.Called()
	return
}

// MockTransportManagerToTransport_Initialized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialized'
type MockTransportManagerToTransport_Initialized_Call struct {
	*mock.Call
}

// Initialized is a helper method to define mock.On call
func (_e *MockTransportManagerToTransport_Expecter) Initialized() *MockTransportManagerToTransport_Initialized_Call {
	return &MockTransportManagerToTransport_Initialized_Call{Call: _e.mock.On("Initialized")}
}

func (_c *MockTransportManagerToTransport_Initialized_Call) Run(run func()) *MockTransportManagerToTransport_Initialized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransportManagerToTransport_Initialized_Call) Return() *MockTransportManagerToTransport_Initialized_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTransportManagerToTransport_Initialized_Call) RunAndReturn(run func()) *MockTransportManagerToTransport_Initialized_Call {
	_c.Run(run)
	return _c
}

// SendMessage provides a mock function for the type MockTransportManagerToTransport
func (_mock *MockTransportManagerToTransport) SendMessage(context1 context.Context, sendMessageRequest *prototk.SendMessageRequest) (*prototk.SendMessageResponse, error) {
	ret := _mock.Called(context1, sendMessageRequest)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 *prototk.SendMessageResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.SendMessageRequest) (*prototk.SendMessageResponse, error)); ok {
		return returnFunc(context1, sendMessageRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.SendMessageRequest) *prototk.SendMessageResponse); ok {
		r0 = returnFunc(context1, sendMessageRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.SendMessageResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.SendMessageRequest) error); ok {
		r1 = returnFunc(context1, sendMessageRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransportManagerToTransport_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type MockTransportManagerToTransport_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - context1 context.Context
//   - sendMessageRequest *prototk.SendMessageRequest
func (_e *MockTransportManagerToTransport_Expecter) SendMessage(context1 interface{}, sendMessageRequest interface{}) *MockTransportManagerToTransport_SendMessage_Call {
	return &MockTransportManagerToTransport_SendMessage_Call{Call: _e.mock.On("SendMessage", context1, sendMessageRequest)}
}

func (_c *MockTransportManagerToTransport_SendMessage_Call) Run(run func(context1 context.Context, sendMessageRequest *prototk.SendMessageRequest)) *MockTransportManagerToTransport_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.SendMessageRequest
		if args[1] != nil {
			arg1 = args[1].(*prototk.SendMessageRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTransportManagerToTransport_SendMessage_Call) Return(sendMessageResponse *prototk.SendMessageResponse, err error) *MockTransportManagerToTransport_SendMessage_Call {
	_c.Call.Return(sendMessageResponse, err)
	return _c
}

func (_c *MockTransportManagerToTransport_SendMessage_Call) RunAndReturn(run func(context1 context.Context, sendMessageRequest *prototk.SendMessageRequest) (*prototk.SendMessageResponse, error)) *MockTransportManagerToTransport_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransportClient creates a new instance of MockTransportClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransportClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransportClient {
	mock := &MockTransportClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTransportClient is an autogenerated mock type for the TransportClient type
type MockTransportClient struct {
	mock.Mock
}

type MockTransportClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransportClient) EXPECT() *MockTransportClient_Expecter {
	return &MockTransportClient_Expecter{mock: &_m.Mock}
}

// HandlePaladinMsg provides a mock function for the type MockTransportClient
func (_mock *MockTransportClient) HandlePaladinMsg(ctx context.Context, msg *ReceivedMessage) {
	_mock.Called(ctx, msg)
	return
}

// MockTransportClient_HandlePaladinMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandlePaladinMsg'
type MockTransportClient_HandlePaladinMsg_Call struct {
	*mock.Call
}

// HandlePaladinMsg is a helper method to define mock.On call
//   - ctx context.Context
//   - msg *ReceivedMessage
func (_e *MockTransportClient_Expecter) HandlePaladinMsg(ctx interface{}, msg interface{}) *MockTransportClient_HandlePaladinMsg_Call {
	return &MockTransportClient_HandlePaladinMsg_Call{Call: _e.mock.On("HandlePaladinMsg", ctx, msg)}
}

func (_c *MockTransportClient_HandlePaladinMsg_Call) Run(run func(ctx context.Context, msg *ReceivedMessage)) *MockTransportClient_HandlePaladinMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ReceivedMessage
		if args[1] != nil {
			arg1 = args[1].(*ReceivedMessage)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTransportClient_HandlePaladinMsg_Call) Return() *MockTransportClient_HandlePaladinMsg_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTransportClient_HandlePaladinMsg_Call) RunAndReturn(run func(ctx context.Context, msg *ReceivedMessage)) *MockTransportClient_HandlePaladinMsg_Call {
	_c.Run(run)
	return _c
}

// NewMockTransportManager creates a new instance of MockTransportManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransportManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransportManager {
	mock := &MockTransportManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTransportManager is an autogenerated mock type for the TransportManager type
type MockTransportManager struct {
	mock.Mock
}

type MockTransportManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransportManager) EXPECT() *MockTransportManager_Expecter {
	return &MockTransportManager_Expecter{mock: &_m.Mock}
}

// ConfiguredTransports provides a mock function for the type MockTransportManager
func (_mock *MockTransportManager) ConfiguredTransports() map[string]*pldconf.PluginConfig {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ConfiguredTransports")
	}

	var r0 map[string]*pldconf.PluginConfig
	if returnFunc, ok := ret.Get(0).(func() map[string]*pldconf.PluginConfig); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*pldconf.PluginConfig)
		}
	}
	return r0
}

// MockTransportManager_ConfiguredTransports_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfiguredTransports'
type MockTransportManager_ConfiguredTransports_Call struct {
	*mock.Call
}

// ConfiguredTransports is a helper method to define mock.On call
func (_e *MockTransportManager_Expecter) ConfiguredTransports() *MockTransportManager_ConfiguredTransports_Call {
	return &MockTransportManager_ConfiguredTransports_Call{Call: _e.mock.On("ConfiguredTransports")}
}

func (_c *MockTransportManager_ConfiguredTransports_Call) Run(run func()) *MockTransportManager_ConfiguredTransports_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransportManager_ConfiguredTransports_Call) Return(stringToPluginConfig map[string]*pldconf.PluginConfig) *MockTransportManager_ConfiguredTransports_Call {
	_c.Call.Return(stringToPluginConfig)
	return _c
}

func (_c *MockTransportManager_ConfiguredTransports_Call) RunAndReturn(run func() map[string]*pldconf.PluginConfig) *MockTransportManager_ConfiguredTransports_Call {
	_c.Call.Return(run)
	return _c
}

// LocalNodeName provides a mock function for the type MockTransportManager
func (_mock *MockTransportManager) LocalNodeName() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for LocalNodeName")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockTransportManager_LocalNodeName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LocalNodeName'
type MockTransportManager_LocalNodeName_Call struct {
	*mock.Call
}

// LocalNodeName is a helper method to define mock.On call
func (_e *MockTransportManager_Expecter) LocalNodeName() *MockTransportManager_LocalNodeName_Call {
	return &MockTransportManager_LocalNodeName_Call{Call: _e.mock.On("LocalNodeName")}
}

func (_c *MockTransportManager_LocalNodeName_Call) Run(run func()) *MockTransportManager_LocalNodeName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransportManager_LocalNodeName_Call) Return(s string) *MockTransportManager_LocalNodeName_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockTransportManager_LocalNodeName_Call) RunAndReturn(run func() string) *MockTransportManager_LocalNodeName_Call {
	_c.Call.Return(run)
	return _c
}

// PostInit provides a mock function for the type MockTransportManager
func (_mock *MockTransportManager) PostInit(allComponents AllComponents) error {
	ret := _mock.Called(allComponents)

	if len(ret) == 0 {
		panic("no return value specified for PostInit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(AllComponents) error); ok {
		r0 = returnFunc(allComponents)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransportManager_PostInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostInit'
type MockTransportManager_PostInit_Call struct {
	*mock.Call
}

// PostInit is a helper method to define mock.On call
//   - allComponents AllComponents
func (_e *MockTransportManager_Expecter) PostInit(allComponents interface{}) *MockTransportManager_PostInit_Call {
	return &MockTransportManager_PostInit_Call{Call: _e.mock.On("PostInit", allComponents)}
}

func (_c *MockTransportManager_PostInit_Call) Run(run func(allComponents AllComponents)) *MockTransportManager_PostInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 AllComponents
		if args[0] != nil {
			arg0 = args[0].(AllComponents)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransportManager_PostInit_Call) Return(err error) *MockTransportManager_PostInit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransportManager_PostInit_Call) RunAndReturn(run func(allComponents AllComponents) error) *MockTransportManager_PostInit_Call {
	_c.Call.Return(run)
	return _c
}

// PreInit provides a mock function for the type MockTransportManager
func (_mock *MockTransportManager) PreInit(preInitComponents PreInitComponents) (*ManagerInitResult, error) {
	ret := _mock.Called(preInitComponents)

	if len(ret) == 0 {
		panic("no return value specified for PreInit")
	}

	var r0 *ManagerInitResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(PreInitComponents) (*ManagerInitResult, error)); ok {
		return returnFunc(preInitComponents)
	}
	if returnFunc, ok := ret.Get(0).(func(PreInitComponents) *ManagerInitResult); ok {
		r0 = returnFunc(preInitComponents)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ManagerInitResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(PreInitComponents) error); ok {
		r1 = returnFunc(preInitComponents)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransportManager_PreInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreInit'
type MockTransportManager_PreInit_Call struct {
	*mock.Call
}

// PreInit is a helper method to define mock.On call
//   - preInitComponents PreInitComponents
func (_e *MockTransportManager_Expecter) PreInit(preInitComponents interface{}) *MockTransportManager_PreInit_Call {
	return &MockTransportManager_PreInit_Call{Call: _e.mock.On("PreInit", preInitComponents)}
}

func (_c *MockTransportManager_PreInit_Call) Run(run func(preInitComponents PreInitComponents)) *MockTransportManager_PreInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 PreInitComponents
		if args[0] != nil {
			arg0 = args[0].(PreInitComponents)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransportManager_PreInit_Call) Return(managerInitResult *ManagerInitResult, err error) *MockTransportManager_PreInit_Call {
	_c.Call.Return(managerInitResult, err)
	return _c
}

func (_c *MockTransportManager_PreInit_Call) RunAndReturn(run func(preInitComponents PreInitComponents) (*ManagerInitResult, error)) *MockTransportManager_PreInit_Call {
	_c.Call.Return(run)
	return _c
}

// QueryReliableMessageAcks provides a mock function for the type MockTransportManager
func (_mock *MockTransportManager) QueryReliableMessageAcks(ctx context.Context, dbTX persistence.DBTX, jq *query.QueryJSON) ([]*pldapi.ReliableMessageAck, error) {
	ret := _mock.Called(ctx, dbTX, jq)

	if len(ret) == 0 {
		panic("no return value specified for QueryReliableMessageAcks")
	}

	var r0 []*pldapi.ReliableMessageAck
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, *query.QueryJSON) ([]*pldapi.ReliableMessageAck, error)); ok {
		return returnFunc(ctx, dbTX, jq)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, *query.QueryJSON) []*pldapi.ReliableMessageAck); ok {
		r0 = returnFunc(ctx, dbTX, jq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pldapi.ReliableMessageAck)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, *query.QueryJSON) error); ok {
		r1 = returnFunc(ctx, dbTX, jq)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransportManager_QueryReliableMessageAcks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryReliableMessageAcks'
type MockTransportManager_QueryReliableMessageAcks_Call struct {
	*mock.Call
}

// QueryReliableMessageAcks is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - jq *query.QueryJSON
func (_e *MockTransportManager_Expecter) QueryReliableMessageAcks(ctx interface{}, dbTX interface{}, jq interface{}) *MockTransportManager_QueryReliableMessageAcks_Call {
	return &MockTransportManager_QueryReliableMessageAcks_Call{Call: _e.mock.On("QueryReliableMessageAcks", ctx, dbTX, jq)}
}

func (_c *MockTransportManager_QueryReliableMessageAcks_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, jq *query.QueryJSON)) *MockTransportManager_QueryReliableMessageAcks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 *query.QueryJSON
		if args[2] != nil {
			arg2 = args[2].(*query.QueryJSON)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTransportManager_QueryReliableMessageAcks_Call) Return(reliableMessageAcks []*pldapi.ReliableMessageAck, err error) *MockTransportManager_QueryReliableMessageAcks_Call {
	_c.Call.Return(reliableMessageAcks, err)
	return _c
}

func (_c *MockTransportManager_QueryReliableMessageAcks_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, jq *query.QueryJSON) ([]*pldapi.ReliableMessageAck, error)) *MockTransportManager_QueryReliableMessageAcks_Call {
	_c.Call.Return(run)
	return _c
}

// QueryReliableMessages provides a mock function for the type MockTransportManager
func (_mock *MockTransportManager) QueryReliableMessages(ctx context.Context, dbTX persistence.DBTX, jq *query.QueryJSON) ([]*pldapi.ReliableMessage, error) {
	ret := _mock.Called(ctx, dbTX, jq)

	if len(ret) == 0 {
		panic("no return value specified for QueryReliableMessages")
	}

	var r0 []*pldapi.ReliableMessage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, *query.QueryJSON) ([]*pldapi.ReliableMessage, error)); ok {
		return returnFunc(ctx, dbTX, jq)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, *query.QueryJSON) []*pldapi.ReliableMessage); ok {
		r0 = returnFunc(ctx, dbTX, jq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pldapi.ReliableMessage)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, *query.QueryJSON) error); ok {
		r1 = returnFunc(ctx, dbTX, jq)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransportManager_QueryReliableMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryReliableMessages'
type MockTransportManager_QueryReliableMessages_Call struct {
	*mock.Call
}

// QueryReliableMessages is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - jq *query.QueryJSON
func (_e *MockTransportManager_Expecter) QueryReliableMessages(ctx interface{}, dbTX interface{}, jq interface{}) *MockTransportManager_QueryReliableMessages_Call {
	return &MockTransportManager_QueryReliableMessages_Call{Call: _e.mock.On("QueryReliableMessages", ctx, dbTX, jq)}
}

func (_c *MockTransportManager_QueryReliableMessages_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, jq *query.QueryJSON)) *MockTransportManager_QueryReliableMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 *query.QueryJSON
		if args[2] != nil {
			arg2 = args[2].(*query.QueryJSON)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTransportManager_QueryReliableMessages_Call) Return(reliableMessages []*pldapi.ReliableMessage, err error) *MockTransportManager_QueryReliableMessages_Call {
	_c.Call.Return(reliableMessages, err)
	return _c
}

func (_c *MockTransportManager_QueryReliableMessages_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, jq *query.QueryJSON) ([]*pldapi.ReliableMessage, error)) *MockTransportManager_QueryReliableMessages_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function for the type MockTransportManager
func (_mock *MockTransportManager) Send(ctx context.Context, send *FireAndForgetMessageSend) error {
	ret := _mock.Called(ctx, send)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *FireAndForgetMessageSend) error); ok {
		r0 = returnFunc(ctx, send)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransportManager_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockTransportManager_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx context.Context
//   - send *FireAndForgetMessageSend
func (_e *MockTransportManager_Expecter) Send(ctx interface{}, send interface{}) *MockTransportManager_Send_Call {
	return &MockTransportManager_Send_Call{Call: _e.mock.On("Send", ctx, send)}
}

func (_c *MockTransportManager_Send_Call) Run(run func(ctx context.Context, send *FireAndForgetMessageSend)) *MockTransportManager_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *FireAndForgetMessageSend
		if args[1] != nil {
			arg1 = args[1].(*FireAndForgetMessageSend)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTransportManager_Send_Call) Return(err error) *MockTransportManager_Send_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransportManager_Send_Call) RunAndReturn(run func(ctx context.Context, send *FireAndForgetMessageSend) error) *MockTransportManager_Send_Call {
	_c.Call.Return(run)
	return _c
}

// SendReliable provides a mock function for the type MockTransportManager
func (_mock *MockTransportManager) SendReliable(ctx context.Context, dbTX persistence.DBTX, msg ...*pldapi.ReliableMessage) error {
	// *pldapi.ReliableMessage
	_va := make([]interface{}, len(msg))
	for _i := range msg {
		_va[_i] = msg[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dbTX)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendReliable")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, ...*pldapi.ReliableMessage) error); ok {
		r0 = returnFunc(ctx, dbTX, msg...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransportManager_SendReliable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendReliable'
type MockTransportManager_SendReliable_Call struct {
	*mock.Call
}

// SendReliable is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - msg ...*pldapi.ReliableMessage
func (_e *MockTransportManager_Expecter) SendReliable(ctx interface{}, dbTX interface{}, msg ...interface{}) *MockTransportManager_SendReliable_Call {
	return &MockTransportManager_SendReliable_Call{Call: _e.mock.On("SendReliable",
		append([]interface{}{ctx, dbTX}, msg...)...)}
}

func (_c *MockTransportManager_SendReliable_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, msg ...*pldapi.ReliableMessage)) *MockTransportManager_SendReliable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 []*pldapi.ReliableMessage
		variadicArgs := make([]*pldapi.ReliableMessage, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*pldapi.ReliableMessage)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockTransportManager_SendReliable_Call) Return(err error) *MockTransportManager_SendReliable_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransportManager_SendReliable_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, msg ...*pldapi.ReliableMessage) error) *MockTransportManager_SendReliable_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockTransportManager
func (_mock *MockTransportManager) Start() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransportManager_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockTransportManager_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockTransportManager_Expecter) Start() *MockTransportManager_Start_Call {
	return &MockTransportManager_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockTransportManager_Start_Call) Run(run func()) *MockTransportManager_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransportManager_Start_Call) Return(err error) *MockTransportManager_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransportManager_Start_Call) RunAndReturn(run func() error) *MockTransportManager_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockTransportManager
func (_mock *MockTransportManager) Stop() {
	_mock.Called()
	return
}

// MockTransportManager_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockTransportManager_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockTransportManager_Expecter) Stop() *MockTransportManager_Stop_Call {
	return &MockTransportManager_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockTransportManager_Stop_Call) Run(run func()) *MockTransportManager_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransportManager_Stop_Call) Return() *MockTransportManager_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTransportManager_Stop_Call) RunAndReturn(run func()) *MockTransportManager_Stop_Call {
	_c.Run(run)
	return _c
}

// TransportRegistered provides a mock function for the type MockTransportManager
func (_mock *MockTransportManager) TransportRegistered(name string, id uuid.UUID, toTransport TransportManagerToTransport) (plugintk.TransportCallbacks, error) {
	ret := _mock.Called(name, id, toTransport)

	if len(ret) == 0 {
		panic("no return value specified for TransportRegistered")
	}

	var r0 plugintk.TransportCallbacks
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID, TransportManagerToTransport) (plugintk.TransportCallbacks, error)); ok {
		return returnFunc(name, id, toTransport)
	}
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID, TransportManagerToTransport) plugintk.TransportCallbacks); ok {
		r0 = returnFunc(name, id, toTransport)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plugintk.TransportCallbacks)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, uuid.UUID, TransportManagerToTransport) error); ok {
		r1 = returnFunc(name, id, toTransport)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransportManager_TransportRegistered_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransportRegistered'
type MockTransportManager_TransportRegistered_Call struct {
	*mock.Call
}

// TransportRegistered is a helper method to define mock.On call
//   - name string
//   - id uuid.UUID
//   - toTransport TransportManagerToTransport
func (_e *MockTransportManager_Expecter) TransportRegistered(name interface{}, id interface{}, toTransport interface{}) *MockTransportManager_TransportRegistered_Call {
	return &MockTransportManager_TransportRegistered_Call{Call: _e.mock.On("TransportRegistered", name, id, toTransport)}
}

func (_c *MockTransportManager_TransportRegistered_Call) Run(run func(name string, id uuid.UUID, toTransport TransportManagerToTransport)) *MockTransportManager_TransportRegistered_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 TransportManagerToTransport
		if args[2] != nil {
			arg2 = args[2].(TransportManagerToTransport)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTransportManager_TransportRegistered_Call) Return(fromTransport plugintk.TransportCallbacks, err error) *MockTransportManager_TransportRegistered_Call {
	_c.Call.Return(fromTransport, err)
	return _c
}

func (_c *MockTransportManager_TransportRegistered_Call) RunAndReturn(run func(name string, id uuid.UUID, toTransport TransportManagerToTransport) (plugintk.TransportCallbacks, error)) *MockTransportManager_TransportRegistered_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReceiptReceiver creates a new instance of MockReceiptReceiver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReceiptReceiver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReceiptReceiver {
	mock := &MockReceiptReceiver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockReceiptReceiver is an autogenerated mock type for the ReceiptReceiver type
type MockReceiptReceiver struct {
	mock.Mock
}

type MockReceiptReceiver_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReceiptReceiver) EXPECT() *MockReceiptReceiver_Expecter {
	return &MockReceiptReceiver_Expecter{mock: &_m.Mock}
}

// DeliverReceiptBatch provides a mock function for the type MockReceiptReceiver
func (_mock *MockReceiptReceiver) DeliverReceiptBatch(ctx context.Context, batchID uint64, receipts []*pldapi.TransactionReceiptFull) error {
	ret := _mock.Called(ctx, batchID, receipts)

	if len(ret) == 0 {
		panic("no return value specified for DeliverReceiptBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint64, []*pldapi.TransactionReceiptFull) error); ok {
		r0 = returnFunc(ctx, batchID, receipts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockReceiptReceiver_DeliverReceiptBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeliverReceiptBatch'
type MockReceiptReceiver_DeliverReceiptBatch_Call struct {
	*mock.Call
}

// DeliverReceiptBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - batchID uint64
//   - receipts []*pldapi.TransactionReceiptFull
func (_e *MockReceiptReceiver_Expecter) DeliverReceiptBatch(ctx interface{}, batchID interface{}, receipts interface{}) *MockReceiptReceiver_DeliverReceiptBatch_Call {
	return &MockReceiptReceiver_DeliverReceiptBatch_Call{Call: _e.mock.On("DeliverReceiptBatch", ctx, batchID, receipts)}
}

func (_c *MockReceiptReceiver_DeliverReceiptBatch_Call) Run(run func(ctx context.Context, batchID uint64, receipts []*pldapi.TransactionReceiptFull)) *MockReceiptReceiver_DeliverReceiptBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uint64
		if args[1] != nil {
			arg1 = args[1].(uint64)
		}
		var arg2 []*pldapi.TransactionReceiptFull
		if args[2] != nil {
			arg2 = args[2].([]*pldapi.TransactionReceiptFull)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockReceiptReceiver_DeliverReceiptBatch_Call) Return(err error) *MockReceiptReceiver_DeliverReceiptBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockReceiptReceiver_DeliverReceiptBatch_Call) RunAndReturn(run func(ctx context.Context, batchID uint64, receipts []*pldapi.TransactionReceiptFull) error) *MockReceiptReceiver_DeliverReceiptBatch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBlockchainEventReceiver creates a new instance of MockBlockchainEventReceiver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlockchainEventReceiver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlockchainEventReceiver {
	mock := &MockBlockchainEventReceiver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBlockchainEventReceiver is an autogenerated mock type for the BlockchainEventReceiver type
type MockBlockchainEventReceiver struct {
	mock.Mock
}

type MockBlockchainEventReceiver_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlockchainEventReceiver) EXPECT() *MockBlockchainEventReceiver_Expecter {
	return &MockBlockchainEventReceiver_Expecter{mock: &_m.Mock}
}

// DeliverBlockchainEventBatch provides a mock function for the type MockBlockchainEventReceiver
func (_mock *MockBlockchainEventReceiver) DeliverBlockchainEventBatch(ctx context.Context, batchID uuid.UUID, events []*pldapi.EventWithData) error {
	ret := _mock.Called(ctx, batchID, events)

	if len(ret) == 0 {
		panic("no return value specified for DeliverBlockchainEventBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, []*pldapi.EventWithData) error); ok {
		r0 = returnFunc(ctx, batchID, events)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBlockchainEventReceiver_DeliverBlockchainEventBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeliverBlockchainEventBatch'
type MockBlockchainEventReceiver_DeliverBlockchainEventBatch_Call struct {
	*mock.Call
}

// DeliverBlockchainEventBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - batchID uuid.UUID
//   - events []*pldapi.EventWithData
func (_e *MockBlockchainEventReceiver_Expecter) DeliverBlockchainEventBatch(ctx interface{}, batchID interface{}, events interface{}) *MockBlockchainEventReceiver_DeliverBlockchainEventBatch_Call {
	return &MockBlockchainEventReceiver_DeliverBlockchainEventBatch_Call{Call: _e.mock.On("DeliverBlockchainEventBatch", ctx, batchID, events)}
}

func (_c *MockBlockchainEventReceiver_DeliverBlockchainEventBatch_Call) Run(run func(ctx context.Context, batchID uuid.UUID, events []*pldapi.EventWithData)) *MockBlockchainEventReceiver_DeliverBlockchainEventBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 []*pldapi.EventWithData
		if args[2] != nil {
			arg2 = args[2].([]*pldapi.EventWithData)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockBlockchainEventReceiver_DeliverBlockchainEventBatch_Call) Return(err error) *MockBlockchainEventReceiver_DeliverBlockchainEventBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBlockchainEventReceiver_DeliverBlockchainEventBatch_Call) RunAndReturn(run func(ctx context.Context, batchID uuid.UUID, events []*pldapi.EventWithData) error) *MockBlockchainEventReceiver_DeliverBlockchainEventBatch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReceiverCloser creates a new instance of MockReceiverCloser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReceiverCloser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReceiverCloser {
	mock := &MockReceiverCloser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockReceiverCloser is an autogenerated mock type for the ReceiverCloser type
type MockReceiverCloser struct {
	mock.Mock
}

type MockReceiverCloser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReceiverCloser) EXPECT() *MockReceiverCloser_Expecter {
	return &MockReceiverCloser_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockReceiverCloser
func (_mock *MockReceiverCloser) Close() {
	_mock.Called()
	return
}

// MockReceiverCloser_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockReceiverCloser_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockReceiverCloser_Expecter) Close() *MockReceiverCloser_Close_Call {
	return &MockReceiverCloser_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockReceiverCloser_Close_Call) Run(run func()) *MockReceiverCloser_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReceiverCloser_Close_Call) Return() *MockReceiverCloser_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockReceiverCloser_Close_Call) RunAndReturn(run func()) *MockReceiverCloser_Close_Call {
	_c.Run(run)
	return _c
}

// NewMockTXManager creates a new instance of MockTXManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTXManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTXManager {
	mock := &MockTXManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTXManager is an autogenerated mock type for the TXManager type
type MockTXManager struct {
	mock.Mock
}

type MockTXManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTXManager) EXPECT() *MockTXManager_Expecter {
	return &MockTXManager_Expecter{mock: &_m.Mock}
}

// AddReceiptReceiver provides a mock function for the type MockTXManager
func (_mock *MockTXManager) AddReceiptReceiver(ctx context.Context, name string, r ReceiptReceiver) (ReceiverCloser, error) {
	ret := _mock.Called(ctx, name, r)

	if len(ret) == 0 {
		panic("no return value specified for AddReceiptReceiver")
	}

	var r0 ReceiverCloser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ReceiptReceiver) (ReceiverCloser, error)); ok {
		return returnFunc(ctx, name, r)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ReceiptReceiver) ReceiverCloser); ok {
		r0 = returnFunc(ctx, name, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ReceiverCloser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ReceiptReceiver) error); ok {
		r1 = returnFunc(ctx, name, r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTXManager_AddReceiptReceiver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddReceiptReceiver'
type MockTXManager_AddReceiptReceiver_Call struct {
	*mock.Call
}

// AddReceiptReceiver is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - r ReceiptReceiver
func (_e *MockTXManager_Expecter) AddReceiptReceiver(ctx interface{}, name interface{}, r interface{}) *MockTXManager_AddReceiptReceiver_Call {
	return &MockTXManager_AddReceiptReceiver_Call{Call: _e.mock.On("AddReceiptReceiver", ctx, name, r)}
}

func (_c *MockTXManager_AddReceiptReceiver_Call) Run(run func(ctx context.Context, name string, r ReceiptReceiver)) *MockTXManager_AddReceiptReceiver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 ReceiptReceiver
		if args[2] != nil {
			arg2 = args[2].(ReceiptReceiver)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTXManager_AddReceiptReceiver_Call) Return(receiverCloser ReceiverCloser, err error) *MockTXManager_AddReceiptReceiver_Call {
	_c.Call.Return(receiverCloser, err)
	return _c
}

func (_c *MockTXManager_AddReceiptReceiver_Call) RunAndReturn(run func(ctx context.Context, name string, r ReceiptReceiver) (ReceiverCloser, error)) *MockTXManager_AddReceiptReceiver_Call {
	_c.Call.Return(run)
	return _c
}

// CalculateRevertError provides a mock function for the type MockTXManager
func (_mock *MockTXManager) CalculateRevertError(ctx context.Context, dbTX persistence.DBTX, revertData pldtypes.HexBytes) error {
	ret := _mock.Called(ctx, dbTX, revertData)

	if len(ret) == 0 {
		panic("no return value specified for CalculateRevertError")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, pldtypes.HexBytes) error); ok {
		r0 = returnFunc(ctx, dbTX, revertData)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTXManager_CalculateRevertError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalculateRevertError'
type MockTXManager_CalculateRevertError_Call struct {
	*mock.Call
}

// CalculateRevertError is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - revertData pldtypes.HexBytes
func (_e *MockTXManager_Expecter) CalculateRevertError(ctx interface{}, dbTX interface{}, revertData interface{}) *MockTXManager_CalculateRevertError_Call {
	return &MockTXManager_CalculateRevertError_Call{Call: _e.mock.On("CalculateRevertError", ctx, dbTX, revertData)}
}

func (_c *MockTXManager_CalculateRevertError_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, revertData pldtypes.HexBytes)) *MockTXManager_CalculateRevertError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 pldtypes.HexBytes
		if args[2] != nil {
			arg2 = args[2].(pldtypes.HexBytes)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTXManager_CalculateRevertError_Call) Return(err error) *MockTXManager_CalculateRevertError_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTXManager_CalculateRevertError_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, revertData pldtypes.HexBytes) error) *MockTXManager_CalculateRevertError_Call {
	_c.Call.Return(run)
	return _c
}

// CallTransaction provides a mock function for the type MockTXManager
func (_mock *MockTXManager) CallTransaction(ctx context.Context, dbTX persistence.DBTX, result any, tx *pldapi.TransactionCall) error {
	ret := _mock.Called(ctx, dbTX, result, tx)

	if len(ret) == 0 {
		panic("no return value specified for CallTransaction")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, any, *pldapi.TransactionCall) error); ok {
		r0 = returnFunc(ctx, dbTX, result, tx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTXManager_CallTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallTransaction'
type MockTXManager_CallTransaction_Call struct {
	*mock.Call
}

// CallTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - result any
//   - tx *pldapi.TransactionCall
func (_e *MockTXManager_Expecter) CallTransaction(ctx interface{}, dbTX interface{}, result interface{}, tx interface{}) *MockTXManager_CallTransaction_Call {
	return &MockTXManager_CallTransaction_Call{Call: _e.mock.On("CallTransaction", ctx, dbTX, result, tx)}
}

func (_c *MockTXManager_CallTransaction_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, result any, tx *pldapi.TransactionCall)) *MockTXManager_CallTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 any
		if args[2] != nil {
			arg2 = args[2].(any)
		}
		var arg3 *pldapi.TransactionCall
		if args[3] != nil {
			arg3 = args[3].(*pldapi.TransactionCall)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockTXManager_CallTransaction_Call) Return(err error) *MockTXManager_CallTransaction_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTXManager_CallTransaction_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, result any, tx *pldapi.TransactionCall) error) *MockTXManager_CallTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// CreateReceiptListener provides a mock function for the type MockTXManager
func (_mock *MockTXManager) CreateReceiptListener(ctx context.Context, spec *pldapi.TransactionReceiptListener) error {
	ret := _mock.Called(ctx, spec)

	if len(ret) == 0 {
		panic("no return value specified for CreateReceiptListener")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pldapi.TransactionReceiptListener) error); ok {
		r0 = returnFunc(ctx, spec)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTXManager_CreateReceiptListener_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateReceiptListener'
type MockTXManager_CreateReceiptListener_Call struct {
	*mock.Call
}

// CreateReceiptListener is a helper method to define mock.On call
//   - ctx context.Context
//   - spec *pldapi.TransactionReceiptListener
func (_e *MockTXManager_Expecter) CreateReceiptListener(ctx interface{}, spec interface{}) *MockTXManager_CreateReceiptListener_Call {
	return &MockTXManager_CreateReceiptListener_Call{Call: _e.mock.On("CreateReceiptListener", ctx, spec)}
}

func (_c *MockTXManager_CreateReceiptListener_Call) Run(run func(ctx context.Context, spec *pldapi.TransactionReceiptListener)) *MockTXManager_CreateReceiptListener_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pldapi.TransactionReceiptListener
		if args[1] != nil {
			arg1 = args[1].(*pldapi.TransactionReceiptListener)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTXManager_CreateReceiptListener_Call) Return(err error) *MockTXManager_CreateReceiptListener_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTXManager_CreateReceiptListener_Call) RunAndReturn(run func(ctx context.Context, spec *pldapi.TransactionReceiptListener) error) *MockTXManager_CreateReceiptListener_Call {
	_c.Call.Return(run)
	return _c
}

// DecodeCall provides a mock function for the type MockTXManager
func (_mock *MockTXManager) DecodeCall(ctx context.Context, dbTX persistence.DBTX, callData pldtypes.HexBytes, dataFormat pldtypes.JSONFormatOptions) (*pldapi.ABIDecodedData, error) {
	ret := _mock.Called(ctx, dbTX, callData, dataFormat)

	if len(ret) == 0 {
		panic("no return value specified for DecodeCall")
	}

	var r0 *pldapi.ABIDecodedData
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, pldtypes.HexBytes, pldtypes.JSONFormatOptions) (*pldapi.ABIDecodedData, error)); ok {
		return returnFunc(ctx, dbTX, callData, dataFormat)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, pldtypes.HexBytes, pldtypes.JSONFormatOptions) *pldapi.ABIDecodedData); ok {
		r0 = returnFunc(ctx, dbTX, callData, dataFormat)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.ABIDecodedData)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, pldtypes.HexBytes, pldtypes.JSONFormatOptions) error); ok {
		r1 = returnFunc(ctx, dbTX, callData, dataFormat)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTXManager_DecodeCall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecodeCall'
type MockTXManager_DecodeCall_Call struct {
	*mock.Call
}

// DecodeCall is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - callData pldtypes.HexBytes
//   - dataFormat pldtypes.JSONFormatOptions
func (_e *MockTXManager_Expecter) DecodeCall(ctx interface{}, dbTX interface{}, callData interface{}, dataFormat interface{}) *MockTXManager_DecodeCall_Call {
	return &MockTXManager_DecodeCall_Call{Call: _e.mock.On("DecodeCall", ctx, dbTX, callData, dataFormat)}
}

func (_c *MockTXManager_DecodeCall_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, callData pldtypes.HexBytes, dataFormat pldtypes.JSONFormatOptions)) *MockTXManager_DecodeCall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 pldtypes.HexBytes
		if args[2] != nil {
			arg2 = args[2].(pldtypes.HexBytes)
		}
		var arg3 pldtypes.JSONFormatOptions
		if args[3] != nil {
			arg3 = args[3].(pldtypes.JSONFormatOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockTXManager_DecodeCall_Call) Return(aBIDecodedData *pldapi.ABIDecodedData, err error) *MockTXManager_DecodeCall_Call {
	_c.Call.Return(aBIDecodedData, err)
	return _c
}

func (_c *MockTXManager_DecodeCall_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, callData pldtypes.HexBytes, dataFormat pldtypes.JSONFormatOptions) (*pldapi.ABIDecodedData, error)) *MockTXManager_DecodeCall_Call {
	_c.Call.Return(run)
	return _c
}

// DecodeEvent provides a mock function for the type MockTXManager
func (_mock *MockTXManager) DecodeEvent(ctx context.Context, dbTX persistence.DBTX, topics []pldtypes.Bytes32, eventData pldtypes.HexBytes, dataFormat pldtypes.JSONFormatOptions) (*pldapi.ABIDecodedData, error) {
	ret := _mock.Called(ctx, dbTX, topics, eventData, dataFormat)

	if len(ret) == 0 {
		panic("no return value specified for DecodeEvent")
	}

	var r0 *pldapi.ABIDecodedData
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, []pldtypes.Bytes32, pldtypes.HexBytes, pldtypes.JSONFormatOptions) (*pldapi.ABIDecodedData, error)); ok {
		return returnFunc(ctx, dbTX, topics, eventData, dataFormat)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, []pldtypes.Bytes32, pldtypes.HexBytes, pldtypes.JSONFormatOptions) *pldapi.ABIDecodedData); ok {
		r0 = returnFunc(ctx, dbTX, topics, eventData, dataFormat)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.ABIDecodedData)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, []pldtypes.Bytes32, pldtypes.HexBytes, pldtypes.JSONFormatOptions) error); ok {
		r1 = returnFunc(ctx, dbTX, topics, eventData, dataFormat)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTXManager_DecodeEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecodeEvent'
type MockTXManager_DecodeEvent_Call struct {
	*mock.Call
}

// DecodeEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - topics []pldtypes.Bytes32
//   - eventData pldtypes.HexBytes
//   - dataFormat pldtypes.JSONFormatOptions
func (_e *MockTXManager_Expecter) DecodeEvent(ctx interface{}, dbTX interface{}, topics interface{}, eventData interface{}, dataFormat interface{}) *MockTXManager_DecodeEvent_Call {
	return &MockTXManager_DecodeEvent_Call{Call: _e.mock.On("DecodeEvent", ctx, dbTX, topics, eventData, dataFormat)}
}

func (_c *MockTXManager_DecodeEvent_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, topics []pldtypes.Bytes32, eventData pldtypes.HexBytes, dataFormat pldtypes.JSONFormatOptions)) *MockTXManager_DecodeEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 []pldtypes.Bytes32
		if args[2] != nil {
			arg2 = args[2].([]pldtypes.Bytes32)
		}
		var arg3 pldtypes.HexBytes
		if args[3] != nil {
			arg3 = args[3].(pldtypes.HexBytes)
		}
		var arg4 pldtypes.JSONFormatOptions
		if args[4] != nil {
			arg4 = args[4].(pldtypes.JSONFormatOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockTXManager_DecodeEvent_Call) Return(aBIDecodedData *pldapi.ABIDecodedData, err error) *MockTXManager_DecodeEvent_Call {
	_c.Call.Return(aBIDecodedData, err)
	return _c
}

func (_c *MockTXManager_DecodeEvent_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, topics []pldtypes.Bytes32, eventData pldtypes.HexBytes, dataFormat pldtypes.JSONFormatOptions) (*pldapi.ABIDecodedData, error)) *MockTXManager_DecodeEvent_Call {
	_c.Call.Return(run)
	return _c
}

// DecodeRevertError provides a mock function for the type MockTXManager
func (_mock *MockTXManager) DecodeRevertError(ctx context.Context, dbTX persistence.DBTX, revertData pldtypes.HexBytes, dataFormat pldtypes.JSONFormatOptions) (*pldapi.ABIDecodedData, error) {
	ret := _mock.Called(ctx, dbTX, revertData, dataFormat)

	if len(ret) == 0 {
		panic("no return value specified for DecodeRevertError")
	}

	var r0 *pldapi.ABIDecodedData
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, pldtypes.HexBytes, pldtypes.JSONFormatOptions) (*pldapi.ABIDecodedData, error)); ok {
		return returnFunc(ctx, dbTX, revertData, dataFormat)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, pldtypes.HexBytes, pldtypes.JSONFormatOptions) *pldapi.ABIDecodedData); ok {
		r0 = returnFunc(ctx, dbTX, revertData, dataFormat)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.ABIDecodedData)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, pldtypes.HexBytes, pldtypes.JSONFormatOptions) error); ok {
		r1 = returnFunc(ctx, dbTX, revertData, dataFormat)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTXManager_DecodeRevertError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecodeRevertError'
type MockTXManager_DecodeRevertError_Call struct {
	*mock.Call
}

// DecodeRevertError is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - revertData pldtypes.HexBytes
//   - dataFormat pldtypes.JSONFormatOptions
func (_e *MockTXManager_Expecter) DecodeRevertError(ctx interface{}, dbTX interface{}, revertData interface{}, dataFormat interface{}) *MockTXManager_DecodeRevertError_Call {
	return &MockTXManager_DecodeRevertError_Call{Call: _e.mock.On("DecodeRevertError", ctx, dbTX, revertData, dataFormat)}
}

func (_c *MockTXManager_DecodeRevertError_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, revertData pldtypes.HexBytes, dataFormat pldtypes.JSONFormatOptions)) *MockTXManager_DecodeRevertError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 pldtypes.HexBytes
		if args[2] != nil {
			arg2 = args[2].(pldtypes.HexBytes)
		}
		var arg3 pldtypes.JSONFormatOptions
		if args[3] != nil {
			arg3 = args[3].(pldtypes.JSONFormatOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockTXManager_DecodeRevertError_Call) Return(aBIDecodedData *pldapi.ABIDecodedData, err error) *MockTXManager_DecodeRevertError_Call {
	_c.Call.Return(aBIDecodedData, err)
	return _c
}

func (_c *MockTXManager_DecodeRevertError_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, revertData pldtypes.HexBytes, dataFormat pldtypes.JSONFormatOptions) (*pldapi.ABIDecodedData, error)) *MockTXManager_DecodeRevertError_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteReceiptListener provides a mock function for the type MockTXManager
func (_mock *MockTXManager) DeleteReceiptListener(ctx context.Context, name string) error {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReceiptListener")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTXManager_DeleteReceiptListener_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteReceiptListener'
type MockTXManager_DeleteReceiptListener_Call struct {
	*mock.Call
}

// DeleteReceiptListener is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockTXManager_Expecter) DeleteReceiptListener(ctx interface{}, name interface{}) *MockTXManager_DeleteReceiptListener_Call {
	return &MockTXManager_DeleteReceiptListener_Call{Call: _e.mock.On("DeleteReceiptListener", ctx, name)}
}

func (_c *MockTXManager_DeleteReceiptListener_Call) Run(run func(ctx context.Context, name string)) *MockTXManager_DeleteReceiptListener_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTXManager_DeleteReceiptListener_Call) Return(err error) *MockTXManager_DeleteReceiptListener_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTXManager_DeleteReceiptListener_Call) RunAndReturn(run func(ctx context.Context, name string) error) *MockTXManager_DeleteReceiptListener_Call {
	_c.Call.Return(run)
	return _c
}

// FinalizeTransactions provides a mock function for the type MockTXManager
func (_mock *MockTXManager) FinalizeTransactions(ctx context.Context, dbTX persistence.DBTX, info []*ReceiptInput) error {
	ret := _mock.Called(ctx, dbTX, info)

	if len(ret) == 0 {
		panic("no return value specified for FinalizeTransactions")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, []*ReceiptInput) error); ok {
		r0 = returnFunc(ctx, dbTX, info)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTXManager_FinalizeTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinalizeTransactions'
type MockTXManager_FinalizeTransactions_Call struct {
	*mock.Call
}

// FinalizeTransactions is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - info []*ReceiptInput
func (_e *MockTXManager_Expecter) FinalizeTransactions(ctx interface{}, dbTX interface{}, info interface{}) *MockTXManager_FinalizeTransactions_Call {
	return &MockTXManager_FinalizeTransactions_Call{Call: _e.mock.On("FinalizeTransactions", ctx, dbTX, info)}
}

func (_c *MockTXManager_FinalizeTransactions_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, info []*ReceiptInput)) *MockTXManager_FinalizeTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 []*ReceiptInput
		if args[2] != nil {
			arg2 = args[2].([]*ReceiptInput)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTXManager_FinalizeTransactions_Call) Return(err error) *MockTXManager_FinalizeTransactions_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTXManager_FinalizeTransactions_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, info []*ReceiptInput) error) *MockTXManager_FinalizeTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// GetPreparedTransactionByID provides a mock function for the type MockTXManager
func (_mock *MockTXManager) GetPreparedTransactionByID(ctx context.Context, dbTX persistence.DBTX, id uuid.UUID) (*pldapi.PreparedTransaction, error) {
	ret := _mock.Called(ctx, dbTX, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPreparedTransactionByID")
	}

	var r0 *pldapi.PreparedTransaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, uuid.UUID) (*pldapi.PreparedTransaction, error)); ok {
		return returnFunc(ctx, dbTX, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, uuid.UUID) *pldapi.PreparedTransaction); ok {
		r0 = returnFunc(ctx, dbTX, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.PreparedTransaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, dbTX, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTXManager_GetPreparedTransactionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPreparedTransactionByID'
type MockTXManager_GetPreparedTransactionByID_Call struct {
	*mock.Call
}

// GetPreparedTransactionByID is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - id uuid.UUID
func (_e *MockTXManager_Expecter) GetPreparedTransactionByID(ctx interface{}, dbTX interface{}, id interface{}) *MockTXManager_GetPreparedTransactionByID_Call {
	return &MockTXManager_GetPreparedTransactionByID_Call{Call: _e.mock.On("GetPreparedTransactionByID", ctx, dbTX, id)}
}

func (_c *MockTXManager_GetPreparedTransactionByID_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, id uuid.UUID)) *MockTXManager_GetPreparedTransactionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTXManager_GetPreparedTransactionByID_Call) Return(preparedTransaction *pldapi.PreparedTransaction, err error) *MockTXManager_GetPreparedTransactionByID_Call {
	_c.Call.Return(preparedTransaction, err)
	return _c
}

func (_c *MockTXManager_GetPreparedTransactionByID_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, id uuid.UUID) (*pldapi.PreparedTransaction, error)) *MockTXManager_GetPreparedTransactionByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPreparedTransactionWithRefsByID provides a mock function for the type MockTXManager
func (_mock *MockTXManager) GetPreparedTransactionWithRefsByID(ctx context.Context, dbTX persistence.DBTX, id uuid.UUID) (*PreparedTransactionWithRefs, error) {
	ret := _mock.Called(ctx, dbTX, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPreparedTransactionWithRefsByID")
	}

	var r0 *PreparedTransactionWithRefs
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, uuid.UUID) (*PreparedTransactionWithRefs, error)); ok {
		return returnFunc(ctx, dbTX, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, uuid.UUID) *PreparedTransactionWithRefs); ok {
		r0 = returnFunc(ctx, dbTX, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PreparedTransactionWithRefs)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, dbTX, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTXManager_GetPreparedTransactionWithRefsByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPreparedTransactionWithRefsByID'
type MockTXManager_GetPreparedTransactionWithRefsByID_Call struct {
	*mock.Call
}

// GetPreparedTransactionWithRefsByID is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - id uuid.UUID
func (_e *MockTXManager_Expecter) GetPreparedTransactionWithRefsByID(ctx interface{}, dbTX interface{}, id interface{}) *MockTXManager_GetPreparedTransactionWithRefsByID_Call {
	return &MockTXManager_GetPreparedTransactionWithRefsByID_Call{Call: _e.mock.On("GetPreparedTransactionWithRefsByID", ctx, dbTX, id)}
}

func (_c *MockTXManager_GetPreparedTransactionWithRefsByID_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, id uuid.UUID)) *MockTXManager_GetPreparedTransactionWithRefsByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTXManager_GetPreparedTransactionWithRefsByID_Call) Return(preparedTransactionWithRefs *PreparedTransactionWithRefs, err error) *MockTXManager_GetPreparedTransactionWithRefsByID_Call {
	_c.Call.Return(preparedTransactionWithRefs, err)
	return _c
}

func (_c *MockTXManager_GetPreparedTransactionWithRefsByID_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, id uuid.UUID) (*PreparedTransactionWithRefs, error)) *MockTXManager_GetPreparedTransactionWithRefsByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPublicTransactionByHash provides a mock function for the type MockTXManager
func (_mock *MockTXManager) GetPublicTransactionByHash(ctx context.Context, hash pldtypes.Bytes32) (*pldapi.PublicTxWithBinding, error) {
	ret := _mock.Called(ctx, hash)

	if len(ret) == 0 {
		panic("no return value specified for GetPublicTransactionByHash")
	}

	var r0 *pldapi.PublicTxWithBinding
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, pldtypes.Bytes32) (*pldapi.PublicTxWithBinding, error)); ok {
		return returnFunc(ctx, hash)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, pldtypes.Bytes32) *pldapi.PublicTxWithBinding); ok {
		r0 = returnFunc(ctx, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.PublicTxWithBinding)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, pldtypes.Bytes32) error); ok {
		r1 = returnFunc(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTXManager_GetPublicTransactionByHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublicTransactionByHash'
type MockTXManager_GetPublicTransactionByHash_Call struct {
	*mock.Call
}

// GetPublicTransactionByHash is a helper method to define mock.On call
//   - ctx context.Context
//   - hash pldtypes.Bytes32
func (_e *MockTXManager_Expecter) GetPublicTransactionByHash(ctx interface{}, hash interface{}) *MockTXManager_GetPublicTransactionByHash_Call {
	return &MockTXManager_GetPublicTransactionByHash_Call{Call: _e.mock.On("GetPublicTransactionByHash", ctx, hash)}
}

func (_c *MockTXManager_GetPublicTransactionByHash_Call) Run(run func(ctx context.Context, hash pldtypes.Bytes32)) *MockTXManager_GetPublicTransactionByHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 pldtypes.Bytes32
		if args[1] != nil {
			arg1 = args[1].(pldtypes.Bytes32)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTXManager_GetPublicTransactionByHash_Call) Return(publicTxWithBinding *pldapi.PublicTxWithBinding, err error) *MockTXManager_GetPublicTransactionByHash_Call {
	_c.Call.Return(publicTxWithBinding, err)
	return _c
}

func (_c *MockTXManager_GetPublicTransactionByHash_Call) RunAndReturn(run func(ctx context.Context, hash pldtypes.Bytes32) (*pldapi.PublicTxWithBinding, error)) *MockTXManager_GetPublicTransactionByHash_Call {
	_c.Call.Return(run)
	return _c
}

// GetPublicTransactionByNonce provides a mock function for the type MockTXManager
func (_mock *MockTXManager) GetPublicTransactionByNonce(ctx context.Context, from pldtypes.EthAddress, nonce pldtypes.HexUint64) (*pldapi.PublicTxWithBinding, error) {
	ret := _mock.Called(ctx, from, nonce)

	if len(ret) == 0 {
		panic("no return value specified for GetPublicTransactionByNonce")
	}

	var r0 *pldapi.PublicTxWithBinding
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, pldtypes.EthAddress, pldtypes.HexUint64) (*pldapi.PublicTxWithBinding, error)); ok {
		return returnFunc(ctx, from, nonce)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, pldtypes.EthAddress, pldtypes.HexUint64) *pldapi.PublicTxWithBinding); ok {
		r0 = returnFunc(ctx, from, nonce)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.PublicTxWithBinding)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, pldtypes.EthAddress, pldtypes.HexUint64) error); ok {
		r1 = returnFunc(ctx, from, nonce)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTXManager_GetPublicTransactionByNonce_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublicTransactionByNonce'
type MockTXManager_GetPublicTransactionByNonce_Call struct {
	*mock.Call
}

// GetPublicTransactionByNonce is a helper method to define mock.On call
//   - ctx context.Context
//   - from pldtypes.EthAddress
//   - nonce pldtypes.HexUint64
func (_e *MockTXManager_Expecter) GetPublicTransactionByNonce(ctx interface{}, from interface{}, nonce interface{}) *MockTXManager_GetPublicTransactionByNonce_Call {
	return &MockTXManager_GetPublicTransactionByNonce_Call{Call: _e.mock.On("GetPublicTransactionByNonce", ctx, from, nonce)}
}

func (_c *MockTXManager_GetPublicTransactionByNonce_Call) Run(run func(ctx context.Context, from pldtypes.EthAddress, nonce pldtypes.HexUint64)) *MockTXManager_GetPublicTransactionByNonce_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 pldtypes.EthAddress
		if args[1] != nil {
			arg1 = args[1].(pldtypes.EthAddress)
		}
		var arg2 pldtypes.HexUint64
		if args[2] != nil {
			arg2 = args[2].(pldtypes.HexUint64)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTXManager_GetPublicTransactionByNonce_Call) Return(publicTxWithBinding *pldapi.PublicTxWithBinding, err error) *MockTXManager_GetPublicTransactionByNonce_Call {
	_c.Call.Return(publicTxWithBinding, err)
	return _c
}

func (_c *MockTXManager_GetPublicTransactionByNonce_Call) RunAndReturn(run func(ctx context.Context, from pldtypes.EthAddress, nonce pldtypes.HexUint64) (*pldapi.PublicTxWithBinding, error)) *MockTXManager_GetPublicTransactionByNonce_Call {
	_c.Call.Return(run)
	return _c
}

// GetReceiptListener provides a mock function for the type MockTXManager
func (_mock *MockTXManager) GetReceiptListener(ctx context.Context, name string) *pldapi.TransactionReceiptListener {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetReceiptListener")
	}

	var r0 *pldapi.TransactionReceiptListener
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *pldapi.TransactionReceiptListener); ok {
		r0 = returnFunc(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.TransactionReceiptListener)
		}
	}
	return r0
}

// MockTXManager_GetReceiptListener_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReceiptListener'
type MockTXManager_GetReceiptListener_Call struct {
	*mock.Call
}

// GetReceiptListener is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockTXManager_Expecter) GetReceiptListener(ctx interface{}, name interface{}) *MockTXManager_GetReceiptListener_Call {
	return &MockTXManager_GetReceiptListener_Call{Call: _e.mock.On("GetReceiptListener", ctx, name)}
}

func (_c *MockTXManager_GetReceiptListener_Call) Run(run func(ctx context.Context, name string)) *MockTXManager_GetReceiptListener_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTXManager_GetReceiptListener_Call) Return(transactionReceiptListener *pldapi.TransactionReceiptListener) *MockTXManager_GetReceiptListener_Call {
	_c.Call.Return(transactionReceiptListener)
	return _c
}

func (_c *MockTXManager_GetReceiptListener_Call) RunAndReturn(run func(ctx context.Context, name string) *pldapi.TransactionReceiptListener) *MockTXManager_GetReceiptListener_Call {
	_c.Call.Return(run)
	return _c
}

// GetResolvedTransactionByID provides a mock function for the type MockTXManager
func (_mock *MockTXManager) GetResolvedTransactionByID(ctx context.Context, id uuid.UUID) (*ResolvedTransaction, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetResolvedTransactionByID")
	}

	var r0 *ResolvedTransaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*ResolvedTransaction, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *ResolvedTransaction); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ResolvedTransaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTXManager_GetResolvedTransactionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResolvedTransactionByID'
type MockTXManager_GetResolvedTransactionByID_Call struct {
	*mock.Call
}

// GetResolvedTransactionByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockTXManager_Expecter) GetResolvedTransactionByID(ctx interface{}, id interface{}) *MockTXManager_GetResolvedTransactionByID_Call {
	return &MockTXManager_GetResolvedTransactionByID_Call{Call: _e.mock.On("GetResolvedTransactionByID", ctx, id)}
}

func (_c *MockTXManager_GetResolvedTransactionByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockTXManager_GetResolvedTransactionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTXManager_GetResolvedTransactionByID_Call) Return(resolvedTransaction *ResolvedTransaction, err error) *MockTXManager_GetResolvedTransactionByID_Call {
	_c.Call.Return(resolvedTransaction, err)
	return _c
}

func (_c *MockTXManager_GetResolvedTransactionByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*ResolvedTransaction, error)) *MockTXManager_GetResolvedTransactionByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionByID provides a mock function for the type MockTXManager
func (_mock *MockTXManager) GetTransactionByID(ctx context.Context, id uuid.UUID) (*pldapi.Transaction, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionByID")
	}

	var r0 *pldapi.Transaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*pldapi.Transaction, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *pldapi.Transaction); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.Transaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTXManager_GetTransactionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionByID'
type MockTXManager_GetTransactionByID_Call struct {
	*mock.Call
}

// GetTransactionByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockTXManager_Expecter) GetTransactionByID(ctx interface{}, id interface{}) *MockTXManager_GetTransactionByID_Call {
	return &MockTXManager_GetTransactionByID_Call{Call: _e.mock.On("GetTransactionByID", ctx, id)}
}

func (_c *MockTXManager_GetTransactionByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockTXManager_GetTransactionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTXManager_GetTransactionByID_Call) Return(transaction *pldapi.Transaction, err error) *MockTXManager_GetTransactionByID_Call {
	_c.Call.Return(transaction, err)
	return _c
}

func (_c *MockTXManager_GetTransactionByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*pldapi.Transaction, error)) *MockTXManager_GetTransactionByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionByIDFull provides a mock function for the type MockTXManager
func (_mock *MockTXManager) GetTransactionByIDFull(ctx context.Context, id uuid.UUID) (*pldapi.TransactionFull, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionByIDFull")
	}

	var r0 *pldapi.TransactionFull
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*pldapi.TransactionFull, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *pldapi.TransactionFull); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.TransactionFull)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTXManager_GetTransactionByIDFull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionByIDFull'
type MockTXManager_GetTransactionByIDFull_Call struct {
	*mock.Call
}

// GetTransactionByIDFull is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockTXManager_Expecter) GetTransactionByIDFull(ctx interface{}, id interface{}) *MockTXManager_GetTransactionByIDFull_Call {
	return &MockTXManager_GetTransactionByIDFull_Call{Call: _e.mock.On("GetTransactionByIDFull", ctx, id)}
}

func (_c *MockTXManager_GetTransactionByIDFull_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockTXManager_GetTransactionByIDFull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTXManager_GetTransactionByIDFull_Call) Return(result *pldapi.TransactionFull, err error) *MockTXManager_GetTransactionByIDFull_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *MockTXManager_GetTransactionByIDFull_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*pldapi.TransactionFull, error)) *MockTXManager_GetTransactionByIDFull_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionDependencies provides a mock function for the type MockTXManager
func (_mock *MockTXManager) GetTransactionDependencies(ctx context.Context, id uuid.UUID) (*pldapi.TransactionDependencies, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionDependencies")
	}

	var r0 *pldapi.TransactionDependencies
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*pldapi.TransactionDependencies, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *pldapi.TransactionDependencies); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.TransactionDependencies)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTXManager_GetTransactionDependencies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionDependencies'
type MockTXManager_GetTransactionDependencies_Call struct {
	*mock.Call
}

// GetTransactionDependencies is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockTXManager_Expecter) GetTransactionDependencies(ctx interface{}, id interface{}) *MockTXManager_GetTransactionDependencies_Call {
	return &MockTXManager_GetTransactionDependencies_Call{Call: _e.mock.On("GetTransactionDependencies", ctx, id)}
}

func (_c *MockTXManager_GetTransactionDependencies_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockTXManager_GetTransactionDependencies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTXManager_GetTransactionDependencies_Call) Return(transactionDependencies *pldapi.TransactionDependencies, err error) *MockTXManager_GetTransactionDependencies_Call {
	_c.Call.Return(transactionDependencies, err)
	return _c
}

func (_c *MockTXManager_GetTransactionDependencies_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*pldapi.TransactionDependencies, error)) *MockTXManager_GetTransactionDependencies_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionReceiptByID provides a mock function for the type MockTXManager
func (_mock *MockTXManager) GetTransactionReceiptByID(ctx context.Context, id uuid.UUID) (*pldapi.TransactionReceipt, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionReceiptByID")
	}

	var r0 *pldapi.TransactionReceipt
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*pldapi.TransactionReceipt, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *pldapi.TransactionReceipt); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.TransactionReceipt)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTXManager_GetTransactionReceiptByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionReceiptByID'
type MockTXManager_GetTransactionReceiptByID_Call struct {
	*mock.Call
}

// GetTransactionReceiptByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockTXManager_Expecter) GetTransactionReceiptByID(ctx interface{}, id interface{}) *MockTXManager_GetTransactionReceiptByID_Call {
	return &MockTXManager_GetTransactionReceiptByID_Call{Call: _e.mock.On("GetTransactionReceiptByID", ctx, id)}
}

func (_c *MockTXManager_GetTransactionReceiptByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockTXManager_GetTransactionReceiptByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTXManager_GetTransactionReceiptByID_Call) Return(transactionReceipt *pldapi.TransactionReceipt, err error) *MockTXManager_GetTransactionReceiptByID_Call {
	_c.Call.Return(transactionReceipt, err)
	return _c
}

func (_c *MockTXManager_GetTransactionReceiptByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*pldapi.TransactionReceipt, error)) *MockTXManager_GetTransactionReceiptByID_Call {
	_c.Call.Return(run)
	return _c
}

// LoadBlockchainEventListeners provides a mock function for the type MockTXManager
func (_mock *MockTXManager) LoadBlockchainEventListeners() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoadBlockchainEventListeners")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTXManager_LoadBlockchainEventListeners_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadBlockchainEventListeners'
type MockTXManager_LoadBlockchainEventListeners_Call struct {
	*mock.Call
}

// LoadBlockchainEventListeners is a helper method to define mock.On call
func (_e *MockTXManager_Expecter) LoadBlockchainEventListeners() *MockTXManager_LoadBlockchainEventListeners_Call {
	return &MockTXManager_LoadBlockchainEventListeners_Call{Call: _e.mock.On("LoadBlockchainEventListeners")}
}

func (_c *MockTXManager_LoadBlockchainEventListeners_Call) Run(run func()) *MockTXManager_LoadBlockchainEventListeners_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTXManager_LoadBlockchainEventListeners_Call) Return(err error) *MockTXManager_LoadBlockchainEventListeners_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTXManager_LoadBlockchainEventListeners_Call) RunAndReturn(run func() error) *MockTXManager_LoadBlockchainEventListeners_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyStatesDBChanged provides a mock function for the type MockTXManager
func (_mock *MockTXManager) NotifyStatesDBChanged(ctx context.Context) {
	_mock.Called(ctx)
	return
}

// MockTXManager_NotifyStatesDBChanged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyStatesDBChanged'
type MockTXManager_NotifyStatesDBChanged_Call struct {
	*mock.Call
}

// NotifyStatesDBChanged is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTXManager_Expecter) NotifyStatesDBChanged(ctx interface{}) *MockTXManager_NotifyStatesDBChanged_Call {
	return &MockTXManager_NotifyStatesDBChanged_Call{Call: _e.mock.On("NotifyStatesDBChanged", ctx)}
}

func (_c *MockTXManager_NotifyStatesDBChanged_Call) Run(run func(ctx context.Context)) *MockTXManager_NotifyStatesDBChanged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTXManager_NotifyStatesDBChanged_Call) Return() *MockTXManager_NotifyStatesDBChanged_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTXManager_NotifyStatesDBChanged_Call) RunAndReturn(run func(ctx context.Context)) *MockTXManager_NotifyStatesDBChanged_Call {
	_c.Run(run)
	return _c
}

// PostInit provides a mock function for the type MockTXManager
func (_mock *MockTXManager) PostInit(allComponents AllComponents) error {
	ret := _mock.Called(allComponents)

	if len(ret) == 0 {
		panic("no return value specified for PostInit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(AllComponents) error); ok {
		r0 = returnFunc(allComponents)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTXManager_PostInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostInit'
type MockTXManager_PostInit_Call struct {
	*mock.Call
}

// PostInit is a helper method to define mock.On call
//   - allComponents AllComponents
func (_e *MockTXManager_Expecter) PostInit(allComponents interface{}) *MockTXManager_PostInit_Call {
	return &MockTXManager_PostInit_Call{Call: _e.mock.On("PostInit", allComponents)}
}

func (_c *MockTXManager_PostInit_Call) Run(run func(allComponents AllComponents)) *MockTXManager_PostInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 AllComponents
		if args[0] != nil {
			arg0 = args[0].(AllComponents)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTXManager_PostInit_Call) Return(err error) *MockTXManager_PostInit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTXManager_PostInit_Call) RunAndReturn(run func(allComponents AllComponents) error) *MockTXManager_PostInit_Call {
	_c.Call.Return(run)
	return _c
}

// PreInit provides a mock function for the type MockTXManager
func (_mock *MockTXManager) PreInit(preInitComponents PreInitComponents) (*ManagerInitResult, error) {
	ret := _mock.Called(preInitComponents)

	if len(ret) == 0 {
		panic("no return value specified for PreInit")
	}

	var r0 *ManagerInitResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(PreInitComponents) (*ManagerInitResult, error)); ok {
		return returnFunc(preInitComponents)
	}
	if returnFunc, ok := ret.Get(0).(func(PreInitComponents) *ManagerInitResult); ok {
		r0 = returnFunc(preInitComponents)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ManagerInitResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(PreInitComponents) error); ok {
		r1 = returnFunc(preInitComponents)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTXManager_PreInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreInit'
type MockTXManager_PreInit_Call struct {
	*mock.Call
}

// PreInit is a helper method to define mock.On call
//   - preInitComponents PreInitComponents
func (_e *MockTXManager_Expecter) PreInit(preInitComponents interface{}) *MockTXManager_PreInit_Call {
	return &MockTXManager_PreInit_Call{Call: _e.mock.On("PreInit", preInitComponents)}
}

func (_c *MockTXManager_PreInit_Call) Run(run func(preInitComponents PreInitComponents)) *MockTXManager_PreInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 PreInitComponents
		if args[0] != nil {
			arg0 = args[0].(PreInitComponents)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTXManager_PreInit_Call) Return(managerInitResult *ManagerInitResult, err error) *MockTXManager_PreInit_Call {
	_c.Call.Return(managerInitResult, err)
	return _c
}

func (_c *MockTXManager_PreInit_Call) RunAndReturn(run func(preInitComponents PreInitComponents) (*ManagerInitResult, error)) *MockTXManager_PreInit_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareInternalPrivateTransaction provides a mock function for the type MockTXManager
func (_mock *MockTXManager) PrepareInternalPrivateTransaction(ctx context.Context, dbTX persistence.DBTX, tx *pldapi.TransactionInput, submitMode pldapi.SubmitMode) (*ValidatedTransaction, error) {
	ret := _mock.Called(ctx, dbTX, tx, submitMode)

	if len(ret) == 0 {
		panic("no return value specified for PrepareInternalPrivateTransaction")
	}

	var r0 *ValidatedTransaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, *pldapi.TransactionInput, pldapi.SubmitMode) (*ValidatedTransaction, error)); ok {
		return returnFunc(ctx, dbTX, tx, submitMode)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, *pldapi.TransactionInput, pldapi.SubmitMode) *ValidatedTransaction); ok {
		r0 = returnFunc(ctx, dbTX, tx, submitMode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ValidatedTransaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, *pldapi.TransactionInput, pldapi.SubmitMode) error); ok {
		r1 = returnFunc(ctx, dbTX, tx, submitMode)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTXManager_PrepareInternalPrivateTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareInternalPrivateTransaction'
type MockTXManager_PrepareInternalPrivateTransaction_Call struct {
	*mock.Call
}

// PrepareInternalPrivateTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - tx *pldapi.TransactionInput
//   - submitMode pldapi.SubmitMode
func (_e *MockTXManager_Expecter) PrepareInternalPrivateTransaction(ctx interface{}, dbTX interface{}, tx interface{}, submitMode interface{}) *MockTXManager_PrepareInternalPrivateTransaction_Call {
	return &MockTXManager_PrepareInternalPrivateTransaction_Call{Call: _e.mock.On("PrepareInternalPrivateTransaction", ctx, dbTX, tx, submitMode)}
}

func (_c *MockTXManager_PrepareInternalPrivateTransaction_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, tx *pldapi.TransactionInput, submitMode pldapi.SubmitMode)) *MockTXManager_PrepareInternalPrivateTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 *pldapi.TransactionInput
		if args[2] != nil {
			arg2 = args[2].(*pldapi.TransactionInput)
		}
		var arg3 pldapi.SubmitMode
		if args[3] != nil {
			arg3 = args[3].(pldapi.SubmitMode)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockTXManager_PrepareInternalPrivateTransaction_Call) Return(validatedTransaction *ValidatedTransaction, err error) *MockTXManager_PrepareInternalPrivateTransaction_Call {
	_c.Call.Return(validatedTransaction, err)
	return _c
}

func (_c *MockTXManager_PrepareInternalPrivateTransaction_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, tx *pldapi.TransactionInput, submitMode pldapi.SubmitMode) (*ValidatedTransaction, error)) *MockTXManager_PrepareInternalPrivateTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareTransactions provides a mock function for the type MockTXManager
func (_mock *MockTXManager) PrepareTransactions(ctx context.Context, dbTX persistence.DBTX, txs ...*pldapi.TransactionInput) ([]uuid.UUID, error) {
	// *pldapi.TransactionInput
	_va := make([]interface{}, len(txs))
	for _i := range txs {
		_va[_i] = txs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dbTX)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PrepareTransactions")
	}

	var r0 []uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, ...*pldapi.TransactionInput) ([]uuid.UUID, error)); ok {
		return returnFunc(ctx, dbTX, txs...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, ...*pldapi.TransactionInput) []uuid.UUID); ok {
		r0 = returnFunc(ctx, dbTX, txs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, ...*pldapi.TransactionInput) error); ok {
		r1 = returnFunc(ctx, dbTX, txs...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTXManager_PrepareTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareTransactions'
type MockTXManager_PrepareTransactions_Call struct {
	*mock.Call
}

// PrepareTransactions is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - txs ...*pldapi.TransactionInput
func (_e *MockTXManager_Expecter) PrepareTransactions(ctx interface{}, dbTX interface{}, txs ...interface{}) *MockTXManager_PrepareTransactions_Call {
	return &MockTXManager_PrepareTransactions_Call{Call: _e.mock.On("PrepareTransactions",
		append([]interface{}{ctx, dbTX}, txs...)...)}
}

func (_c *MockTXManager_PrepareTransactions_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, txs ...*pldapi.TransactionInput)) *MockTXManager_PrepareTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 []*pldapi.TransactionInput
		variadicArgs := make([]*pldapi.TransactionInput, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*pldapi.TransactionInput)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockTXManager_PrepareTransactions_Call) Return(txIDs []uuid.UUID, err error) *MockTXManager_PrepareTransactions_Call {
	_c.Call.Return(txIDs, err)
	return _c
}

func (_c *MockTXManager_PrepareTransactions_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, txs ...*pldapi.TransactionInput) ([]uuid.UUID, error)) *MockTXManager_PrepareTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// QueryPreparedTransactions provides a mock function for the type MockTXManager
func (_mock *MockTXManager) QueryPreparedTransactions(ctx context.Context, dbTX persistence.DBTX, jq *query.QueryJSON) ([]*pldapi.PreparedTransaction, error) {
	ret := _mock.Called(ctx, dbTX, jq)

	if len(ret) == 0 {
		panic("no return value specified for QueryPreparedTransactions")
	}

	var r0 []*pldapi.PreparedTransaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, *query.QueryJSON) ([]*pldapi.PreparedTransaction, error)); ok {
		return returnFunc(ctx, dbTX, jq)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, *query.QueryJSON) []*pldapi.PreparedTransaction); ok {
		r0 = returnFunc(ctx, dbTX, jq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pldapi.PreparedTransaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, *query.QueryJSON) error); ok {
		r1 = returnFunc(ctx, dbTX, jq)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTXManager_QueryPreparedTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryPreparedTransactions'
type MockTXManager_QueryPreparedTransactions_Call struct {
	*mock.Call
}

// QueryPreparedTransactions is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - jq *query.QueryJSON
func (_e *MockTXManager_Expecter) QueryPreparedTransactions(ctx interface{}, dbTX interface{}, jq interface{}) *MockTXManager_QueryPreparedTransactions_Call {
	return &MockTXManager_QueryPreparedTransactions_Call{Call: _e.mock.On("QueryPreparedTransactions", ctx, dbTX, jq)}
}

func (_c *MockTXManager_QueryPreparedTransactions_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, jq *query.QueryJSON)) *MockTXManager_QueryPreparedTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 *query.QueryJSON
		if args[2] != nil {
			arg2 = args[2].(*query.QueryJSON)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTXManager_QueryPreparedTransactions_Call) Return(preparedTransactions []*pldapi.PreparedTransaction, err error) *MockTXManager_QueryPreparedTransactions_Call {
	_c.Call.Return(preparedTransactions, err)
	return _c
}

func (_c *MockTXManager_QueryPreparedTransactions_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, jq *query.QueryJSON) ([]*pldapi.PreparedTransaction, error)) *MockTXManager_QueryPreparedTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// QueryPreparedTransactionsWithRefs provides a mock function for the type MockTXManager
func (_mock *MockTXManager) QueryPreparedTransactionsWithRefs(ctx context.Context, dbTX persistence.DBTX, jq *query.QueryJSON) ([]*PreparedTransactionWithRefs, error) {
	ret := _mock.Called(ctx, dbTX, jq)

	if len(ret) == 0 {
		panic("no return value specified for QueryPreparedTransactionsWithRefs")
	}

	var r0 []*PreparedTransactionWithRefs
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, *query.QueryJSON) ([]*PreparedTransactionWithRefs, error)); ok {
		return returnFunc(ctx, dbTX, jq)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, *query.QueryJSON) []*PreparedTransactionWithRefs); ok {
		r0 = returnFunc(ctx, dbTX, jq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*PreparedTransactionWithRefs)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, *query.QueryJSON) error); ok {
		r1 = returnFunc(ctx, dbTX, jq)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTXManager_QueryPreparedTransactionsWithRefs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryPreparedTransactionsWithRefs'
type MockTXManager_QueryPreparedTransactionsWithRefs_Call struct {
	*mock.Call
}

// QueryPreparedTransactionsWithRefs is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - jq *query.QueryJSON
func (_e *MockTXManager_Expecter) QueryPreparedTransactionsWithRefs(ctx interface{}, dbTX interface{}, jq interface{}) *MockTXManager_QueryPreparedTransactionsWithRefs_Call {
	return &MockTXManager_QueryPreparedTransactionsWithRefs_Call{Call: _e.mock.On("QueryPreparedTransactionsWithRefs", ctx, dbTX, jq)}
}

func (_c *MockTXManager_QueryPreparedTransactionsWithRefs_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, jq *query.QueryJSON)) *MockTXManager_QueryPreparedTransactionsWithRefs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 *query.QueryJSON
		if args[2] != nil {
			arg2 = args[2].(*query.QueryJSON)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTXManager_QueryPreparedTransactionsWithRefs_Call) Return(preparedTransactionWithRefss []*PreparedTransactionWithRefs, err error) *MockTXManager_QueryPreparedTransactionsWithRefs_Call {
	_c.Call.Return(preparedTransactionWithRefss, err)
	return _c
}

func (_c *MockTXManager_QueryPreparedTransactionsWithRefs_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, jq *query.QueryJSON) ([]*PreparedTransactionWithRefs, error)) *MockTXManager_QueryPreparedTransactionsWithRefs_Call {
	_c.Call.Return(run)
	return _c
}

// QueryReceiptListeners provides a mock function for the type MockTXManager
func (_mock *MockTXManager) QueryReceiptListeners(ctx context.Context, dbTX persistence.DBTX, jq *query.QueryJSON) ([]*pldapi.TransactionReceiptListener, error) {
	ret := _mock.Called(ctx, dbTX, jq)

	if len(ret) == 0 {
		panic("no return value specified for QueryReceiptListeners")
	}

	var r0 []*pldapi.TransactionReceiptListener
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, *query.QueryJSON) ([]*pldapi.TransactionReceiptListener, error)); ok {
		return returnFunc(ctx, dbTX, jq)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, *query.QueryJSON) []*pldapi.TransactionReceiptListener); ok {
		r0 = returnFunc(ctx, dbTX, jq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pldapi.TransactionReceiptListener)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, *query.QueryJSON) error); ok {
		r1 = returnFunc(ctx, dbTX, jq)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTXManager_QueryReceiptListeners_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryReceiptListeners'
type MockTXManager_QueryReceiptListeners_Call struct {
	*mock.Call
}

// QueryReceiptListeners is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - jq *query.QueryJSON
func (_e *MockTXManager_Expecter) QueryReceiptListeners(ctx interface{}, dbTX interface{}, jq interface{}) *MockTXManager_QueryReceiptListeners_Call {
	return &MockTXManager_QueryReceiptListeners_Call{Call: _e.mock.On("QueryReceiptListeners", ctx, dbTX, jq)}
}

func (_c *MockTXManager_QueryReceiptListeners_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, jq *query.QueryJSON)) *MockTXManager_QueryReceiptListeners_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 *query.QueryJSON
		if args[2] != nil {
			arg2 = args[2].(*query.QueryJSON)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTXManager_QueryReceiptListeners_Call) Return(transactionReceiptListeners []*pldapi.TransactionReceiptListener, err error) *MockTXManager_QueryReceiptListeners_Call {
	_c.Call.Return(transactionReceiptListeners, err)
	return _c
}

func (_c *MockTXManager_QueryReceiptListeners_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, jq *query.QueryJSON) ([]*pldapi.TransactionReceiptListener, error)) *MockTXManager_QueryReceiptListeners_Call {
	_c.Call.Return(run)
	return _c
}

// QueryTransactionReceipts provides a mock function for the type MockTXManager
func (_mock *MockTXManager) QueryTransactionReceipts(ctx context.Context, jq *query.QueryJSON) ([]*pldapi.TransactionReceipt, error) {
	ret := _mock.Called(ctx, jq)

	if len(ret) == 0 {
		panic("no return value specified for QueryTransactionReceipts")
	}

	var r0 []*pldapi.TransactionReceipt
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *query.QueryJSON) ([]*pldapi.TransactionReceipt, error)); ok {
		return returnFunc(ctx, jq)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *query.QueryJSON) []*pldapi.TransactionReceipt); ok {
		r0 = returnFunc(ctx, jq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pldapi.TransactionReceipt)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *query.QueryJSON) error); ok {
		r1 = returnFunc(ctx, jq)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTXManager_QueryTransactionReceipts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryTransactionReceipts'
type MockTXManager_QueryTransactionReceipts_Call struct {
	*mock.Call
}

// QueryTransactionReceipts is a helper method to define mock.On call
//   - ctx context.Context
//   - jq *query.QueryJSON
func (_e *MockTXManager_Expecter) QueryTransactionReceipts(ctx interface{}, jq interface{}) *MockTXManager_QueryTransactionReceipts_Call {
	return &MockTXManager_QueryTransactionReceipts_Call{Call: _e.mock.On("QueryTransactionReceipts", ctx, jq)}
}

func (_c *MockTXManager_QueryTransactionReceipts_Call) Run(run func(ctx context.Context, jq *query.QueryJSON)) *MockTXManager_QueryTransactionReceipts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *query.QueryJSON
		if args[1] != nil {
			arg1 = args[1].(*query.QueryJSON)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTXManager_QueryTransactionReceipts_Call) Return(transactionReceipts []*pldapi.TransactionReceipt, err error) *MockTXManager_QueryTransactionReceipts_Call {
	_c.Call.Return(transactionReceipts, err)
	return _c
}

func (_c *MockTXManager_QueryTransactionReceipts_Call) RunAndReturn(run func(ctx context.Context, jq *query.QueryJSON) ([]*pldapi.TransactionReceipt, error)) *MockTXManager_QueryTransactionReceipts_Call {
	_c.Call.Return(run)
	return _c
}

// QueryTransactions provides a mock function for the type MockTXManager
func (_mock *MockTXManager) QueryTransactions(ctx context.Context, jq *query.QueryJSON, dbTX persistence.DBTX, pending bool) ([]*pldapi.Transaction, error) {
	ret := _mock.Called(ctx, jq, dbTX, pending)

	if len(ret) == 0 {
		panic("no return value specified for QueryTransactions")
	}

	var r0 []*pldapi.Transaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *query.QueryJSON, persistence.DBTX, bool) ([]*pldapi.Transaction, error)); ok {
		return returnFunc(ctx, jq, dbTX, pending)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *query.QueryJSON, persistence.DBTX, bool) []*pldapi.Transaction); ok {
		r0 = returnFunc(ctx, jq, dbTX, pending)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pldapi.Transaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *query.QueryJSON, persistence.DBTX, bool) error); ok {
		r1 = returnFunc(ctx, jq, dbTX, pending)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTXManager_QueryTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryTransactions'
type MockTXManager_QueryTransactions_Call struct {
	*mock.Call
}

// QueryTransactions is a helper method to define mock.On call
//   - ctx context.Context
//   - jq *query.QueryJSON
//   - dbTX persistence.DBTX
//   - pending bool
func (_e *MockTXManager_Expecter) QueryTransactions(ctx interface{}, jq interface{}, dbTX interface{}, pending interface{}) *MockTXManager_QueryTransactions_Call {
	return &MockTXManager_QueryTransactions_Call{Call: _e.mock.On("QueryTransactions", ctx, jq, dbTX, pending)}
}

func (_c *MockTXManager_QueryTransactions_Call) Run(run func(ctx context.Context, jq *query.QueryJSON, dbTX persistence.DBTX, pending bool)) *MockTXManager_QueryTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *query.QueryJSON
		if args[1] != nil {
			arg1 = args[1].(*query.QueryJSON)
		}
		var arg2 persistence.DBTX
		if args[2] != nil {
			arg2 = args[2].(persistence.DBTX)
		}
		var arg3 bool
		if args[3] != nil {
			arg3 = args[3].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockTXManager_QueryTransactions_Call) Return(transactions []*pldapi.Transaction, err error) *MockTXManager_QueryTransactions_Call {
	_c.Call.Return(transactions, err)
	return _c
}

func (_c *MockTXManager_QueryTransactions_Call) RunAndReturn(run func(ctx context.Context, jq *query.QueryJSON, dbTX persistence.DBTX, pending bool) ([]*pldapi.Transaction, error)) *MockTXManager_QueryTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// QueryTransactionsFull provides a mock function for the type MockTXManager
func (_mock *MockTXManager) QueryTransactionsFull(ctx context.Context, jq *query.QueryJSON, dbTX persistence.DBTX, pending bool) ([]*pldapi.TransactionFull, error) {
	ret := _mock.Called(ctx, jq, dbTX, pending)

	if len(ret) == 0 {
		panic("no return value specified for QueryTransactionsFull")
	}

	var r0 []*pldapi.TransactionFull
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *query.QueryJSON, persistence.DBTX, bool) ([]*pldapi.TransactionFull, error)); ok {
		return returnFunc(ctx, jq, dbTX, pending)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *query.QueryJSON, persistence.DBTX, bool) []*pldapi.TransactionFull); ok {
		r0 = returnFunc(ctx, jq, dbTX, pending)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pldapi.TransactionFull)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *query.QueryJSON, persistence.DBTX, bool) error); ok {
		r1 = returnFunc(ctx, jq, dbTX, pending)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTXManager_QueryTransactionsFull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryTransactionsFull'
type MockTXManager_QueryTransactionsFull_Call struct {
	*mock.Call
}

// QueryTransactionsFull is a helper method to define mock.On call
//   - ctx context.Context
//   - jq *query.QueryJSON
//   - dbTX persistence.DBTX
//   - pending bool
func (_e *MockTXManager_Expecter) QueryTransactionsFull(ctx interface{}, jq interface{}, dbTX interface{}, pending interface{}) *MockTXManager_QueryTransactionsFull_Call {
	return &MockTXManager_QueryTransactionsFull_Call{Call: _e.mock.On("QueryTransactionsFull", ctx, jq, dbTX, pending)}
}

func (_c *MockTXManager_QueryTransactionsFull_Call) Run(run func(ctx context.Context, jq *query.QueryJSON, dbTX persistence.DBTX, pending bool)) *MockTXManager_QueryTransactionsFull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *query.QueryJSON
		if args[1] != nil {
			arg1 = args[1].(*query.QueryJSON)
		}
		var arg2 persistence.DBTX
		if args[2] != nil {
			arg2 = args[2].(persistence.DBTX)
		}
		var arg3 bool
		if args[3] != nil {
			arg3 = args[3].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockTXManager_QueryTransactionsFull_Call) Return(results []*pldapi.TransactionFull, err error) *MockTXManager_QueryTransactionsFull_Call {
	_c.Call.Return(results, err)
	return _c
}

func (_c *MockTXManager_QueryTransactionsFull_Call) RunAndReturn(run func(ctx context.Context, jq *query.QueryJSON, dbTX persistence.DBTX, pending bool) ([]*pldapi.TransactionFull, error)) *MockTXManager_QueryTransactionsFull_Call {
	_c.Call.Return(run)
	return _c
}

// QueryTransactionsFullTx provides a mock function for the type MockTXManager
func (_mock *MockTXManager) QueryTransactionsFullTx(ctx context.Context, jq *query.QueryJSON, dbTX persistence.DBTX, pending bool) ([]*pldapi.TransactionFull, error) {
	ret := _mock.Called(ctx, jq, dbTX, pending)

	if len(ret) == 0 {
		panic("no return value specified for QueryTransactionsFullTx")
	}

	var r0 []*pldapi.TransactionFull
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *query.QueryJSON, persistence.DBTX, bool) ([]*pldapi.TransactionFull, error)); ok {
		return returnFunc(ctx, jq, dbTX, pending)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *query.QueryJSON, persistence.DBTX, bool) []*pldapi.TransactionFull); ok {
		r0 = returnFunc(ctx, jq, dbTX, pending)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pldapi.TransactionFull)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *query.QueryJSON, persistence.DBTX, bool) error); ok {
		r1 = returnFunc(ctx, jq, dbTX, pending)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTXManager_QueryTransactionsFullTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryTransactionsFullTx'
type MockTXManager_QueryTransactionsFullTx_Call struct {
	*mock.Call
}

// QueryTransactionsFullTx is a helper method to define mock.On call
//   - ctx context.Context
//   - jq *query.QueryJSON
//   - dbTX persistence.DBTX
//   - pending bool
func (_e *MockTXManager_Expecter) QueryTransactionsFullTx(ctx interface{}, jq interface{}, dbTX interface{}, pending interface{}) *MockTXManager_QueryTransactionsFullTx_Call {
	return &MockTXManager_QueryTransactionsFullTx_Call{Call: _e.mock.On("QueryTransactionsFullTx", ctx, jq, dbTX, pending)}
}

func (_c *MockTXManager_QueryTransactionsFullTx_Call) Run(run func(ctx context.Context, jq *query.QueryJSON, dbTX persistence.DBTX, pending bool)) *MockTXManager_QueryTransactionsFullTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *query.QueryJSON
		if args[1] != nil {
			arg1 = args[1].(*query.QueryJSON)
		}
		var arg2 persistence.DBTX
		if args[2] != nil {
			arg2 = args[2].(persistence.DBTX)
		}
		var arg3 bool
		if args[3] != nil {
			arg3 = args[3].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockTXManager_QueryTransactionsFullTx_Call) Return(transactionFulls []*pldapi.TransactionFull, err error) *MockTXManager_QueryTransactionsFullTx_Call {
	_c.Call.Return(transactionFulls, err)
	return _c
}

func (_c *MockTXManager_QueryTransactionsFullTx_Call) RunAndReturn(run func(ctx context.Context, jq *query.QueryJSON, dbTX persistence.DBTX, pending bool) ([]*pldapi.TransactionFull, error)) *MockTXManager_QueryTransactionsFullTx_Call {
	_c.Call.Return(run)
	return _c
}

// QueryTransactionsResolved provides a mock function for the type MockTXManager
func (_mock *MockTXManager) QueryTransactionsResolved(ctx context.Context, jq *query.QueryJSON, dbTX persistence.DBTX, pending bool) ([]*ResolvedTransaction, error) {
	ret := _mock.Called(ctx, jq, dbTX, pending)

	if len(ret) == 0 {
		panic("no return value specified for QueryTransactionsResolved")
	}

	var r0 []*ResolvedTransaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *query.QueryJSON, persistence.DBTX, bool) ([]*ResolvedTransaction, error)); ok {
		return returnFunc(ctx, jq, dbTX, pending)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *query.QueryJSON, persistence.DBTX, bool) []*ResolvedTransaction); ok {
		r0 = returnFunc(ctx, jq, dbTX, pending)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ResolvedTransaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *query.QueryJSON, persistence.DBTX, bool) error); ok {
		r1 = returnFunc(ctx, jq, dbTX, pending)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTXManager_QueryTransactionsResolved_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryTransactionsResolved'
type MockTXManager_QueryTransactionsResolved_Call struct {
	*mock.Call
}

// QueryTransactionsResolved is a helper method to define mock.On call
//   - ctx context.Context
//   - jq *query.QueryJSON
//   - dbTX persistence.DBTX
//   - pending bool
func (_e *MockTXManager_Expecter) QueryTransactionsResolved(ctx interface{}, jq interface{}, dbTX interface{}, pending interface{}) *MockTXManager_QueryTransactionsResolved_Call {
	return &MockTXManager_QueryTransactionsResolved_Call{Call: _e.mock.On("QueryTransactionsResolved", ctx, jq, dbTX, pending)}
}

func (_c *MockTXManager_QueryTransactionsResolved_Call) Run(run func(ctx context.Context, jq *query.QueryJSON, dbTX persistence.DBTX, pending bool)) *MockTXManager_QueryTransactionsResolved_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *query.QueryJSON
		if args[1] != nil {
			arg1 = args[1].(*query.QueryJSON)
		}
		var arg2 persistence.DBTX
		if args[2] != nil {
			arg2 = args[2].(persistence.DBTX)
		}
		var arg3 bool
		if args[3] != nil {
			arg3 = args[3].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockTXManager_QueryTransactionsResolved_Call) Return(resolvedTransactions []*ResolvedTransaction, err error) *MockTXManager_QueryTransactionsResolved_Call {
	_c.Call.Return(resolvedTransactions, err)
	return _c
}

func (_c *MockTXManager_QueryTransactionsResolved_Call) RunAndReturn(run func(ctx context.Context, jq *query.QueryJSON, dbTX persistence.DBTX, pending bool) ([]*ResolvedTransaction, error)) *MockTXManager_QueryTransactionsResolved_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveTransactionInputs provides a mock function for the type MockTXManager
func (_mock *MockTXManager) ResolveTransactionInputs(ctx context.Context, dbTX persistence.DBTX, tx *pldapi.TransactionInput) (*ResolvedFunction, *abi.ComponentValue, pldtypes.RawJSON, error) {
	ret := _mock.Called(ctx, dbTX, tx)

	if len(ret) == 0 {
		panic("no return value specified for ResolveTransactionInputs")
	}

	var r0 *ResolvedFunction
	var r1 *abi.ComponentValue
	var r2 pldtypes.RawJSON
	var r3 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, *pldapi.TransactionInput) (*ResolvedFunction, *abi.ComponentValue, pldtypes.RawJSON, error)); ok {
		return returnFunc(ctx, dbTX, tx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, *pldapi.TransactionInput) *ResolvedFunction); ok {
		r0 = returnFunc(ctx, dbTX, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ResolvedFunction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, *pldapi.TransactionInput) *abi.ComponentValue); ok {
		r1 = returnFunc(ctx, dbTX, tx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*abi.ComponentValue)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, persistence.DBTX, *pldapi.TransactionInput) pldtypes.RawJSON); ok {
		r2 = returnFunc(ctx, dbTX, tx)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(pldtypes.RawJSON)
		}
	}
	if returnFunc, ok := ret.Get(3).(func(context.Context, persistence.DBTX, *pldapi.TransactionInput) error); ok {
		r3 = returnFunc(ctx, dbTX, tx)
	} else {
		r3 = ret.Error(3)
	}
	return r0, r1, r2, r3
}

// MockTXManager_ResolveTransactionInputs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveTransactionInputs'
type MockTXManager_ResolveTransactionInputs_Call struct {
	*mock.Call
}

// ResolveTransactionInputs is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - tx *pldapi.TransactionInput
func (_e *MockTXManager_Expecter) ResolveTransactionInputs(ctx interface{}, dbTX interface{}, tx interface{}) *MockTXManager_ResolveTransactionInputs_Call {
	return &MockTXManager_ResolveTransactionInputs_Call{Call: _e.mock.On("ResolveTransactionInputs", ctx, dbTX, tx)}
}

func (_c *MockTXManager_ResolveTransactionInputs_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, tx *pldapi.TransactionInput)) *MockTXManager_ResolveTransactionInputs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 *pldapi.TransactionInput
		if args[2] != nil {
			arg2 = args[2].(*pldapi.TransactionInput)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTXManager_ResolveTransactionInputs_Call) Return(resolvedFunction *ResolvedFunction, componentValue *abi.ComponentValue, rawJSON pldtypes.RawJSON, err error) *MockTXManager_ResolveTransactionInputs_Call {
	_c.Call.Return(resolvedFunction, componentValue, rawJSON, err)
	return _c
}

func (_c *MockTXManager_ResolveTransactionInputs_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, tx *pldapi.TransactionInput) (*ResolvedFunction, *abi.ComponentValue, pldtypes.RawJSON, error)) *MockTXManager_ResolveTransactionInputs_Call {
	_c.Call.Return(run)
	return _c
}

// SendTransactions provides a mock function for the type MockTXManager
func (_mock *MockTXManager) SendTransactions(ctx context.Context, dbTX persistence.DBTX, txs ...*pldapi.TransactionInput) ([]uuid.UUID, error) {
	// *pldapi.TransactionInput
	_va := make([]interface{}, len(txs))
	for _i := range txs {
		_va[_i] = txs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dbTX)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendTransactions")
	}

	var r0 []uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, ...*pldapi.TransactionInput) ([]uuid.UUID, error)); ok {
		return returnFunc(ctx, dbTX, txs...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, ...*pldapi.TransactionInput) []uuid.UUID); ok {
		r0 = returnFunc(ctx, dbTX, txs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, ...*pldapi.TransactionInput) error); ok {
		r1 = returnFunc(ctx, dbTX, txs...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTXManager_SendTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendTransactions'
type MockTXManager_SendTransactions_Call struct {
	*mock.Call
}

// SendTransactions is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - txs ...*pldapi.TransactionInput
func (_e *MockTXManager_Expecter) SendTransactions(ctx interface{}, dbTX interface{}, txs ...interface{}) *MockTXManager_SendTransactions_Call {
	return &MockTXManager_SendTransactions_Call{Call: _e.mock.On("SendTransactions",
		append([]interface{}{ctx, dbTX}, txs...)...)}
}

func (_c *MockTXManager_SendTransactions_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, txs ...*pldapi.TransactionInput)) *MockTXManager_SendTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 []*pldapi.TransactionInput
		variadicArgs := make([]*pldapi.TransactionInput, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*pldapi.TransactionInput)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockTXManager_SendTransactions_Call) Return(txIDs []uuid.UUID, err error) *MockTXManager_SendTransactions_Call {
	_c.Call.Return(txIDs, err)
	return _c
}

func (_c *MockTXManager_SendTransactions_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, txs ...*pldapi.TransactionInput) ([]uuid.UUID, error)) *MockTXManager_SendTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockTXManager
func (_mock *MockTXManager) Start() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTXManager_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockTXManager_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockTXManager_Expecter) Start() *MockTXManager_Start_Call {
	return &MockTXManager_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockTXManager_Start_Call) Run(run func()) *MockTXManager_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTXManager_Start_Call) Return(err error) *MockTXManager_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTXManager_Start_Call) RunAndReturn(run func() error) *MockTXManager_Start_Call {
	_c.Call.Return(run)
	return _c
}

// StartReceiptListener provides a mock function for the type MockTXManager
func (_mock *MockTXManager) StartReceiptListener(ctx context.Context, name string) error {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for StartReceiptListener")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTXManager_StartReceiptListener_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartReceiptListener'
type MockTXManager_StartReceiptListener_Call struct {
	*mock.Call
}

// StartReceiptListener is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockTXManager_Expecter) StartReceiptListener(ctx interface{}, name interface{}) *MockTXManager_StartReceiptListener_Call {
	return &MockTXManager_StartReceiptListener_Call{Call: _e.mock.On("StartReceiptListener", ctx, name)}
}

func (_c *MockTXManager_StartReceiptListener_Call) Run(run func(ctx context.Context, name string)) *MockTXManager_StartReceiptListener_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTXManager_StartReceiptListener_Call) Return(err error) *MockTXManager_StartReceiptListener_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTXManager_StartReceiptListener_Call) RunAndReturn(run func(ctx context.Context, name string) error) *MockTXManager_StartReceiptListener_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockTXManager
func (_mock *MockTXManager) Stop() {
	_mock.Called()
	return
}

// MockTXManager_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockTXManager_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockTXManager_Expecter) Stop() *MockTXManager_Stop_Call {
	return &MockTXManager_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockTXManager_Stop_Call) Run(run func()) *MockTXManager_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTXManager_Stop_Call) Return() *MockTXManager_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTXManager_Stop_Call) RunAndReturn(run func()) *MockTXManager_Stop_Call {
	_c.Run(run)
	return _c
}

// StopReceiptListener provides a mock function for the type MockTXManager
func (_mock *MockTXManager) StopReceiptListener(ctx context.Context, name string) error {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for StopReceiptListener")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTXManager_StopReceiptListener_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopReceiptListener'
type MockTXManager_StopReceiptListener_Call struct {
	*mock.Call
}

// StopReceiptListener is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockTXManager_Expecter) StopReceiptListener(ctx interface{}, name interface{}) *MockTXManager_StopReceiptListener_Call {
	return &MockTXManager_StopReceiptListener_Call{Call: _e.mock.On("StopReceiptListener", ctx, name)}
}

func (_c *MockTXManager_StopReceiptListener_Call) Run(run func(ctx context.Context, name string)) *MockTXManager_StopReceiptListener_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTXManager_StopReceiptListener_Call) Return(err error) *MockTXManager_StopReceiptListener_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTXManager_StopReceiptListener_Call) RunAndReturn(run func(ctx context.Context, name string) error) *MockTXManager_StopReceiptListener_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertABI provides a mock function for the type MockTXManager
func (_mock *MockTXManager) UpsertABI(ctx context.Context, dbTX persistence.DBTX, a abi.ABI) (*pldapi.StoredABI, error) {
	ret := _mock.Called(ctx, dbTX, a)

	if len(ret) == 0 {
		panic("no return value specified for UpsertABI")
	}

	var r0 *pldapi.StoredABI
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, abi.ABI) (*pldapi.StoredABI, error)); ok {
		return returnFunc(ctx, dbTX, a)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, abi.ABI) *pldapi.StoredABI); ok {
		r0 = returnFunc(ctx, dbTX, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.StoredABI)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, abi.ABI) error); ok {
		r1 = returnFunc(ctx, dbTX, a)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTXManager_UpsertABI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertABI'
type MockTXManager_UpsertABI_Call struct {
	*mock.Call
}

// UpsertABI is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - a abi.ABI
func (_e *MockTXManager_Expecter) UpsertABI(ctx interface{}, dbTX interface{}, a interface{}) *MockTXManager_UpsertABI_Call {
	return &MockTXManager_UpsertABI_Call{Call: _e.mock.On("UpsertABI", ctx, dbTX, a)}
}

func (_c *MockTXManager_UpsertABI_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, a abi.ABI)) *MockTXManager_UpsertABI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 abi.ABI
		if args[2] != nil {
			arg2 = args[2].(abi.ABI)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTXManager_UpsertABI_Call) Return(storedABI *pldapi.StoredABI, err error) *MockTXManager_UpsertABI_Call {
	_c.Call.Return(storedABI, err)
	return _c
}

func (_c *MockTXManager_UpsertABI_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, a abi.ABI) (*pldapi.StoredABI, error)) *MockTXManager_UpsertABI_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertInternalPrivateTxsFinalizeIDs provides a mock function for the type MockTXManager
func (_mock *MockTXManager) UpsertInternalPrivateTxsFinalizeIDs(ctx context.Context, dbTX persistence.DBTX, txis []*ValidatedTransaction) error {
	ret := _mock.Called(ctx, dbTX, txis)

	if len(ret) == 0 {
		panic("no return value specified for UpsertInternalPrivateTxsFinalizeIDs")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, []*ValidatedTransaction) error); ok {
		r0 = returnFunc(ctx, dbTX, txis)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTXManager_UpsertInternalPrivateTxsFinalizeIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertInternalPrivateTxsFinalizeIDs'
type MockTXManager_UpsertInternalPrivateTxsFinalizeIDs_Call struct {
	*mock.Call
}

// UpsertInternalPrivateTxsFinalizeIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - txis []*ValidatedTransaction
func (_e *MockTXManager_Expecter) UpsertInternalPrivateTxsFinalizeIDs(ctx interface{}, dbTX interface{}, txis interface{}) *MockTXManager_UpsertInternalPrivateTxsFinalizeIDs_Call {
	return &MockTXManager_UpsertInternalPrivateTxsFinalizeIDs_Call{Call: _e.mock.On("UpsertInternalPrivateTxsFinalizeIDs", ctx, dbTX, txis)}
}

func (_c *MockTXManager_UpsertInternalPrivateTxsFinalizeIDs_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, txis []*ValidatedTransaction)) *MockTXManager_UpsertInternalPrivateTxsFinalizeIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 []*ValidatedTransaction
		if args[2] != nil {
			arg2 = args[2].([]*ValidatedTransaction)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTXManager_UpsertInternalPrivateTxsFinalizeIDs_Call) Return(err error) *MockTXManager_UpsertInternalPrivateTxsFinalizeIDs_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTXManager_UpsertInternalPrivateTxsFinalizeIDs_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, txis []*ValidatedTransaction) error) *MockTXManager_UpsertInternalPrivateTxsFinalizeIDs_Call {
	_c.Call.Return(run)
	return _c
}

// WritePreparedTransactions provides a mock function for the type MockTXManager
func (_mock *MockTXManager) WritePreparedTransactions(ctx context.Context, dbTX persistence.DBTX, prepared []*PreparedTransactionWithRefs) error {
	ret := _mock.Called(ctx, dbTX, prepared)

	if len(ret) == 0 {
		panic("no return value specified for WritePreparedTransactions")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, []*PreparedTransactionWithRefs) error); ok {
		r0 = returnFunc(ctx, dbTX, prepared)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTXManager_WritePreparedTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WritePreparedTransactions'
type MockTXManager_WritePreparedTransactions_Call struct {
	*mock.Call
}

// WritePreparedTransactions is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - prepared []*PreparedTransactionWithRefs
func (_e *MockTXManager_Expecter) WritePreparedTransactions(ctx interface{}, dbTX interface{}, prepared interface{}) *MockTXManager_WritePreparedTransactions_Call {
	return &MockTXManager_WritePreparedTransactions_Call{Call: _e.mock.On("WritePreparedTransactions", ctx, dbTX, prepared)}
}

func (_c *MockTXManager_WritePreparedTransactions_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, prepared []*PreparedTransactionWithRefs)) *MockTXManager_WritePreparedTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 []*PreparedTransactionWithRefs
		if args[2] != nil {
			arg2 = args[2].([]*PreparedTransactionWithRefs)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTXManager_WritePreparedTransactions_Call) Return(err error) *MockTXManager_WritePreparedTransactions_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTXManager_WritePreparedTransactions_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, prepared []*PreparedTransactionWithRefs) error) *MockTXManager_WritePreparedTransactions_Call {
	_c.Call.Return(run)
	return _c
}
