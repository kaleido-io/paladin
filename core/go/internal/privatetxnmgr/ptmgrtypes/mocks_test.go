// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ptmgrtypes

import (
	"context"
	"time"

	"github.com/LF-Decentralized-Trust-labs/paladin/core/internal/components"
	"github.com/LF-Decentralized-Trust-labs/paladin/toolkit/pkg/prototk"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockPrivateTransactionEvent creates a new instance of MockPrivateTransactionEvent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPrivateTransactionEvent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPrivateTransactionEvent {
	mock := &MockPrivateTransactionEvent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPrivateTransactionEvent is an autogenerated mock type for the PrivateTransactionEvent type
type MockPrivateTransactionEvent struct {
	mock.Mock
}

type MockPrivateTransactionEvent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPrivateTransactionEvent) EXPECT() *MockPrivateTransactionEvent_Expecter {
	return &MockPrivateTransactionEvent_Expecter{mock: &_m.Mock}
}

// GetContractAddress provides a mock function for the type MockPrivateTransactionEvent
func (_mock *MockPrivateTransactionEvent) GetContractAddress() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetContractAddress")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockPrivateTransactionEvent_GetContractAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContractAddress'
type MockPrivateTransactionEvent_GetContractAddress_Call struct {
	*mock.Call
}

// GetContractAddress is a helper method to define mock.On call
func (_e *MockPrivateTransactionEvent_Expecter) GetContractAddress() *MockPrivateTransactionEvent_GetContractAddress_Call {
	return &MockPrivateTransactionEvent_GetContractAddress_Call{Call: _e.mock.On("GetContractAddress")}
}

func (_c *MockPrivateTransactionEvent_GetContractAddress_Call) Run(run func()) *MockPrivateTransactionEvent_GetContractAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPrivateTransactionEvent_GetContractAddress_Call) Return(s string) *MockPrivateTransactionEvent_GetContractAddress_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockPrivateTransactionEvent_GetContractAddress_Call) RunAndReturn(run func() string) *MockPrivateTransactionEvent_GetContractAddress_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionID provides a mock function for the type MockPrivateTransactionEvent
func (_mock *MockPrivateTransactionEvent) GetTransactionID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockPrivateTransactionEvent_GetTransactionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionID'
type MockPrivateTransactionEvent_GetTransactionID_Call struct {
	*mock.Call
}

// GetTransactionID is a helper method to define mock.On call
func (_e *MockPrivateTransactionEvent_Expecter) GetTransactionID() *MockPrivateTransactionEvent_GetTransactionID_Call {
	return &MockPrivateTransactionEvent_GetTransactionID_Call{Call: _e.mock.On("GetTransactionID")}
}

func (_c *MockPrivateTransactionEvent_GetTransactionID_Call) Run(run func()) *MockPrivateTransactionEvent_GetTransactionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPrivateTransactionEvent_GetTransactionID_Call) Return(s string) *MockPrivateTransactionEvent_GetTransactionID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockPrivateTransactionEvent_GetTransactionID_Call) RunAndReturn(run func() string) *MockPrivateTransactionEvent_GetTransactionID_Call {
	_c.Call.Return(run)
	return _c
}

// SetContractAddress provides a mock function for the type MockPrivateTransactionEvent
func (_mock *MockPrivateTransactionEvent) SetContractAddress(s string) {
	_mock.Called(s)
	return
}

// MockPrivateTransactionEvent_SetContractAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetContractAddress'
type MockPrivateTransactionEvent_SetContractAddress_Call struct {
	*mock.Call
}

// SetContractAddress is a helper method to define mock.On call
//   - s string
func (_e *MockPrivateTransactionEvent_Expecter) SetContractAddress(s interface{}) *MockPrivateTransactionEvent_SetContractAddress_Call {
	return &MockPrivateTransactionEvent_SetContractAddress_Call{Call: _e.mock.On("SetContractAddress", s)}
}

func (_c *MockPrivateTransactionEvent_SetContractAddress_Call) Run(run func(s string)) *MockPrivateTransactionEvent_SetContractAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPrivateTransactionEvent_SetContractAddress_Call) Return() *MockPrivateTransactionEvent_SetContractAddress_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPrivateTransactionEvent_SetContractAddress_Call) RunAndReturn(run func(s string)) *MockPrivateTransactionEvent_SetContractAddress_Call {
	_c.Run(run)
	return _c
}

// Validate provides a mock function for the type MockPrivateTransactionEvent
func (_mock *MockPrivateTransactionEvent) Validate(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPrivateTransactionEvent_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockPrivateTransactionEvent_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPrivateTransactionEvent_Expecter) Validate(ctx interface{}) *MockPrivateTransactionEvent_Validate_Call {
	return &MockPrivateTransactionEvent_Validate_Call{Call: _e.mock.On("Validate", ctx)}
}

func (_c *MockPrivateTransactionEvent_Validate_Call) Run(run func(ctx context.Context)) *MockPrivateTransactionEvent_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPrivateTransactionEvent_Validate_Call) Return(err error) *MockPrivateTransactionEvent_Validate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPrivateTransactionEvent_Validate_Call) RunAndReturn(run func(ctx context.Context) error) *MockPrivateTransactionEvent_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPublisher creates a new instance of MockPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPublisher {
	mock := &MockPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPublisher is an autogenerated mock type for the Publisher type
type MockPublisher struct {
	mock.Mock
}

type MockPublisher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPublisher) EXPECT() *MockPublisher_Expecter {
	return &MockPublisher_Expecter{mock: &_m.Mock}
}

// PublishNudgeEvent provides a mock function for the type MockPublisher
func (_mock *MockPublisher) PublishNudgeEvent(ctx context.Context, transactionId string) {
	_mock.Called(ctx, transactionId)
	return
}

// MockPublisher_PublishNudgeEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishNudgeEvent'
type MockPublisher_PublishNudgeEvent_Call struct {
	*mock.Call
}

// PublishNudgeEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - transactionId string
func (_e *MockPublisher_Expecter) PublishNudgeEvent(ctx interface{}, transactionId interface{}) *MockPublisher_PublishNudgeEvent_Call {
	return &MockPublisher_PublishNudgeEvent_Call{Call: _e.mock.On("PublishNudgeEvent", ctx, transactionId)}
}

func (_c *MockPublisher_PublishNudgeEvent_Call) Run(run func(ctx context.Context, transactionId string)) *MockPublisher_PublishNudgeEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPublisher_PublishNudgeEvent_Call) Return() *MockPublisher_PublishNudgeEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPublisher_PublishNudgeEvent_Call) RunAndReturn(run func(ctx context.Context, transactionId string)) *MockPublisher_PublishNudgeEvent_Call {
	_c.Run(run)
	return _c
}

// PublishResolveVerifierErrorEvent provides a mock function for the type MockPublisher
func (_mock *MockPublisher) PublishResolveVerifierErrorEvent(ctx context.Context, transactionId string, lookup string, algorithm string, errorMessage string) {
	_mock.Called(ctx, transactionId, lookup, algorithm, errorMessage)
	return
}

// MockPublisher_PublishResolveVerifierErrorEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishResolveVerifierErrorEvent'
type MockPublisher_PublishResolveVerifierErrorEvent_Call struct {
	*mock.Call
}

// PublishResolveVerifierErrorEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - transactionId string
//   - lookup string
//   - algorithm string
//   - errorMessage string
func (_e *MockPublisher_Expecter) PublishResolveVerifierErrorEvent(ctx interface{}, transactionId interface{}, lookup interface{}, algorithm interface{}, errorMessage interface{}) *MockPublisher_PublishResolveVerifierErrorEvent_Call {
	return &MockPublisher_PublishResolveVerifierErrorEvent_Call{Call: _e.mock.On("PublishResolveVerifierErrorEvent", ctx, transactionId, lookup, algorithm, errorMessage)}
}

func (_c *MockPublisher_PublishResolveVerifierErrorEvent_Call) Run(run func(ctx context.Context, transactionId string, lookup string, algorithm string, errorMessage string)) *MockPublisher_PublishResolveVerifierErrorEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockPublisher_PublishResolveVerifierErrorEvent_Call) Return() *MockPublisher_PublishResolveVerifierErrorEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPublisher_PublishResolveVerifierErrorEvent_Call) RunAndReturn(run func(ctx context.Context, transactionId string, lookup string, algorithm string, errorMessage string)) *MockPublisher_PublishResolveVerifierErrorEvent_Call {
	_c.Run(run)
	return _c
}

// PublishResolveVerifierResponseEvent provides a mock function for the type MockPublisher
func (_mock *MockPublisher) PublishResolveVerifierResponseEvent(ctx context.Context, transactionId string, lookup string, algorithm string, verifier string, verifierType string) {
	_mock.Called(ctx, transactionId, lookup, algorithm, verifier, verifierType)
	return
}

// MockPublisher_PublishResolveVerifierResponseEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishResolveVerifierResponseEvent'
type MockPublisher_PublishResolveVerifierResponseEvent_Call struct {
	*mock.Call
}

// PublishResolveVerifierResponseEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - transactionId string
//   - lookup string
//   - algorithm string
//   - verifier string
//   - verifierType string
func (_e *MockPublisher_Expecter) PublishResolveVerifierResponseEvent(ctx interface{}, transactionId interface{}, lookup interface{}, algorithm interface{}, verifier interface{}, verifierType interface{}) *MockPublisher_PublishResolveVerifierResponseEvent_Call {
	return &MockPublisher_PublishResolveVerifierResponseEvent_Call{Call: _e.mock.On("PublishResolveVerifierResponseEvent", ctx, transactionId, lookup, algorithm, verifier, verifierType)}
}

func (_c *MockPublisher_PublishResolveVerifierResponseEvent_Call) Run(run func(ctx context.Context, transactionId string, lookup string, algorithm string, verifier string, verifierType string)) *MockPublisher_PublishResolveVerifierResponseEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		var arg5 string
		if args[5] != nil {
			arg5 = args[5].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *MockPublisher_PublishResolveVerifierResponseEvent_Call) Return() *MockPublisher_PublishResolveVerifierResponseEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPublisher_PublishResolveVerifierResponseEvent_Call) RunAndReturn(run func(ctx context.Context, transactionId string, lookup string, algorithm string, verifier string, verifierType string)) *MockPublisher_PublishResolveVerifierResponseEvent_Call {
	_c.Run(run)
	return _c
}

// PublishTransactionAssembleFailedEvent provides a mock function for the type MockPublisher
func (_mock *MockPublisher) PublishTransactionAssembleFailedEvent(ctx context.Context, transactionId string, errorMessage string, requestID string) {
	_mock.Called(ctx, transactionId, errorMessage, requestID)
	return
}

// MockPublisher_PublishTransactionAssembleFailedEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishTransactionAssembleFailedEvent'
type MockPublisher_PublishTransactionAssembleFailedEvent_Call struct {
	*mock.Call
}

// PublishTransactionAssembleFailedEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - transactionId string
//   - errorMessage string
//   - requestID string
func (_e *MockPublisher_Expecter) PublishTransactionAssembleFailedEvent(ctx interface{}, transactionId interface{}, errorMessage interface{}, requestID interface{}) *MockPublisher_PublishTransactionAssembleFailedEvent_Call {
	return &MockPublisher_PublishTransactionAssembleFailedEvent_Call{Call: _e.mock.On("PublishTransactionAssembleFailedEvent", ctx, transactionId, errorMessage, requestID)}
}

func (_c *MockPublisher_PublishTransactionAssembleFailedEvent_Call) Run(run func(ctx context.Context, transactionId string, errorMessage string, requestID string)) *MockPublisher_PublishTransactionAssembleFailedEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockPublisher_PublishTransactionAssembleFailedEvent_Call) Return() *MockPublisher_PublishTransactionAssembleFailedEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPublisher_PublishTransactionAssembleFailedEvent_Call) RunAndReturn(run func(ctx context.Context, transactionId string, errorMessage string, requestID string)) *MockPublisher_PublishTransactionAssembleFailedEvent_Call {
	_c.Run(run)
	return _c
}

// PublishTransactionAssembledEvent provides a mock function for the type MockPublisher
func (_mock *MockPublisher) PublishTransactionAssembledEvent(ctx context.Context, transactionId string, postAssembly *components.TransactionPostAssembly, requestID string) {
	_mock.Called(ctx, transactionId, postAssembly, requestID)
	return
}

// MockPublisher_PublishTransactionAssembledEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishTransactionAssembledEvent'
type MockPublisher_PublishTransactionAssembledEvent_Call struct {
	*mock.Call
}

// PublishTransactionAssembledEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - transactionId string
//   - postAssembly *components.TransactionPostAssembly
//   - requestID string
func (_e *MockPublisher_Expecter) PublishTransactionAssembledEvent(ctx interface{}, transactionId interface{}, postAssembly interface{}, requestID interface{}) *MockPublisher_PublishTransactionAssembledEvent_Call {
	return &MockPublisher_PublishTransactionAssembledEvent_Call{Call: _e.mock.On("PublishTransactionAssembledEvent", ctx, transactionId, postAssembly, requestID)}
}

func (_c *MockPublisher_PublishTransactionAssembledEvent_Call) Run(run func(ctx context.Context, transactionId string, postAssembly *components.TransactionPostAssembly, requestID string)) *MockPublisher_PublishTransactionAssembledEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *components.TransactionPostAssembly
		if args[2] != nil {
			arg2 = args[2].(*components.TransactionPostAssembly)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockPublisher_PublishTransactionAssembledEvent_Call) Return() *MockPublisher_PublishTransactionAssembledEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPublisher_PublishTransactionAssembledEvent_Call) RunAndReturn(run func(ctx context.Context, transactionId string, postAssembly *components.TransactionPostAssembly, requestID string)) *MockPublisher_PublishTransactionAssembledEvent_Call {
	_c.Run(run)
	return _c
}

// PublishTransactionConfirmedEvent provides a mock function for the type MockPublisher
func (_mock *MockPublisher) PublishTransactionConfirmedEvent(ctx context.Context, transactionId string) {
	_mock.Called(ctx, transactionId)
	return
}

// MockPublisher_PublishTransactionConfirmedEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishTransactionConfirmedEvent'
type MockPublisher_PublishTransactionConfirmedEvent_Call struct {
	*mock.Call
}

// PublishTransactionConfirmedEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - transactionId string
func (_e *MockPublisher_Expecter) PublishTransactionConfirmedEvent(ctx interface{}, transactionId interface{}) *MockPublisher_PublishTransactionConfirmedEvent_Call {
	return &MockPublisher_PublishTransactionConfirmedEvent_Call{Call: _e.mock.On("PublishTransactionConfirmedEvent", ctx, transactionId)}
}

func (_c *MockPublisher_PublishTransactionConfirmedEvent_Call) Run(run func(ctx context.Context, transactionId string)) *MockPublisher_PublishTransactionConfirmedEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPublisher_PublishTransactionConfirmedEvent_Call) Return() *MockPublisher_PublishTransactionConfirmedEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPublisher_PublishTransactionConfirmedEvent_Call) RunAndReturn(run func(ctx context.Context, transactionId string)) *MockPublisher_PublishTransactionConfirmedEvent_Call {
	_c.Run(run)
	return _c
}

// PublishTransactionDispatchedEvent provides a mock function for the type MockPublisher
func (_mock *MockPublisher) PublishTransactionDispatchedEvent(ctx context.Context, transactionId string, nonce uint64, signingAddress string) {
	_mock.Called(ctx, transactionId, nonce, signingAddress)
	return
}

// MockPublisher_PublishTransactionDispatchedEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishTransactionDispatchedEvent'
type MockPublisher_PublishTransactionDispatchedEvent_Call struct {
	*mock.Call
}

// PublishTransactionDispatchedEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - transactionId string
//   - nonce uint64
//   - signingAddress string
func (_e *MockPublisher_Expecter) PublishTransactionDispatchedEvent(ctx interface{}, transactionId interface{}, nonce interface{}, signingAddress interface{}) *MockPublisher_PublishTransactionDispatchedEvent_Call {
	return &MockPublisher_PublishTransactionDispatchedEvent_Call{Call: _e.mock.On("PublishTransactionDispatchedEvent", ctx, transactionId, nonce, signingAddress)}
}

func (_c *MockPublisher_PublishTransactionDispatchedEvent_Call) Run(run func(ctx context.Context, transactionId string, nonce uint64, signingAddress string)) *MockPublisher_PublishTransactionDispatchedEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 uint64
		if args[2] != nil {
			arg2 = args[2].(uint64)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockPublisher_PublishTransactionDispatchedEvent_Call) Return() *MockPublisher_PublishTransactionDispatchedEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPublisher_PublishTransactionDispatchedEvent_Call) RunAndReturn(run func(ctx context.Context, transactionId string, nonce uint64, signingAddress string)) *MockPublisher_PublishTransactionDispatchedEvent_Call {
	_c.Run(run)
	return _c
}

// PublishTransactionEndorsedEvent provides a mock function for the type MockPublisher
func (_mock *MockPublisher) PublishTransactionEndorsedEvent(ctx context.Context, transactionId string, idempotencyKey string, party string, attestationRequestName string, attestationResult *prototk.AttestationResult, revertReason *string) {
	_mock.Called(ctx, transactionId, idempotencyKey, party, attestationRequestName, attestationResult, revertReason)
	return
}

// MockPublisher_PublishTransactionEndorsedEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishTransactionEndorsedEvent'
type MockPublisher_PublishTransactionEndorsedEvent_Call struct {
	*mock.Call
}

// PublishTransactionEndorsedEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - transactionId string
//   - idempotencyKey string
//   - party string
//   - attestationRequestName string
//   - attestationResult *prototk.AttestationResult
//   - revertReason *string
func (_e *MockPublisher_Expecter) PublishTransactionEndorsedEvent(ctx interface{}, transactionId interface{}, idempotencyKey interface{}, party interface{}, attestationRequestName interface{}, attestationResult interface{}, revertReason interface{}) *MockPublisher_PublishTransactionEndorsedEvent_Call {
	return &MockPublisher_PublishTransactionEndorsedEvent_Call{Call: _e.mock.On("PublishTransactionEndorsedEvent", ctx, transactionId, idempotencyKey, party, attestationRequestName, attestationResult, revertReason)}
}

func (_c *MockPublisher_PublishTransactionEndorsedEvent_Call) Run(run func(ctx context.Context, transactionId string, idempotencyKey string, party string, attestationRequestName string, attestationResult *prototk.AttestationResult, revertReason *string)) *MockPublisher_PublishTransactionEndorsedEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		var arg5 *prototk.AttestationResult
		if args[5] != nil {
			arg5 = args[5].(*prototk.AttestationResult)
		}
		var arg6 *string
		if args[6] != nil {
			arg6 = args[6].(*string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
		)
	})
	return _c
}

func (_c *MockPublisher_PublishTransactionEndorsedEvent_Call) Return() *MockPublisher_PublishTransactionEndorsedEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPublisher_PublishTransactionEndorsedEvent_Call) RunAndReturn(run func(ctx context.Context, transactionId string, idempotencyKey string, party string, attestationRequestName string, attestationResult *prototk.AttestationResult, revertReason *string)) *MockPublisher_PublishTransactionEndorsedEvent_Call {
	_c.Run(run)
	return _c
}

// PublishTransactionFinalizeError provides a mock function for the type MockPublisher
func (_mock *MockPublisher) PublishTransactionFinalizeError(ctx context.Context, transactionId string, revertReason string, err error) {
	_mock.Called(ctx, transactionId, revertReason, err)
	return
}

// MockPublisher_PublishTransactionFinalizeError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishTransactionFinalizeError'
type MockPublisher_PublishTransactionFinalizeError_Call struct {
	*mock.Call
}

// PublishTransactionFinalizeError is a helper method to define mock.On call
//   - ctx context.Context
//   - transactionId string
//   - revertReason string
//   - err error
func (_e *MockPublisher_Expecter) PublishTransactionFinalizeError(ctx interface{}, transactionId interface{}, revertReason interface{}, err interface{}) *MockPublisher_PublishTransactionFinalizeError_Call {
	return &MockPublisher_PublishTransactionFinalizeError_Call{Call: _e.mock.On("PublishTransactionFinalizeError", ctx, transactionId, revertReason, err)}
}

func (_c *MockPublisher_PublishTransactionFinalizeError_Call) Run(run func(ctx context.Context, transactionId string, revertReason string, err error)) *MockPublisher_PublishTransactionFinalizeError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 error
		if args[3] != nil {
			arg3 = args[3].(error)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockPublisher_PublishTransactionFinalizeError_Call) Return() *MockPublisher_PublishTransactionFinalizeError_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPublisher_PublishTransactionFinalizeError_Call) RunAndReturn(run func(ctx context.Context, transactionId string, revertReason string, err error)) *MockPublisher_PublishTransactionFinalizeError_Call {
	_c.Run(run)
	return _c
}

// PublishTransactionFinalizedEvent provides a mock function for the type MockPublisher
func (_mock *MockPublisher) PublishTransactionFinalizedEvent(ctx context.Context, transactionId string) {
	_mock.Called(ctx, transactionId)
	return
}

// MockPublisher_PublishTransactionFinalizedEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishTransactionFinalizedEvent'
type MockPublisher_PublishTransactionFinalizedEvent_Call struct {
	*mock.Call
}

// PublishTransactionFinalizedEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - transactionId string
func (_e *MockPublisher_Expecter) PublishTransactionFinalizedEvent(ctx interface{}, transactionId interface{}) *MockPublisher_PublishTransactionFinalizedEvent_Call {
	return &MockPublisher_PublishTransactionFinalizedEvent_Call{Call: _e.mock.On("PublishTransactionFinalizedEvent", ctx, transactionId)}
}

func (_c *MockPublisher_PublishTransactionFinalizedEvent_Call) Run(run func(ctx context.Context, transactionId string)) *MockPublisher_PublishTransactionFinalizedEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPublisher_PublishTransactionFinalizedEvent_Call) Return() *MockPublisher_PublishTransactionFinalizedEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPublisher_PublishTransactionFinalizedEvent_Call) RunAndReturn(run func(ctx context.Context, transactionId string)) *MockPublisher_PublishTransactionFinalizedEvent_Call {
	_c.Run(run)
	return _c
}

// PublishTransactionPreparedEvent provides a mock function for the type MockPublisher
func (_mock *MockPublisher) PublishTransactionPreparedEvent(ctx context.Context, transactionId string) {
	_mock.Called(ctx, transactionId)
	return
}

// MockPublisher_PublishTransactionPreparedEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishTransactionPreparedEvent'
type MockPublisher_PublishTransactionPreparedEvent_Call struct {
	*mock.Call
}

// PublishTransactionPreparedEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - transactionId string
func (_e *MockPublisher_Expecter) PublishTransactionPreparedEvent(ctx interface{}, transactionId interface{}) *MockPublisher_PublishTransactionPreparedEvent_Call {
	return &MockPublisher_PublishTransactionPreparedEvent_Call{Call: _e.mock.On("PublishTransactionPreparedEvent", ctx, transactionId)}
}

func (_c *MockPublisher_PublishTransactionPreparedEvent_Call) Run(run func(ctx context.Context, transactionId string)) *MockPublisher_PublishTransactionPreparedEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPublisher_PublishTransactionPreparedEvent_Call) Return() *MockPublisher_PublishTransactionPreparedEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPublisher_PublishTransactionPreparedEvent_Call) RunAndReturn(run func(ctx context.Context, transactionId string)) *MockPublisher_PublishTransactionPreparedEvent_Call {
	_c.Run(run)
	return _c
}

// PublishTransactionSignedEvent provides a mock function for the type MockPublisher
func (_mock *MockPublisher) PublishTransactionSignedEvent(ctx context.Context, transactionId string, attestationResult *prototk.AttestationResult) {
	_mock.Called(ctx, transactionId, attestationResult)
	return
}

// MockPublisher_PublishTransactionSignedEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishTransactionSignedEvent'
type MockPublisher_PublishTransactionSignedEvent_Call struct {
	*mock.Call
}

// PublishTransactionSignedEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - transactionId string
//   - attestationResult *prototk.AttestationResult
func (_e *MockPublisher_Expecter) PublishTransactionSignedEvent(ctx interface{}, transactionId interface{}, attestationResult interface{}) *MockPublisher_PublishTransactionSignedEvent_Call {
	return &MockPublisher_PublishTransactionSignedEvent_Call{Call: _e.mock.On("PublishTransactionSignedEvent", ctx, transactionId, attestationResult)}
}

func (_c *MockPublisher_PublishTransactionSignedEvent_Call) Run(run func(ctx context.Context, transactionId string, attestationResult *prototk.AttestationResult)) *MockPublisher_PublishTransactionSignedEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *prototk.AttestationResult
		if args[2] != nil {
			arg2 = args[2].(*prototk.AttestationResult)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPublisher_PublishTransactionSignedEvent_Call) Return() *MockPublisher_PublishTransactionSignedEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPublisher_PublishTransactionSignedEvent_Call) RunAndReturn(run func(ctx context.Context, transactionId string, attestationResult *prototk.AttestationResult)) *MockPublisher_PublishTransactionSignedEvent_Call {
	_c.Run(run)
	return _c
}

// NewMockDispatcher creates a new instance of MockDispatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDispatcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDispatcher {
	mock := &MockDispatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDispatcher is an autogenerated mock type for the Dispatcher type
type MockDispatcher struct {
	mock.Mock
}

type MockDispatcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDispatcher) EXPECT() *MockDispatcher_Expecter {
	return &MockDispatcher_Expecter{mock: &_m.Mock}
}

// DispatchTransactions provides a mock function for the type MockDispatcher
func (_mock *MockDispatcher) DispatchTransactions(context1 context.Context, dispatchableTransactions DispatchableTransactions) error {
	ret := _mock.Called(context1, dispatchableTransactions)

	if len(ret) == 0 {
		panic("no return value specified for DispatchTransactions")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, DispatchableTransactions) error); ok {
		r0 = returnFunc(context1, dispatchableTransactions)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDispatcher_DispatchTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DispatchTransactions'
type MockDispatcher_DispatchTransactions_Call struct {
	*mock.Call
}

// DispatchTransactions is a helper method to define mock.On call
//   - context1 context.Context
//   - dispatchableTransactions DispatchableTransactions
func (_e *MockDispatcher_Expecter) DispatchTransactions(context1 interface{}, dispatchableTransactions interface{}) *MockDispatcher_DispatchTransactions_Call {
	return &MockDispatcher_DispatchTransactions_Call{Call: _e.mock.On("DispatchTransactions", context1, dispatchableTransactions)}
}

func (_c *MockDispatcher_DispatchTransactions_Call) Run(run func(context1 context.Context, dispatchableTransactions DispatchableTransactions)) *MockDispatcher_DispatchTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 DispatchableTransactions
		if args[1] != nil {
			arg1 = args[1].(DispatchableTransactions)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDispatcher_DispatchTransactions_Call) Return(err error) *MockDispatcher_DispatchTransactions_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDispatcher_DispatchTransactions_Call) RunAndReturn(run func(context1 context.Context, dispatchableTransactions DispatchableTransactions) error) *MockDispatcher_DispatchTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEndorsementGatherer creates a new instance of MockEndorsementGatherer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEndorsementGatherer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEndorsementGatherer {
	mock := &MockEndorsementGatherer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEndorsementGatherer is an autogenerated mock type for the EndorsementGatherer type
type MockEndorsementGatherer struct {
	mock.Mock
}

type MockEndorsementGatherer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEndorsementGatherer) EXPECT() *MockEndorsementGatherer_Expecter {
	return &MockEndorsementGatherer_Expecter{mock: &_m.Mock}
}

// DomainContext provides a mock function for the type MockEndorsementGatherer
func (_mock *MockEndorsementGatherer) DomainContext() components.DomainContext {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for DomainContext")
	}

	var r0 components.DomainContext
	if returnFunc, ok := ret.Get(0).(func() components.DomainContext); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(components.DomainContext)
		}
	}
	return r0
}

// MockEndorsementGatherer_DomainContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DomainContext'
type MockEndorsementGatherer_DomainContext_Call struct {
	*mock.Call
}

// DomainContext is a helper method to define mock.On call
func (_e *MockEndorsementGatherer_Expecter) DomainContext() *MockEndorsementGatherer_DomainContext_Call {
	return &MockEndorsementGatherer_DomainContext_Call{Call: _e.mock.On("DomainContext")}
}

func (_c *MockEndorsementGatherer_DomainContext_Call) Run(run func()) *MockEndorsementGatherer_DomainContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEndorsementGatherer_DomainContext_Call) Return(domainContext components.DomainContext) *MockEndorsementGatherer_DomainContext_Call {
	_c.Call.Return(domainContext)
	return _c
}

func (_c *MockEndorsementGatherer_DomainContext_Call) RunAndReturn(run func() components.DomainContext) *MockEndorsementGatherer_DomainContext_Call {
	_c.Call.Return(run)
	return _c
}

// GatherEndorsement provides a mock function for the type MockEndorsementGatherer
func (_mock *MockEndorsementGatherer) GatherEndorsement(ctx context.Context, transactionSpecification *prototk.TransactionSpecification, verifiers []*prototk.ResolvedVerifier, signatures []*prototk.AttestationResult, inputStates []*prototk.EndorsableState, readStates []*prototk.EndorsableState, outputStates []*prototk.EndorsableState, infoStates []*prototk.EndorsableState, partyName string, endorsementRequest *prototk.AttestationRequest) (*prototk.AttestationResult, *string, error) {
	ret := _mock.Called(ctx, transactionSpecification, verifiers, signatures, inputStates, readStates, outputStates, infoStates, partyName, endorsementRequest)

	if len(ret) == 0 {
		panic("no return value specified for GatherEndorsement")
	}

	var r0 *prototk.AttestationResult
	var r1 *string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.TransactionSpecification, []*prototk.ResolvedVerifier, []*prototk.AttestationResult, []*prototk.EndorsableState, []*prototk.EndorsableState, []*prototk.EndorsableState, []*prototk.EndorsableState, string, *prototk.AttestationRequest) (*prototk.AttestationResult, *string, error)); ok {
		return returnFunc(ctx, transactionSpecification, verifiers, signatures, inputStates, readStates, outputStates, infoStates, partyName, endorsementRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.TransactionSpecification, []*prototk.ResolvedVerifier, []*prototk.AttestationResult, []*prototk.EndorsableState, []*prototk.EndorsableState, []*prototk.EndorsableState, []*prototk.EndorsableState, string, *prototk.AttestationRequest) *prototk.AttestationResult); ok {
		r0 = returnFunc(ctx, transactionSpecification, verifiers, signatures, inputStates, readStates, outputStates, infoStates, partyName, endorsementRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.AttestationResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.TransactionSpecification, []*prototk.ResolvedVerifier, []*prototk.AttestationResult, []*prototk.EndorsableState, []*prototk.EndorsableState, []*prototk.EndorsableState, []*prototk.EndorsableState, string, *prototk.AttestationRequest) *string); ok {
		r1 = returnFunc(ctx, transactionSpecification, verifiers, signatures, inputStates, readStates, outputStates, infoStates, partyName, endorsementRequest)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*string)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, *prototk.TransactionSpecification, []*prototk.ResolvedVerifier, []*prototk.AttestationResult, []*prototk.EndorsableState, []*prototk.EndorsableState, []*prototk.EndorsableState, []*prototk.EndorsableState, string, *prototk.AttestationRequest) error); ok {
		r2 = returnFunc(ctx, transactionSpecification, verifiers, signatures, inputStates, readStates, outputStates, infoStates, partyName, endorsementRequest)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockEndorsementGatherer_GatherEndorsement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GatherEndorsement'
type MockEndorsementGatherer_GatherEndorsement_Call struct {
	*mock.Call
}

// GatherEndorsement is a helper method to define mock.On call
//   - ctx context.Context
//   - transactionSpecification *prototk.TransactionSpecification
//   - verifiers []*prototk.ResolvedVerifier
//   - signatures []*prototk.AttestationResult
//   - inputStates []*prototk.EndorsableState
//   - readStates []*prototk.EndorsableState
//   - outputStates []*prototk.EndorsableState
//   - infoStates []*prototk.EndorsableState
//   - partyName string
//   - endorsementRequest *prototk.AttestationRequest
func (_e *MockEndorsementGatherer_Expecter) GatherEndorsement(ctx interface{}, transactionSpecification interface{}, verifiers interface{}, signatures interface{}, inputStates interface{}, readStates interface{}, outputStates interface{}, infoStates interface{}, partyName interface{}, endorsementRequest interface{}) *MockEndorsementGatherer_GatherEndorsement_Call {
	return &MockEndorsementGatherer_GatherEndorsement_Call{Call: _e.mock.On("GatherEndorsement", ctx, transactionSpecification, verifiers, signatures, inputStates, readStates, outputStates, infoStates, partyName, endorsementRequest)}
}

func (_c *MockEndorsementGatherer_GatherEndorsement_Call) Run(run func(ctx context.Context, transactionSpecification *prototk.TransactionSpecification, verifiers []*prototk.ResolvedVerifier, signatures []*prototk.AttestationResult, inputStates []*prototk.EndorsableState, readStates []*prototk.EndorsableState, outputStates []*prototk.EndorsableState, infoStates []*prototk.EndorsableState, partyName string, endorsementRequest *prototk.AttestationRequest)) *MockEndorsementGatherer_GatherEndorsement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.TransactionSpecification
		if args[1] != nil {
			arg1 = args[1].(*prototk.TransactionSpecification)
		}
		var arg2 []*prototk.ResolvedVerifier
		if args[2] != nil {
			arg2 = args[2].([]*prototk.ResolvedVerifier)
		}
		var arg3 []*prototk.AttestationResult
		if args[3] != nil {
			arg3 = args[3].([]*prototk.AttestationResult)
		}
		var arg4 []*prototk.EndorsableState
		if args[4] != nil {
			arg4 = args[4].([]*prototk.EndorsableState)
		}
		var arg5 []*prototk.EndorsableState
		if args[5] != nil {
			arg5 = args[5].([]*prototk.EndorsableState)
		}
		var arg6 []*prototk.EndorsableState
		if args[6] != nil {
			arg6 = args[6].([]*prototk.EndorsableState)
		}
		var arg7 []*prototk.EndorsableState
		if args[7] != nil {
			arg7 = args[7].([]*prototk.EndorsableState)
		}
		var arg8 string
		if args[8] != nil {
			arg8 = args[8].(string)
		}
		var arg9 *prototk.AttestationRequest
		if args[9] != nil {
			arg9 = args[9].(*prototk.AttestationRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
			arg7,
			arg8,
			arg9,
		)
	})
	return _c
}

func (_c *MockEndorsementGatherer_GatherEndorsement_Call) Return(attestationResult *prototk.AttestationResult, s *string, err error) *MockEndorsementGatherer_GatherEndorsement_Call {
	_c.Call.Return(attestationResult, s, err)
	return _c
}

func (_c *MockEndorsementGatherer_GatherEndorsement_Call) RunAndReturn(run func(ctx context.Context, transactionSpecification *prototk.TransactionSpecification, verifiers []*prototk.ResolvedVerifier, signatures []*prototk.AttestationResult, inputStates []*prototk.EndorsableState, readStates []*prototk.EndorsableState, outputStates []*prototk.EndorsableState, infoStates []*prototk.EndorsableState, partyName string, endorsementRequest *prototk.AttestationRequest) (*prototk.AttestationResult, *string, error)) *MockEndorsementGatherer_GatherEndorsement_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockContentionResolver creates a new instance of MockContentionResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockContentionResolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockContentionResolver {
	mock := &MockContentionResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockContentionResolver is an autogenerated mock type for the ContentionResolver type
type MockContentionResolver struct {
	mock.Mock
}

type MockContentionResolver_Expecter struct {
	mock *mock.Mock
}

func (_m *MockContentionResolver) EXPECT() *MockContentionResolver_Expecter {
	return &MockContentionResolver_Expecter{mock: &_m.Mock}
}

// Resolve provides a mock function for the type MockContentionResolver
func (_mock *MockContentionResolver) Resolve(stateID string, biddingContentionResolver1 string, biddingContentionResolver2 string) (string, error) {
	ret := _mock.Called(stateID, biddingContentionResolver1, biddingContentionResolver2)

	if len(ret) == 0 {
		panic("no return value specified for Resolve")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string) (string, error)); ok {
		return returnFunc(stateID, biddingContentionResolver1, biddingContentionResolver2)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = returnFunc(stateID, biddingContentionResolver1, biddingContentionResolver2)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = returnFunc(stateID, biddingContentionResolver1, biddingContentionResolver2)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockContentionResolver_Resolve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resolve'
type MockContentionResolver_Resolve_Call struct {
	*mock.Call
}

// Resolve is a helper method to define mock.On call
//   - stateID string
//   - biddingContentionResolver1 string
//   - biddingContentionResolver2 string
func (_e *MockContentionResolver_Expecter) Resolve(stateID interface{}, biddingContentionResolver1 interface{}, biddingContentionResolver2 interface{}) *MockContentionResolver_Resolve_Call {
	return &MockContentionResolver_Resolve_Call{Call: _e.mock.On("Resolve", stateID, biddingContentionResolver1, biddingContentionResolver2)}
}

func (_c *MockContentionResolver_Resolve_Call) Run(run func(stateID string, biddingContentionResolver1 string, biddingContentionResolver2 string)) *MockContentionResolver_Resolve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockContentionResolver_Resolve_Call) Return(s string, err error) *MockContentionResolver_Resolve_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockContentionResolver_Resolve_Call) RunAndReturn(run func(stateID string, biddingContentionResolver1 string, biddingContentionResolver2 string) (string, error)) *MockContentionResolver_Resolve_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransportWriter creates a new instance of MockTransportWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransportWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransportWriter {
	mock := &MockTransportWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTransportWriter is an autogenerated mock type for the TransportWriter type
type MockTransportWriter struct {
	mock.Mock
}

type MockTransportWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransportWriter) EXPECT() *MockTransportWriter_Expecter {
	return &MockTransportWriter_Expecter{mock: &_m.Mock}
}

// SendAssembleRequest provides a mock function for the type MockTransportWriter
func (_mock *MockTransportWriter) SendAssembleRequest(ctx context.Context, assemblingNode string, assembleRequestID string, txID uuid.UUID, contractAddress string, preAssembly *components.TransactionPreAssembly, stateLocksJSON []byte, blockHeight int64) error {
	ret := _mock.Called(ctx, assemblingNode, assembleRequestID, txID, contractAddress, preAssembly, stateLocksJSON, blockHeight)

	if len(ret) == 0 {
		panic("no return value specified for SendAssembleRequest")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, uuid.UUID, string, *components.TransactionPreAssembly, []byte, int64) error); ok {
		r0 = returnFunc(ctx, assemblingNode, assembleRequestID, txID, contractAddress, preAssembly, stateLocksJSON, blockHeight)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransportWriter_SendAssembleRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendAssembleRequest'
type MockTransportWriter_SendAssembleRequest_Call struct {
	*mock.Call
}

// SendAssembleRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - assemblingNode string
//   - assembleRequestID string
//   - txID uuid.UUID
//   - contractAddress string
//   - preAssembly *components.TransactionPreAssembly
//   - stateLocksJSON []byte
//   - blockHeight int64
func (_e *MockTransportWriter_Expecter) SendAssembleRequest(ctx interface{}, assemblingNode interface{}, assembleRequestID interface{}, txID interface{}, contractAddress interface{}, preAssembly interface{}, stateLocksJSON interface{}, blockHeight interface{}) *MockTransportWriter_SendAssembleRequest_Call {
	return &MockTransportWriter_SendAssembleRequest_Call{Call: _e.mock.On("SendAssembleRequest", ctx, assemblingNode, assembleRequestID, txID, contractAddress, preAssembly, stateLocksJSON, blockHeight)}
}

func (_c *MockTransportWriter_SendAssembleRequest_Call) Run(run func(ctx context.Context, assemblingNode string, assembleRequestID string, txID uuid.UUID, contractAddress string, preAssembly *components.TransactionPreAssembly, stateLocksJSON []byte, blockHeight int64)) *MockTransportWriter_SendAssembleRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 uuid.UUID
		if args[3] != nil {
			arg3 = args[3].(uuid.UUID)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		var arg5 *components.TransactionPreAssembly
		if args[5] != nil {
			arg5 = args[5].(*components.TransactionPreAssembly)
		}
		var arg6 []byte
		if args[6] != nil {
			arg6 = args[6].([]byte)
		}
		var arg7 int64
		if args[7] != nil {
			arg7 = args[7].(int64)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
			arg7,
		)
	})
	return _c
}

func (_c *MockTransportWriter_SendAssembleRequest_Call) Return(err error) *MockTransportWriter_SendAssembleRequest_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransportWriter_SendAssembleRequest_Call) RunAndReturn(run func(ctx context.Context, assemblingNode string, assembleRequestID string, txID uuid.UUID, contractAddress string, preAssembly *components.TransactionPreAssembly, stateLocksJSON []byte, blockHeight int64) error) *MockTransportWriter_SendAssembleRequest_Call {
	_c.Call.Return(run)
	return _c
}

// SendDelegationRequest provides a mock function for the type MockTransportWriter
func (_mock *MockTransportWriter) SendDelegationRequest(ctx context.Context, delegationId string, delegateNodeName string, transaction *components.PrivateTransaction, blockHeight int64) error {
	ret := _mock.Called(ctx, delegationId, delegateNodeName, transaction, blockHeight)

	if len(ret) == 0 {
		panic("no return value specified for SendDelegationRequest")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, *components.PrivateTransaction, int64) error); ok {
		r0 = returnFunc(ctx, delegationId, delegateNodeName, transaction, blockHeight)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransportWriter_SendDelegationRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendDelegationRequest'
type MockTransportWriter_SendDelegationRequest_Call struct {
	*mock.Call
}

// SendDelegationRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - delegationId string
//   - delegateNodeName string
//   - transaction *components.PrivateTransaction
//   - blockHeight int64
func (_e *MockTransportWriter_Expecter) SendDelegationRequest(ctx interface{}, delegationId interface{}, delegateNodeName interface{}, transaction interface{}, blockHeight interface{}) *MockTransportWriter_SendDelegationRequest_Call {
	return &MockTransportWriter_SendDelegationRequest_Call{Call: _e.mock.On("SendDelegationRequest", ctx, delegationId, delegateNodeName, transaction, blockHeight)}
}

func (_c *MockTransportWriter_SendDelegationRequest_Call) Run(run func(ctx context.Context, delegationId string, delegateNodeName string, transaction *components.PrivateTransaction, blockHeight int64)) *MockTransportWriter_SendDelegationRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 *components.PrivateTransaction
		if args[3] != nil {
			arg3 = args[3].(*components.PrivateTransaction)
		}
		var arg4 int64
		if args[4] != nil {
			arg4 = args[4].(int64)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockTransportWriter_SendDelegationRequest_Call) Return(err error) *MockTransportWriter_SendDelegationRequest_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransportWriter_SendDelegationRequest_Call) RunAndReturn(run func(ctx context.Context, delegationId string, delegateNodeName string, transaction *components.PrivateTransaction, blockHeight int64) error) *MockTransportWriter_SendDelegationRequest_Call {
	_c.Call.Return(run)
	return _c
}

// SendDelegationRequestAcknowledgment provides a mock function for the type MockTransportWriter
func (_mock *MockTransportWriter) SendDelegationRequestAcknowledgment(ctx context.Context, delegatingNodeName string, delegationId string, delegateNodeName string, transactionID string) error {
	ret := _mock.Called(ctx, delegatingNodeName, delegationId, delegateNodeName, transactionID)

	if len(ret) == 0 {
		panic("no return value specified for SendDelegationRequestAcknowledgment")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = returnFunc(ctx, delegatingNodeName, delegationId, delegateNodeName, transactionID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransportWriter_SendDelegationRequestAcknowledgment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendDelegationRequestAcknowledgment'
type MockTransportWriter_SendDelegationRequestAcknowledgment_Call struct {
	*mock.Call
}

// SendDelegationRequestAcknowledgment is a helper method to define mock.On call
//   - ctx context.Context
//   - delegatingNodeName string
//   - delegationId string
//   - delegateNodeName string
//   - transactionID string
func (_e *MockTransportWriter_Expecter) SendDelegationRequestAcknowledgment(ctx interface{}, delegatingNodeName interface{}, delegationId interface{}, delegateNodeName interface{}, transactionID interface{}) *MockTransportWriter_SendDelegationRequestAcknowledgment_Call {
	return &MockTransportWriter_SendDelegationRequestAcknowledgment_Call{Call: _e.mock.On("SendDelegationRequestAcknowledgment", ctx, delegatingNodeName, delegationId, delegateNodeName, transactionID)}
}

func (_c *MockTransportWriter_SendDelegationRequestAcknowledgment_Call) Run(run func(ctx context.Context, delegatingNodeName string, delegationId string, delegateNodeName string, transactionID string)) *MockTransportWriter_SendDelegationRequestAcknowledgment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockTransportWriter_SendDelegationRequestAcknowledgment_Call) Return(err error) *MockTransportWriter_SendDelegationRequestAcknowledgment_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransportWriter_SendDelegationRequestAcknowledgment_Call) RunAndReturn(run func(ctx context.Context, delegatingNodeName string, delegationId string, delegateNodeName string, transactionID string) error) *MockTransportWriter_SendDelegationRequestAcknowledgment_Call {
	_c.Call.Return(run)
	return _c
}

// SendEndorsementRequest provides a mock function for the type MockTransportWriter
func (_mock *MockTransportWriter) SendEndorsementRequest(ctx context.Context, idempotencyKey string, party string, targetNode string, contractAddress string, transactionID string, attRequest *prototk.AttestationRequest, transactionSpecification *prototk.TransactionSpecification, verifiers []*prototk.ResolvedVerifier, signatures []*prototk.AttestationResult, inputStates []*components.FullState, outputStates []*components.FullState, infoStates []*components.FullState) error {
	ret := _mock.Called(ctx, idempotencyKey, party, targetNode, contractAddress, transactionID, attRequest, transactionSpecification, verifiers, signatures, inputStates, outputStates, infoStates)

	if len(ret) == 0 {
		panic("no return value specified for SendEndorsementRequest")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, *prototk.AttestationRequest, *prototk.TransactionSpecification, []*prototk.ResolvedVerifier, []*prototk.AttestationResult, []*components.FullState, []*components.FullState, []*components.FullState) error); ok {
		r0 = returnFunc(ctx, idempotencyKey, party, targetNode, contractAddress, transactionID, attRequest, transactionSpecification, verifiers, signatures, inputStates, outputStates, infoStates)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransportWriter_SendEndorsementRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEndorsementRequest'
type MockTransportWriter_SendEndorsementRequest_Call struct {
	*mock.Call
}

// SendEndorsementRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - idempotencyKey string
//   - party string
//   - targetNode string
//   - contractAddress string
//   - transactionID string
//   - attRequest *prototk.AttestationRequest
//   - transactionSpecification *prototk.TransactionSpecification
//   - verifiers []*prototk.ResolvedVerifier
//   - signatures []*prototk.AttestationResult
//   - inputStates []*components.FullState
//   - outputStates []*components.FullState
//   - infoStates []*components.FullState
func (_e *MockTransportWriter_Expecter) SendEndorsementRequest(ctx interface{}, idempotencyKey interface{}, party interface{}, targetNode interface{}, contractAddress interface{}, transactionID interface{}, attRequest interface{}, transactionSpecification interface{}, verifiers interface{}, signatures interface{}, inputStates interface{}, outputStates interface{}, infoStates interface{}) *MockTransportWriter_SendEndorsementRequest_Call {
	return &MockTransportWriter_SendEndorsementRequest_Call{Call: _e.mock.On("SendEndorsementRequest", ctx, idempotencyKey, party, targetNode, contractAddress, transactionID, attRequest, transactionSpecification, verifiers, signatures, inputStates, outputStates, infoStates)}
}

func (_c *MockTransportWriter_SendEndorsementRequest_Call) Run(run func(ctx context.Context, idempotencyKey string, party string, targetNode string, contractAddress string, transactionID string, attRequest *prototk.AttestationRequest, transactionSpecification *prototk.TransactionSpecification, verifiers []*prototk.ResolvedVerifier, signatures []*prototk.AttestationResult, inputStates []*components.FullState, outputStates []*components.FullState, infoStates []*components.FullState)) *MockTransportWriter_SendEndorsementRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		var arg5 string
		if args[5] != nil {
			arg5 = args[5].(string)
		}
		var arg6 *prototk.AttestationRequest
		if args[6] != nil {
			arg6 = args[6].(*prototk.AttestationRequest)
		}
		var arg7 *prototk.TransactionSpecification
		if args[7] != nil {
			arg7 = args[7].(*prototk.TransactionSpecification)
		}
		var arg8 []*prototk.ResolvedVerifier
		if args[8] != nil {
			arg8 = args[8].([]*prototk.ResolvedVerifier)
		}
		var arg9 []*prototk.AttestationResult
		if args[9] != nil {
			arg9 = args[9].([]*prototk.AttestationResult)
		}
		var arg10 []*components.FullState
		if args[10] != nil {
			arg10 = args[10].([]*components.FullState)
		}
		var arg11 []*components.FullState
		if args[11] != nil {
			arg11 = args[11].([]*components.FullState)
		}
		var arg12 []*components.FullState
		if args[12] != nil {
			arg12 = args[12].([]*components.FullState)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
			arg7,
			arg8,
			arg9,
			arg10,
			arg11,
			arg12,
		)
	})
	return _c
}

func (_c *MockTransportWriter_SendEndorsementRequest_Call) Return(err error) *MockTransportWriter_SendEndorsementRequest_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransportWriter_SendEndorsementRequest_Call) RunAndReturn(run func(ctx context.Context, idempotencyKey string, party string, targetNode string, contractAddress string, transactionID string, attRequest *prototk.AttestationRequest, transactionSpecification *prototk.TransactionSpecification, verifiers []*prototk.ResolvedVerifier, signatures []*prototk.AttestationResult, inputStates []*components.FullState, outputStates []*components.FullState, infoStates []*components.FullState) error) *MockTransportWriter_SendEndorsementRequest_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransactionFlow creates a new instance of MockTransactionFlow. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionFlow(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionFlow {
	mock := &MockTransactionFlow{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTransactionFlow is an autogenerated mock type for the TransactionFlow type
type MockTransactionFlow struct {
	mock.Mock
}

type MockTransactionFlow_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionFlow) EXPECT() *MockTransactionFlow_Expecter {
	return &MockTransactionFlow_Expecter{mock: &_m.Mock}
}

// Action provides a mock function for the type MockTransactionFlow
func (_mock *MockTransactionFlow) Action(ctx context.Context) {
	_mock.Called(ctx)
	return
}

// MockTransactionFlow_Action_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Action'
type MockTransactionFlow_Action_Call struct {
	*mock.Call
}

// Action is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTransactionFlow_Expecter) Action(ctx interface{}) *MockTransactionFlow_Action_Call {
	return &MockTransactionFlow_Action_Call{Call: _e.mock.On("Action", ctx)}
}

func (_c *MockTransactionFlow_Action_Call) Run(run func(ctx context.Context)) *MockTransactionFlow_Action_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransactionFlow_Action_Call) Return() *MockTransactionFlow_Action_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTransactionFlow_Action_Call) RunAndReturn(run func(ctx context.Context)) *MockTransactionFlow_Action_Call {
	_c.Run(run)
	return _c
}

// ApplyEvent provides a mock function for the type MockTransactionFlow
func (_mock *MockTransactionFlow) ApplyEvent(ctx context.Context, event PrivateTransactionEvent) {
	_mock.Called(ctx, event)
	return
}

// MockTransactionFlow_ApplyEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyEvent'
type MockTransactionFlow_ApplyEvent_Call struct {
	*mock.Call
}

// ApplyEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - event PrivateTransactionEvent
func (_e *MockTransactionFlow_Expecter) ApplyEvent(ctx interface{}, event interface{}) *MockTransactionFlow_ApplyEvent_Call {
	return &MockTransactionFlow_ApplyEvent_Call{Call: _e.mock.On("ApplyEvent", ctx, event)}
}

func (_c *MockTransactionFlow_ApplyEvent_Call) Run(run func(ctx context.Context, event PrivateTransactionEvent)) *MockTransactionFlow_ApplyEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 PrivateTransactionEvent
		if args[1] != nil {
			arg1 = args[1].(PrivateTransactionEvent)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTransactionFlow_ApplyEvent_Call) Return() *MockTransactionFlow_ApplyEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTransactionFlow_ApplyEvent_Call) RunAndReturn(run func(ctx context.Context, event PrivateTransactionEvent)) *MockTransactionFlow_ApplyEvent_Call {
	_c.Run(run)
	return _c
}

// CoordinatingLocally provides a mock function for the type MockTransactionFlow
func (_mock *MockTransactionFlow) CoordinatingLocally(ctx context.Context) bool {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CoordinatingLocally")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockTransactionFlow_CoordinatingLocally_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CoordinatingLocally'
type MockTransactionFlow_CoordinatingLocally_Call struct {
	*mock.Call
}

// CoordinatingLocally is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTransactionFlow_Expecter) CoordinatingLocally(ctx interface{}) *MockTransactionFlow_CoordinatingLocally_Call {
	return &MockTransactionFlow_CoordinatingLocally_Call{Call: _e.mock.On("CoordinatingLocally", ctx)}
}

func (_c *MockTransactionFlow_CoordinatingLocally_Call) Run(run func(ctx context.Context)) *MockTransactionFlow_CoordinatingLocally_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransactionFlow_CoordinatingLocally_Call) Return(b bool) *MockTransactionFlow_CoordinatingLocally_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockTransactionFlow_CoordinatingLocally_Call) RunAndReturn(run func(ctx context.Context) bool) *MockTransactionFlow_CoordinatingLocally_Call {
	_c.Call.Return(run)
	return _c
}

// Dispatched provides a mock function for the type MockTransactionFlow
func (_mock *MockTransactionFlow) Dispatched(ctx context.Context) bool {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Dispatched")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockTransactionFlow_Dispatched_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dispatched'
type MockTransactionFlow_Dispatched_Call struct {
	*mock.Call
}

// Dispatched is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTransactionFlow_Expecter) Dispatched(ctx interface{}) *MockTransactionFlow_Dispatched_Call {
	return &MockTransactionFlow_Dispatched_Call{Call: _e.mock.On("Dispatched", ctx)}
}

func (_c *MockTransactionFlow_Dispatched_Call) Run(run func(ctx context.Context)) *MockTransactionFlow_Dispatched_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransactionFlow_Dispatched_Call) Return(b bool) *MockTransactionFlow_Dispatched_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockTransactionFlow_Dispatched_Call) RunAndReturn(run func(ctx context.Context) bool) *MockTransactionFlow_Dispatched_Call {
	_c.Call.Return(run)
	return _c
}

// GetStateDistributions provides a mock function for the type MockTransactionFlow
func (_mock *MockTransactionFlow) GetStateDistributions(ctx context.Context) (*components.StateDistributionSet, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetStateDistributions")
	}

	var r0 *components.StateDistributionSet
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*components.StateDistributionSet, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *components.StateDistributionSet); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*components.StateDistributionSet)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransactionFlow_GetStateDistributions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStateDistributions'
type MockTransactionFlow_GetStateDistributions_Call struct {
	*mock.Call
}

// GetStateDistributions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTransactionFlow_Expecter) GetStateDistributions(ctx interface{}) *MockTransactionFlow_GetStateDistributions_Call {
	return &MockTransactionFlow_GetStateDistributions_Call{Call: _e.mock.On("GetStateDistributions", ctx)}
}

func (_c *MockTransactionFlow_GetStateDistributions_Call) Run(run func(ctx context.Context)) *MockTransactionFlow_GetStateDistributions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransactionFlow_GetStateDistributions_Call) Return(stateDistributionSet *components.StateDistributionSet, err error) *MockTransactionFlow_GetStateDistributions_Call {
	_c.Call.Return(stateDistributionSet, err)
	return _c
}

func (_c *MockTransactionFlow_GetStateDistributions_Call) RunAndReturn(run func(ctx context.Context) (*components.StateDistributionSet, error)) *MockTransactionFlow_GetStateDistributions_Call {
	_c.Call.Return(run)
	return _c
}

// GetTxStatus provides a mock function for the type MockTransactionFlow
func (_mock *MockTransactionFlow) GetTxStatus(ctx context.Context) (components.PrivateTxStatus, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTxStatus")
	}

	var r0 components.PrivateTxStatus
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (components.PrivateTxStatus, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) components.PrivateTxStatus); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(components.PrivateTxStatus)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransactionFlow_GetTxStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTxStatus'
type MockTransactionFlow_GetTxStatus_Call struct {
	*mock.Call
}

// GetTxStatus is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTransactionFlow_Expecter) GetTxStatus(ctx interface{}) *MockTransactionFlow_GetTxStatus_Call {
	return &MockTransactionFlow_GetTxStatus_Call{Call: _e.mock.On("GetTxStatus", ctx)}
}

func (_c *MockTransactionFlow_GetTxStatus_Call) Run(run func(ctx context.Context)) *MockTransactionFlow_GetTxStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransactionFlow_GetTxStatus_Call) Return(privateTxStatus components.PrivateTxStatus, err error) *MockTransactionFlow_GetTxStatus_Call {
	_c.Call.Return(privateTxStatus, err)
	return _c
}

func (_c *MockTransactionFlow_GetTxStatus_Call) RunAndReturn(run func(ctx context.Context) (components.PrivateTxStatus, error)) *MockTransactionFlow_GetTxStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function for the type MockTransactionFlow
func (_mock *MockTransactionFlow) ID(ctx context.Context) uuid.UUID {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 uuid.UUID
	if returnFunc, ok := ret.Get(0).(func(context.Context) uuid.UUID); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	return r0
}

// MockTransactionFlow_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockTransactionFlow_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTransactionFlow_Expecter) ID(ctx interface{}) *MockTransactionFlow_ID_Call {
	return &MockTransactionFlow_ID_Call{Call: _e.mock.On("ID", ctx)}
}

func (_c *MockTransactionFlow_ID_Call) Run(run func(ctx context.Context)) *MockTransactionFlow_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransactionFlow_ID_Call) Return(uUID uuid.UUID) *MockTransactionFlow_ID_Call {
	_c.Call.Return(uUID)
	return _c
}

func (_c *MockTransactionFlow_ID_Call) RunAndReturn(run func(ctx context.Context) uuid.UUID) *MockTransactionFlow_ID_Call {
	_c.Call.Return(run)
	return _c
}

// InputStateIDs provides a mock function for the type MockTransactionFlow
func (_mock *MockTransactionFlow) InputStateIDs(ctx context.Context) []string {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for InputStateIDs")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockTransactionFlow_InputStateIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InputStateIDs'
type MockTransactionFlow_InputStateIDs_Call struct {
	*mock.Call
}

// InputStateIDs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTransactionFlow_Expecter) InputStateIDs(ctx interface{}) *MockTransactionFlow_InputStateIDs_Call {
	return &MockTransactionFlow_InputStateIDs_Call{Call: _e.mock.On("InputStateIDs", ctx)}
}

func (_c *MockTransactionFlow_InputStateIDs_Call) Run(run func(ctx context.Context)) *MockTransactionFlow_InputStateIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransactionFlow_InputStateIDs_Call) Return(strings []string) *MockTransactionFlow_InputStateIDs_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockTransactionFlow_InputStateIDs_Call) RunAndReturn(run func(ctx context.Context) []string) *MockTransactionFlow_InputStateIDs_Call {
	_c.Call.Return(run)
	return _c
}

// IsComplete provides a mock function for the type MockTransactionFlow
func (_mock *MockTransactionFlow) IsComplete(ctx context.Context) bool {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IsComplete")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockTransactionFlow_IsComplete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsComplete'
type MockTransactionFlow_IsComplete_Call struct {
	*mock.Call
}

// IsComplete is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTransactionFlow_Expecter) IsComplete(ctx interface{}) *MockTransactionFlow_IsComplete_Call {
	return &MockTransactionFlow_IsComplete_Call{Call: _e.mock.On("IsComplete", ctx)}
}

func (_c *MockTransactionFlow_IsComplete_Call) Run(run func(ctx context.Context)) *MockTransactionFlow_IsComplete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransactionFlow_IsComplete_Call) Return(b bool) *MockTransactionFlow_IsComplete_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockTransactionFlow_IsComplete_Call) RunAndReturn(run func(ctx context.Context) bool) *MockTransactionFlow_IsComplete_Call {
	_c.Call.Return(run)
	return _c
}

// IsEndorsed provides a mock function for the type MockTransactionFlow
func (_mock *MockTransactionFlow) IsEndorsed(ctx context.Context) bool {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IsEndorsed")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockTransactionFlow_IsEndorsed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEndorsed'
type MockTransactionFlow_IsEndorsed_Call struct {
	*mock.Call
}

// IsEndorsed is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTransactionFlow_Expecter) IsEndorsed(ctx interface{}) *MockTransactionFlow_IsEndorsed_Call {
	return &MockTransactionFlow_IsEndorsed_Call{Call: _e.mock.On("IsEndorsed", ctx)}
}

func (_c *MockTransactionFlow_IsEndorsed_Call) Run(run func(ctx context.Context)) *MockTransactionFlow_IsEndorsed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransactionFlow_IsEndorsed_Call) Return(b bool) *MockTransactionFlow_IsEndorsed_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockTransactionFlow_IsEndorsed_Call) RunAndReturn(run func(ctx context.Context) bool) *MockTransactionFlow_IsEndorsed_Call {
	_c.Call.Return(run)
	return _c
}

// OutputStateIDs provides a mock function for the type MockTransactionFlow
func (_mock *MockTransactionFlow) OutputStateIDs(ctx context.Context) []string {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for OutputStateIDs")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockTransactionFlow_OutputStateIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OutputStateIDs'
type MockTransactionFlow_OutputStateIDs_Call struct {
	*mock.Call
}

// OutputStateIDs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTransactionFlow_Expecter) OutputStateIDs(ctx interface{}) *MockTransactionFlow_OutputStateIDs_Call {
	return &MockTransactionFlow_OutputStateIDs_Call{Call: _e.mock.On("OutputStateIDs", ctx)}
}

func (_c *MockTransactionFlow_OutputStateIDs_Call) Run(run func(ctx context.Context)) *MockTransactionFlow_OutputStateIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransactionFlow_OutputStateIDs_Call) Return(strings []string) *MockTransactionFlow_OutputStateIDs_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockTransactionFlow_OutputStateIDs_Call) RunAndReturn(run func(ctx context.Context) []string) *MockTransactionFlow_OutputStateIDs_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareTransaction provides a mock function for the type MockTransactionFlow
func (_mock *MockTransactionFlow) PrepareTransaction(ctx context.Context, defaultSigner string) (*components.PrivateTransaction, error) {
	ret := _mock.Called(ctx, defaultSigner)

	if len(ret) == 0 {
		panic("no return value specified for PrepareTransaction")
	}

	var r0 *components.PrivateTransaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*components.PrivateTransaction, error)); ok {
		return returnFunc(ctx, defaultSigner)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *components.PrivateTransaction); ok {
		r0 = returnFunc(ctx, defaultSigner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*components.PrivateTransaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, defaultSigner)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransactionFlow_PrepareTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareTransaction'
type MockTransactionFlow_PrepareTransaction_Call struct {
	*mock.Call
}

// PrepareTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - defaultSigner string
func (_e *MockTransactionFlow_Expecter) PrepareTransaction(ctx interface{}, defaultSigner interface{}) *MockTransactionFlow_PrepareTransaction_Call {
	return &MockTransactionFlow_PrepareTransaction_Call{Call: _e.mock.On("PrepareTransaction", ctx, defaultSigner)}
}

func (_c *MockTransactionFlow_PrepareTransaction_Call) Run(run func(ctx context.Context, defaultSigner string)) *MockTransactionFlow_PrepareTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTransactionFlow_PrepareTransaction_Call) Return(privateTransaction *components.PrivateTransaction, err error) *MockTransactionFlow_PrepareTransaction_Call {
	_c.Call.Return(privateTransaction, err)
	return _c
}

func (_c *MockTransactionFlow_PrepareTransaction_Call) RunAndReturn(run func(ctx context.Context, defaultSigner string) (*components.PrivateTransaction, error)) *MockTransactionFlow_PrepareTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// ReadyForSequencing provides a mock function for the type MockTransactionFlow
func (_mock *MockTransactionFlow) ReadyForSequencing(ctx context.Context) bool {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReadyForSequencing")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockTransactionFlow_ReadyForSequencing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadyForSequencing'
type MockTransactionFlow_ReadyForSequencing_Call struct {
	*mock.Call
}

// ReadyForSequencing is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTransactionFlow_Expecter) ReadyForSequencing(ctx interface{}) *MockTransactionFlow_ReadyForSequencing_Call {
	return &MockTransactionFlow_ReadyForSequencing_Call{Call: _e.mock.On("ReadyForSequencing", ctx)}
}

func (_c *MockTransactionFlow_ReadyForSequencing_Call) Run(run func(ctx context.Context)) *MockTransactionFlow_ReadyForSequencing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransactionFlow_ReadyForSequencing_Call) Return(b bool) *MockTransactionFlow_ReadyForSequencing_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockTransactionFlow_ReadyForSequencing_Call) RunAndReturn(run func(ctx context.Context) bool) *MockTransactionFlow_ReadyForSequencing_Call {
	_c.Call.Return(run)
	return _c
}

// Signer provides a mock function for the type MockTransactionFlow
func (_mock *MockTransactionFlow) Signer(ctx context.Context) string {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Signer")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockTransactionFlow_Signer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Signer'
type MockTransactionFlow_Signer_Call struct {
	*mock.Call
}

// Signer is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTransactionFlow_Expecter) Signer(ctx interface{}) *MockTransactionFlow_Signer_Call {
	return &MockTransactionFlow_Signer_Call{Call: _e.mock.On("Signer", ctx)}
}

func (_c *MockTransactionFlow_Signer_Call) Run(run func(ctx context.Context)) *MockTransactionFlow_Signer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransactionFlow_Signer_Call) Return(s string) *MockTransactionFlow_Signer_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockTransactionFlow_Signer_Call) RunAndReturn(run func(ctx context.Context) string) *MockTransactionFlow_Signer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClock creates a new instance of MockClock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClock(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClock {
	mock := &MockClock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClock is an autogenerated mock type for the Clock type
type MockClock struct {
	mock.Mock
}

type MockClock_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClock) EXPECT() *MockClock_Expecter {
	return &MockClock_Expecter{mock: &_m.Mock}
}

// Now provides a mock function for the type MockClock
func (_mock *MockClock) Now() time.Time {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Now")
	}

	var r0 time.Time
	if returnFunc, ok := ret.Get(0).(func() time.Time); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(time.Time)
	}
	return r0
}

// MockClock_Now_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Now'
type MockClock_Now_Call struct {
	*mock.Call
}

// Now is a helper method to define mock.On call
func (_e *MockClock_Expecter) Now() *MockClock_Now_Call {
	return &MockClock_Now_Call{Call: _e.mock.On("Now")}
}

func (_c *MockClock_Now_Call) Run(run func()) *MockClock_Now_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClock_Now_Call) Return(time1 time.Time) *MockClock_Now_Call {
	_c.Call.Return(time1)
	return _c
}

func (_c *MockClock_Now_Call) RunAndReturn(run func() time.Time) *MockClock_Now_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCoordinatorSelector creates a new instance of MockCoordinatorSelector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCoordinatorSelector(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCoordinatorSelector {
	mock := &MockCoordinatorSelector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCoordinatorSelector is an autogenerated mock type for the CoordinatorSelector type
type MockCoordinatorSelector struct {
	mock.Mock
}

type MockCoordinatorSelector_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCoordinatorSelector) EXPECT() *MockCoordinatorSelector_Expecter {
	return &MockCoordinatorSelector_Expecter{mock: &_m.Mock}
}

// SelectCoordinatorNode provides a mock function for the type MockCoordinatorSelector
func (_mock *MockCoordinatorSelector) SelectCoordinatorNode(ctx context.Context, transaction *components.PrivateTransaction, environment SequencerEnvironment) (int64, string, error) {
	ret := _mock.Called(ctx, transaction, environment)

	if len(ret) == 0 {
		panic("no return value specified for SelectCoordinatorNode")
	}

	var r0 int64
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *components.PrivateTransaction, SequencerEnvironment) (int64, string, error)); ok {
		return returnFunc(ctx, transaction, environment)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *components.PrivateTransaction, SequencerEnvironment) int64); ok {
		r0 = returnFunc(ctx, transaction, environment)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *components.PrivateTransaction, SequencerEnvironment) string); ok {
		r1 = returnFunc(ctx, transaction, environment)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, *components.PrivateTransaction, SequencerEnvironment) error); ok {
		r2 = returnFunc(ctx, transaction, environment)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockCoordinatorSelector_SelectCoordinatorNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectCoordinatorNode'
type MockCoordinatorSelector_SelectCoordinatorNode_Call struct {
	*mock.Call
}

// SelectCoordinatorNode is a helper method to define mock.On call
//   - ctx context.Context
//   - transaction *components.PrivateTransaction
//   - environment SequencerEnvironment
func (_e *MockCoordinatorSelector_Expecter) SelectCoordinatorNode(ctx interface{}, transaction interface{}, environment interface{}) *MockCoordinatorSelector_SelectCoordinatorNode_Call {
	return &MockCoordinatorSelector_SelectCoordinatorNode_Call{Call: _e.mock.On("SelectCoordinatorNode", ctx, transaction, environment)}
}

func (_c *MockCoordinatorSelector_SelectCoordinatorNode_Call) Run(run func(ctx context.Context, transaction *components.PrivateTransaction, environment SequencerEnvironment)) *MockCoordinatorSelector_SelectCoordinatorNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *components.PrivateTransaction
		if args[1] != nil {
			arg1 = args[1].(*components.PrivateTransaction)
		}
		var arg2 SequencerEnvironment
		if args[2] != nil {
			arg2 = args[2].(SequencerEnvironment)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCoordinatorSelector_SelectCoordinatorNode_Call) Return(n int64, s string, err error) *MockCoordinatorSelector_SelectCoordinatorNode_Call {
	_c.Call.Return(n, s, err)
	return _c
}

func (_c *MockCoordinatorSelector_SelectCoordinatorNode_Call) RunAndReturn(run func(ctx context.Context, transaction *components.PrivateTransaction, environment SequencerEnvironment) (int64, string, error)) *MockCoordinatorSelector_SelectCoordinatorNode_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSequencerEnvironment creates a new instance of MockSequencerEnvironment. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSequencerEnvironment(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSequencerEnvironment {
	mock := &MockSequencerEnvironment{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSequencerEnvironment is an autogenerated mock type for the SequencerEnvironment type
type MockSequencerEnvironment struct {
	mock.Mock
}

type MockSequencerEnvironment_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSequencerEnvironment) EXPECT() *MockSequencerEnvironment_Expecter {
	return &MockSequencerEnvironment_Expecter{mock: &_m.Mock}
}

// GetBlockHeight provides a mock function for the type MockSequencerEnvironment
func (_mock *MockSequencerEnvironment) GetBlockHeight() int64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBlockHeight")
	}

	var r0 int64
	if returnFunc, ok := ret.Get(0).(func() int64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int64)
	}
	return r0
}

// MockSequencerEnvironment_GetBlockHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockHeight'
type MockSequencerEnvironment_GetBlockHeight_Call struct {
	*mock.Call
}

// GetBlockHeight is a helper method to define mock.On call
func (_e *MockSequencerEnvironment_Expecter) GetBlockHeight() *MockSequencerEnvironment_GetBlockHeight_Call {
	return &MockSequencerEnvironment_GetBlockHeight_Call{Call: _e.mock.On("GetBlockHeight")}
}

func (_c *MockSequencerEnvironment_GetBlockHeight_Call) Run(run func()) *MockSequencerEnvironment_GetBlockHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSequencerEnvironment_GetBlockHeight_Call) Return(n int64) *MockSequencerEnvironment_GetBlockHeight_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockSequencerEnvironment_GetBlockHeight_Call) RunAndReturn(run func() int64) *MockSequencerEnvironment_GetBlockHeight_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAssembleCoordinator creates a new instance of MockAssembleCoordinator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAssembleCoordinator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAssembleCoordinator {
	mock := &MockAssembleCoordinator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAssembleCoordinator is an autogenerated mock type for the AssembleCoordinator type
type MockAssembleCoordinator struct {
	mock.Mock
}

type MockAssembleCoordinator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAssembleCoordinator) EXPECT() *MockAssembleCoordinator_Expecter {
	return &MockAssembleCoordinator_Expecter{mock: &_m.Mock}
}

// Complete provides a mock function for the type MockAssembleCoordinator
func (_mock *MockAssembleCoordinator) Complete(requestID string) {
	_mock.Called(requestID)
	return
}

// MockAssembleCoordinator_Complete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Complete'
type MockAssembleCoordinator_Complete_Call struct {
	*mock.Call
}

// Complete is a helper method to define mock.On call
//   - requestID string
func (_e *MockAssembleCoordinator_Expecter) Complete(requestID interface{}) *MockAssembleCoordinator_Complete_Call {
	return &MockAssembleCoordinator_Complete_Call{Call: _e.mock.On("Complete", requestID)}
}

func (_c *MockAssembleCoordinator_Complete_Call) Run(run func(requestID string)) *MockAssembleCoordinator_Complete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAssembleCoordinator_Complete_Call) Return() *MockAssembleCoordinator_Complete_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAssembleCoordinator_Complete_Call) RunAndReturn(run func(requestID string)) *MockAssembleCoordinator_Complete_Call {
	_c.Run(run)
	return _c
}

// QueueAssemble provides a mock function for the type MockAssembleCoordinator
func (_mock *MockAssembleCoordinator) QueueAssemble(ctx context.Context, assemblingNode string, transactionID uuid.UUID, transactionPreAssembly *components.TransactionPreAssembly) {
	_mock.Called(ctx, assemblingNode, transactionID, transactionPreAssembly)
	return
}

// MockAssembleCoordinator_QueueAssemble_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueueAssemble'
type MockAssembleCoordinator_QueueAssemble_Call struct {
	*mock.Call
}

// QueueAssemble is a helper method to define mock.On call
//   - ctx context.Context
//   - assemblingNode string
//   - transactionID uuid.UUID
//   - transactionPreAssembly *components.TransactionPreAssembly
func (_e *MockAssembleCoordinator_Expecter) QueueAssemble(ctx interface{}, assemblingNode interface{}, transactionID interface{}, transactionPreAssembly interface{}) *MockAssembleCoordinator_QueueAssemble_Call {
	return &MockAssembleCoordinator_QueueAssemble_Call{Call: _e.mock.On("QueueAssemble", ctx, assemblingNode, transactionID, transactionPreAssembly)}
}

func (_c *MockAssembleCoordinator_QueueAssemble_Call) Run(run func(ctx context.Context, assemblingNode string, transactionID uuid.UUID, transactionPreAssembly *components.TransactionPreAssembly)) *MockAssembleCoordinator_QueueAssemble_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 *components.TransactionPreAssembly
		if args[3] != nil {
			arg3 = args[3].(*components.TransactionPreAssembly)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockAssembleCoordinator_QueueAssemble_Call) Return() *MockAssembleCoordinator_QueueAssemble_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAssembleCoordinator_QueueAssemble_Call) RunAndReturn(run func(ctx context.Context, assemblingNode string, transactionID uuid.UUID, transactionPreAssembly *components.TransactionPreAssembly)) *MockAssembleCoordinator_QueueAssemble_Call {
	_c.Run(run)
	return _c
}

// Start provides a mock function for the type MockAssembleCoordinator
func (_mock *MockAssembleCoordinator) Start() {
	_mock.Called()
	return
}

// MockAssembleCoordinator_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockAssembleCoordinator_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockAssembleCoordinator_Expecter) Start() *MockAssembleCoordinator_Start_Call {
	return &MockAssembleCoordinator_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockAssembleCoordinator_Start_Call) Run(run func()) *MockAssembleCoordinator_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAssembleCoordinator_Start_Call) Return() *MockAssembleCoordinator_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAssembleCoordinator_Start_Call) RunAndReturn(run func()) *MockAssembleCoordinator_Start_Call {
	_c.Run(run)
	return _c
}

// Stop provides a mock function for the type MockAssembleCoordinator
func (_mock *MockAssembleCoordinator) Stop() {
	_mock.Called()
	return
}

// MockAssembleCoordinator_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockAssembleCoordinator_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockAssembleCoordinator_Expecter) Stop() *MockAssembleCoordinator_Stop_Call {
	return &MockAssembleCoordinator_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockAssembleCoordinator_Stop_Call) Run(run func()) *MockAssembleCoordinator_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAssembleCoordinator_Stop_Call) Return() *MockAssembleCoordinator_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAssembleCoordinator_Stop_Call) RunAndReturn(run func()) *MockAssembleCoordinator_Stop_Call {
	_c.Run(run)
	return _c
}

// NewMockLocalAssembler creates a new instance of MockLocalAssembler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLocalAssembler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLocalAssembler {
	mock := &MockLocalAssembler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLocalAssembler is an autogenerated mock type for the LocalAssembler type
type MockLocalAssembler struct {
	mock.Mock
}

type MockLocalAssembler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLocalAssembler) EXPECT() *MockLocalAssembler_Expecter {
	return &MockLocalAssembler_Expecter{mock: &_m.Mock}
}

// AssembleLocal provides a mock function for the type MockLocalAssembler
func (_mock *MockLocalAssembler) AssembleLocal(ctx context.Context, requestID string, transactionID uuid.UUID, preAssembly *components.TransactionPreAssembly) {
	_mock.Called(ctx, requestID, transactionID, preAssembly)
	return
}

// MockLocalAssembler_AssembleLocal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssembleLocal'
type MockLocalAssembler_AssembleLocal_Call struct {
	*mock.Call
}

// AssembleLocal is a helper method to define mock.On call
//   - ctx context.Context
//   - requestID string
//   - transactionID uuid.UUID
//   - preAssembly *components.TransactionPreAssembly
func (_e *MockLocalAssembler_Expecter) AssembleLocal(ctx interface{}, requestID interface{}, transactionID interface{}, preAssembly interface{}) *MockLocalAssembler_AssembleLocal_Call {
	return &MockLocalAssembler_AssembleLocal_Call{Call: _e.mock.On("AssembleLocal", ctx, requestID, transactionID, preAssembly)}
}

func (_c *MockLocalAssembler_AssembleLocal_Call) Run(run func(ctx context.Context, requestID string, transactionID uuid.UUID, preAssembly *components.TransactionPreAssembly)) *MockLocalAssembler_AssembleLocal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 *components.TransactionPreAssembly
		if args[3] != nil {
			arg3 = args[3].(*components.TransactionPreAssembly)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockLocalAssembler_AssembleLocal_Call) Return() *MockLocalAssembler_AssembleLocal_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLocalAssembler_AssembleLocal_Call) RunAndReturn(run func(ctx context.Context, requestID string, transactionID uuid.UUID, preAssembly *components.TransactionPreAssembly)) *MockLocalAssembler_AssembleLocal_Call {
	_c.Run(run)
	return _c
}
