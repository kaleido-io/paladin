// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package syncpoints

import (
	"context"

	"github.com/LF-Decentralized-Trust-labs/paladin/core/internal/components"
	"github.com/LF-Decentralized-Trust-labs/paladin/sdk/go/pkg/pldtypes"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSyncPoints creates a new instance of MockSyncPoints. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSyncPoints(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSyncPoints {
	mock := &MockSyncPoints{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSyncPoints is an autogenerated mock type for the SyncPoints type
type MockSyncPoints struct {
	mock.Mock
}

type MockSyncPoints_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSyncPoints) EXPECT() *MockSyncPoints_Expecter {
	return &MockSyncPoints_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockSyncPoints
func (_mock *MockSyncPoints) Close() {
	_mock.Called()
	return
}

// MockSyncPoints_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockSyncPoints_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockSyncPoints_Expecter) Close() *MockSyncPoints_Close_Call {
	return &MockSyncPoints_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockSyncPoints_Close_Call) Run(run func()) *MockSyncPoints_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSyncPoints_Close_Call) Return() *MockSyncPoints_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSyncPoints_Close_Call) RunAndReturn(run func()) *MockSyncPoints_Close_Call {
	_c.Run(run)
	return _c
}

// PersistDeployDispatchBatch provides a mock function for the type MockSyncPoints
func (_mock *MockSyncPoints) PersistDeployDispatchBatch(ctx context.Context, dispatchBatch *DispatchBatch) error {
	ret := _mock.Called(ctx, dispatchBatch)

	if len(ret) == 0 {
		panic("no return value specified for PersistDeployDispatchBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *DispatchBatch) error); ok {
		r0 = returnFunc(ctx, dispatchBatch)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSyncPoints_PersistDeployDispatchBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PersistDeployDispatchBatch'
type MockSyncPoints_PersistDeployDispatchBatch_Call struct {
	*mock.Call
}

// PersistDeployDispatchBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - dispatchBatch *DispatchBatch
func (_e *MockSyncPoints_Expecter) PersistDeployDispatchBatch(ctx interface{}, dispatchBatch interface{}) *MockSyncPoints_PersistDeployDispatchBatch_Call {
	return &MockSyncPoints_PersistDeployDispatchBatch_Call{Call: _e.mock.On("PersistDeployDispatchBatch", ctx, dispatchBatch)}
}

func (_c *MockSyncPoints_PersistDeployDispatchBatch_Call) Run(run func(ctx context.Context, dispatchBatch *DispatchBatch)) *MockSyncPoints_PersistDeployDispatchBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *DispatchBatch
		if args[1] != nil {
			arg1 = args[1].(*DispatchBatch)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSyncPoints_PersistDeployDispatchBatch_Call) Return(err error) *MockSyncPoints_PersistDeployDispatchBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSyncPoints_PersistDeployDispatchBatch_Call) RunAndReturn(run func(ctx context.Context, dispatchBatch *DispatchBatch) error) *MockSyncPoints_PersistDeployDispatchBatch_Call {
	_c.Call.Return(run)
	return _c
}

// PersistDispatchBatch provides a mock function for the type MockSyncPoints
func (_mock *MockSyncPoints) PersistDispatchBatch(dCtx components.DomainContext, contractAddress pldtypes.EthAddress, dispatchBatch *DispatchBatch, stateDistributions []*components.StateDistribution, preparedTxnDistributions []*components.PreparedTransactionWithRefs) error {
	ret := _mock.Called(dCtx, contractAddress, dispatchBatch, stateDistributions, preparedTxnDistributions)

	if len(ret) == 0 {
		panic("no return value specified for PersistDispatchBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(components.DomainContext, pldtypes.EthAddress, *DispatchBatch, []*components.StateDistribution, []*components.PreparedTransactionWithRefs) error); ok {
		r0 = returnFunc(dCtx, contractAddress, dispatchBatch, stateDistributions, preparedTxnDistributions)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSyncPoints_PersistDispatchBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PersistDispatchBatch'
type MockSyncPoints_PersistDispatchBatch_Call struct {
	*mock.Call
}

// PersistDispatchBatch is a helper method to define mock.On call
//   - dCtx components.DomainContext
//   - contractAddress pldtypes.EthAddress
//   - dispatchBatch *DispatchBatch
//   - stateDistributions []*components.StateDistribution
//   - preparedTxnDistributions []*components.PreparedTransactionWithRefs
func (_e *MockSyncPoints_Expecter) PersistDispatchBatch(dCtx interface{}, contractAddress interface{}, dispatchBatch interface{}, stateDistributions interface{}, preparedTxnDistributions interface{}) *MockSyncPoints_PersistDispatchBatch_Call {
	return &MockSyncPoints_PersistDispatchBatch_Call{Call: _e.mock.On("PersistDispatchBatch", dCtx, contractAddress, dispatchBatch, stateDistributions, preparedTxnDistributions)}
}

func (_c *MockSyncPoints_PersistDispatchBatch_Call) Run(run func(dCtx components.DomainContext, contractAddress pldtypes.EthAddress, dispatchBatch *DispatchBatch, stateDistributions []*components.StateDistribution, preparedTxnDistributions []*components.PreparedTransactionWithRefs)) *MockSyncPoints_PersistDispatchBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 components.DomainContext
		if args[0] != nil {
			arg0 = args[0].(components.DomainContext)
		}
		var arg1 pldtypes.EthAddress
		if args[1] != nil {
			arg1 = args[1].(pldtypes.EthAddress)
		}
		var arg2 *DispatchBatch
		if args[2] != nil {
			arg2 = args[2].(*DispatchBatch)
		}
		var arg3 []*components.StateDistribution
		if args[3] != nil {
			arg3 = args[3].([]*components.StateDistribution)
		}
		var arg4 []*components.PreparedTransactionWithRefs
		if args[4] != nil {
			arg4 = args[4].([]*components.PreparedTransactionWithRefs)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockSyncPoints_PersistDispatchBatch_Call) Return(err error) *MockSyncPoints_PersistDispatchBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSyncPoints_PersistDispatchBatch_Call) RunAndReturn(run func(dCtx components.DomainContext, contractAddress pldtypes.EthAddress, dispatchBatch *DispatchBatch, stateDistributions []*components.StateDistribution, preparedTxnDistributions []*components.PreparedTransactionWithRefs) error) *MockSyncPoints_PersistDispatchBatch_Call {
	_c.Call.Return(run)
	return _c
}

// QueueTransactionFinalize provides a mock function for the type MockSyncPoints
func (_mock *MockSyncPoints) QueueTransactionFinalize(ctx context.Context, domain string, contractAddress pldtypes.EthAddress, originator string, transactionID uuid.UUID, failureMessage string, onCommit func(context.Context), onRollback func(context.Context, error)) {
	_mock.Called(ctx, domain, contractAddress, originator, transactionID, failureMessage, onCommit, onRollback)
	return
}

// MockSyncPoints_QueueTransactionFinalize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueueTransactionFinalize'
type MockSyncPoints_QueueTransactionFinalize_Call struct {
	*mock.Call
}

// QueueTransactionFinalize is a helper method to define mock.On call
//   - ctx context.Context
//   - domain string
//   - contractAddress pldtypes.EthAddress
//   - originator string
//   - transactionID uuid.UUID
//   - failureMessage string
//   - onCommit func(context.Context)
//   - onRollback func(context.Context, error)
func (_e *MockSyncPoints_Expecter) QueueTransactionFinalize(ctx interface{}, domain interface{}, contractAddress interface{}, originator interface{}, transactionID interface{}, failureMessage interface{}, onCommit interface{}, onRollback interface{}) *MockSyncPoints_QueueTransactionFinalize_Call {
	return &MockSyncPoints_QueueTransactionFinalize_Call{Call: _e.mock.On("QueueTransactionFinalize", ctx, domain, contractAddress, originator, transactionID, failureMessage, onCommit, onRollback)}
}

func (_c *MockSyncPoints_QueueTransactionFinalize_Call) Run(run func(ctx context.Context, domain string, contractAddress pldtypes.EthAddress, originator string, transactionID uuid.UUID, failureMessage string, onCommit func(context.Context), onRollback func(context.Context, error))) *MockSyncPoints_QueueTransactionFinalize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 pldtypes.EthAddress
		if args[2] != nil {
			arg2 = args[2].(pldtypes.EthAddress)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 uuid.UUID
		if args[4] != nil {
			arg4 = args[4].(uuid.UUID)
		}
		var arg5 string
		if args[5] != nil {
			arg5 = args[5].(string)
		}
		var arg6 func(context.Context)
		if args[6] != nil {
			arg6 = args[6].(func(context.Context))
		}
		var arg7 func(context.Context, error)
		if args[7] != nil {
			arg7 = args[7].(func(context.Context, error))
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
			arg7,
		)
	})
	return _c
}

func (_c *MockSyncPoints_QueueTransactionFinalize_Call) Return() *MockSyncPoints_QueueTransactionFinalize_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSyncPoints_QueueTransactionFinalize_Call) RunAndReturn(run func(ctx context.Context, domain string, contractAddress pldtypes.EthAddress, originator string, transactionID uuid.UUID, failureMessage string, onCommit func(context.Context), onRollback func(context.Context, error))) *MockSyncPoints_QueueTransactionFinalize_Call {
	_c.Run(run)
	return _c
}

// Start provides a mock function for the type MockSyncPoints
func (_mock *MockSyncPoints) Start() {
	_mock.Called()
	return
}

// MockSyncPoints_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockSyncPoints_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockSyncPoints_Expecter) Start() *MockSyncPoints_Start_Call {
	return &MockSyncPoints_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockSyncPoints_Start_Call) Run(run func()) *MockSyncPoints_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSyncPoints_Start_Call) Return() *MockSyncPoints_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSyncPoints_Start_Call) RunAndReturn(run func()) *MockSyncPoints_Start_Call {
	_c.Run(run)
	return _c
}
