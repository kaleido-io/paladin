// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package blockindexer

import (
	"context"

	"github.com/LF-Decentralized-Trust-labs/paladin/core/pkg/persistence"
	"github.com/LF-Decentralized-Trust-labs/paladin/sdk/go/pkg/pldapi"
	"github.com/LF-Decentralized-Trust-labs/paladin/sdk/go/pkg/pldtypes"
	"github.com/LF-Decentralized-Trust-labs/paladin/sdk/go/pkg/query"
	"github.com/LF-Decentralized-Trust-labs/paladin/toolkit/pkg/rpcserver"
	"github.com/google/uuid"
	"github.com/hyperledger/firefly-signer/pkg/abi"
	mock "github.com/stretchr/testify/mock"
)

// NewMockBlockIndexer creates a new instance of MockBlockIndexer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlockIndexer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlockIndexer {
	mock := &MockBlockIndexer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBlockIndexer is an autogenerated mock type for the BlockIndexer type
type MockBlockIndexer struct {
	mock.Mock
}

type MockBlockIndexer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlockIndexer) EXPECT() *MockBlockIndexer_Expecter {
	return &MockBlockIndexer_Expecter{mock: &_m.Mock}
}

// AddEventStream provides a mock function for the type MockBlockIndexer
func (_mock *MockBlockIndexer) AddEventStream(ctx context.Context, dbTX persistence.DBTX, stream *InternalEventStream) (*EventStream, error) {
	ret := _mock.Called(ctx, dbTX, stream)

	if len(ret) == 0 {
		panic("no return value specified for AddEventStream")
	}

	var r0 *EventStream
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, *InternalEventStream) (*EventStream, error)); ok {
		return returnFunc(ctx, dbTX, stream)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, *InternalEventStream) *EventStream); ok {
		r0 = returnFunc(ctx, dbTX, stream)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*EventStream)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, *InternalEventStream) error); ok {
		r1 = returnFunc(ctx, dbTX, stream)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBlockIndexer_AddEventStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddEventStream'
type MockBlockIndexer_AddEventStream_Call struct {
	*mock.Call
}

// AddEventStream is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - stream *InternalEventStream
func (_e *MockBlockIndexer_Expecter) AddEventStream(ctx interface{}, dbTX interface{}, stream interface{}) *MockBlockIndexer_AddEventStream_Call {
	return &MockBlockIndexer_AddEventStream_Call{Call: _e.mock.On("AddEventStream", ctx, dbTX, stream)}
}

func (_c *MockBlockIndexer_AddEventStream_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, stream *InternalEventStream)) *MockBlockIndexer_AddEventStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 *InternalEventStream
		if args[2] != nil {
			arg2 = args[2].(*InternalEventStream)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockBlockIndexer_AddEventStream_Call) Return(eventStream *EventStream, err error) *MockBlockIndexer_AddEventStream_Call {
	_c.Call.Return(eventStream, err)
	return _c
}

func (_c *MockBlockIndexer_AddEventStream_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, stream *InternalEventStream) (*EventStream, error)) *MockBlockIndexer_AddEventStream_Call {
	_c.Call.Return(run)
	return _c
}

// DecodeTransactionEvents provides a mock function for the type MockBlockIndexer
func (_mock *MockBlockIndexer) DecodeTransactionEvents(ctx context.Context, hash pldtypes.Bytes32, abi1 abi.ABI, resultFormat pldtypes.JSONFormatOptions) ([]*pldapi.EventWithData, error) {
	ret := _mock.Called(ctx, hash, abi1, resultFormat)

	if len(ret) == 0 {
		panic("no return value specified for DecodeTransactionEvents")
	}

	var r0 []*pldapi.EventWithData
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, pldtypes.Bytes32, abi.ABI, pldtypes.JSONFormatOptions) ([]*pldapi.EventWithData, error)); ok {
		return returnFunc(ctx, hash, abi1, resultFormat)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, pldtypes.Bytes32, abi.ABI, pldtypes.JSONFormatOptions) []*pldapi.EventWithData); ok {
		r0 = returnFunc(ctx, hash, abi1, resultFormat)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pldapi.EventWithData)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, pldtypes.Bytes32, abi.ABI, pldtypes.JSONFormatOptions) error); ok {
		r1 = returnFunc(ctx, hash, abi1, resultFormat)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBlockIndexer_DecodeTransactionEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecodeTransactionEvents'
type MockBlockIndexer_DecodeTransactionEvents_Call struct {
	*mock.Call
}

// DecodeTransactionEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - hash pldtypes.Bytes32
//   - abi1 abi.ABI
//   - resultFormat pldtypes.JSONFormatOptions
func (_e *MockBlockIndexer_Expecter) DecodeTransactionEvents(ctx interface{}, hash interface{}, abi1 interface{}, resultFormat interface{}) *MockBlockIndexer_DecodeTransactionEvents_Call {
	return &MockBlockIndexer_DecodeTransactionEvents_Call{Call: _e.mock.On("DecodeTransactionEvents", ctx, hash, abi1, resultFormat)}
}

func (_c *MockBlockIndexer_DecodeTransactionEvents_Call) Run(run func(ctx context.Context, hash pldtypes.Bytes32, abi1 abi.ABI, resultFormat pldtypes.JSONFormatOptions)) *MockBlockIndexer_DecodeTransactionEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 pldtypes.Bytes32
		if args[1] != nil {
			arg1 = args[1].(pldtypes.Bytes32)
		}
		var arg2 abi.ABI
		if args[2] != nil {
			arg2 = args[2].(abi.ABI)
		}
		var arg3 pldtypes.JSONFormatOptions
		if args[3] != nil {
			arg3 = args[3].(pldtypes.JSONFormatOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockBlockIndexer_DecodeTransactionEvents_Call) Return(eventWithDatas []*pldapi.EventWithData, err error) *MockBlockIndexer_DecodeTransactionEvents_Call {
	_c.Call.Return(eventWithDatas, err)
	return _c
}

func (_c *MockBlockIndexer_DecodeTransactionEvents_Call) RunAndReturn(run func(ctx context.Context, hash pldtypes.Bytes32, abi1 abi.ABI, resultFormat pldtypes.JSONFormatOptions) ([]*pldapi.EventWithData, error)) *MockBlockIndexer_DecodeTransactionEvents_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockListenerHeight provides a mock function for the type MockBlockIndexer
func (_mock *MockBlockIndexer) GetBlockListenerHeight(ctx context.Context) (uint64, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockListenerHeight")
	}

	var r0 uint64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (uint64, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) uint64); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBlockIndexer_GetBlockListenerHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockListenerHeight'
type MockBlockIndexer_GetBlockListenerHeight_Call struct {
	*mock.Call
}

// GetBlockListenerHeight is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockBlockIndexer_Expecter) GetBlockListenerHeight(ctx interface{}) *MockBlockIndexer_GetBlockListenerHeight_Call {
	return &MockBlockIndexer_GetBlockListenerHeight_Call{Call: _e.mock.On("GetBlockListenerHeight", ctx)}
}

func (_c *MockBlockIndexer_GetBlockListenerHeight_Call) Run(run func(ctx context.Context)) *MockBlockIndexer_GetBlockListenerHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockBlockIndexer_GetBlockListenerHeight_Call) Return(highest uint64, err error) *MockBlockIndexer_GetBlockListenerHeight_Call {
	_c.Call.Return(highest, err)
	return _c
}

func (_c *MockBlockIndexer_GetBlockListenerHeight_Call) RunAndReturn(run func(ctx context.Context) (uint64, error)) *MockBlockIndexer_GetBlockListenerHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockTransactionsByNumber provides a mock function for the type MockBlockIndexer
func (_mock *MockBlockIndexer) GetBlockTransactionsByNumber(ctx context.Context, blockNumber int64) ([]*pldapi.IndexedTransaction, error) {
	ret := _mock.Called(ctx, blockNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockTransactionsByNumber")
	}

	var r0 []*pldapi.IndexedTransaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) ([]*pldapi.IndexedTransaction, error)); ok {
		return returnFunc(ctx, blockNumber)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) []*pldapi.IndexedTransaction); ok {
		r0 = returnFunc(ctx, blockNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pldapi.IndexedTransaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, blockNumber)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBlockIndexer_GetBlockTransactionsByNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockTransactionsByNumber'
type MockBlockIndexer_GetBlockTransactionsByNumber_Call struct {
	*mock.Call
}

// GetBlockTransactionsByNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - blockNumber int64
func (_e *MockBlockIndexer_Expecter) GetBlockTransactionsByNumber(ctx interface{}, blockNumber interface{}) *MockBlockIndexer_GetBlockTransactionsByNumber_Call {
	return &MockBlockIndexer_GetBlockTransactionsByNumber_Call{Call: _e.mock.On("GetBlockTransactionsByNumber", ctx, blockNumber)}
}

func (_c *MockBlockIndexer_GetBlockTransactionsByNumber_Call) Run(run func(ctx context.Context, blockNumber int64)) *MockBlockIndexer_GetBlockTransactionsByNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBlockIndexer_GetBlockTransactionsByNumber_Call) Return(indexedTransactions []*pldapi.IndexedTransaction, err error) *MockBlockIndexer_GetBlockTransactionsByNumber_Call {
	_c.Call.Return(indexedTransactions, err)
	return _c
}

func (_c *MockBlockIndexer_GetBlockTransactionsByNumber_Call) RunAndReturn(run func(ctx context.Context, blockNumber int64) ([]*pldapi.IndexedTransaction, error)) *MockBlockIndexer_GetBlockTransactionsByNumber_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfirmedBlockHeight provides a mock function for the type MockBlockIndexer
func (_mock *MockBlockIndexer) GetConfirmedBlockHeight(ctx context.Context) (pldtypes.HexUint64, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetConfirmedBlockHeight")
	}

	var r0 pldtypes.HexUint64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (pldtypes.HexUint64, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) pldtypes.HexUint64); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(pldtypes.HexUint64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBlockIndexer_GetConfirmedBlockHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfirmedBlockHeight'
type MockBlockIndexer_GetConfirmedBlockHeight_Call struct {
	*mock.Call
}

// GetConfirmedBlockHeight is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockBlockIndexer_Expecter) GetConfirmedBlockHeight(ctx interface{}) *MockBlockIndexer_GetConfirmedBlockHeight_Call {
	return &MockBlockIndexer_GetConfirmedBlockHeight_Call{Call: _e.mock.On("GetConfirmedBlockHeight", ctx)}
}

func (_c *MockBlockIndexer_GetConfirmedBlockHeight_Call) Run(run func(ctx context.Context)) *MockBlockIndexer_GetConfirmedBlockHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockBlockIndexer_GetConfirmedBlockHeight_Call) Return(confirmed pldtypes.HexUint64, err error) *MockBlockIndexer_GetConfirmedBlockHeight_Call {
	_c.Call.Return(confirmed, err)
	return _c
}

func (_c *MockBlockIndexer_GetConfirmedBlockHeight_Call) RunAndReturn(run func(ctx context.Context) (pldtypes.HexUint64, error)) *MockBlockIndexer_GetConfirmedBlockHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventStreamStatus provides a mock function for the type MockBlockIndexer
func (_mock *MockBlockIndexer) GetEventStreamStatus(ctx context.Context, id uuid.UUID) (*EventStreamStatus, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetEventStreamStatus")
	}

	var r0 *EventStreamStatus
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*EventStreamStatus, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *EventStreamStatus); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*EventStreamStatus)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBlockIndexer_GetEventStreamStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventStreamStatus'
type MockBlockIndexer_GetEventStreamStatus_Call struct {
	*mock.Call
}

// GetEventStreamStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockBlockIndexer_Expecter) GetEventStreamStatus(ctx interface{}, id interface{}) *MockBlockIndexer_GetEventStreamStatus_Call {
	return &MockBlockIndexer_GetEventStreamStatus_Call{Call: _e.mock.On("GetEventStreamStatus", ctx, id)}
}

func (_c *MockBlockIndexer_GetEventStreamStatus_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockBlockIndexer_GetEventStreamStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBlockIndexer_GetEventStreamStatus_Call) Return(eventStreamStatus *EventStreamStatus, err error) *MockBlockIndexer_GetEventStreamStatus_Call {
	_c.Call.Return(eventStreamStatus, err)
	return _c
}

func (_c *MockBlockIndexer_GetEventStreamStatus_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*EventStreamStatus, error)) *MockBlockIndexer_GetEventStreamStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetIndexedBlockByNumber provides a mock function for the type MockBlockIndexer
func (_mock *MockBlockIndexer) GetIndexedBlockByNumber(ctx context.Context, number uint64) (*pldapi.IndexedBlock, error) {
	ret := _mock.Called(ctx, number)

	if len(ret) == 0 {
		panic("no return value specified for GetIndexedBlockByNumber")
	}

	var r0 *pldapi.IndexedBlock
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint64) (*pldapi.IndexedBlock, error)); ok {
		return returnFunc(ctx, number)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint64) *pldapi.IndexedBlock); ok {
		r0 = returnFunc(ctx, number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.IndexedBlock)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = returnFunc(ctx, number)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBlockIndexer_GetIndexedBlockByNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIndexedBlockByNumber'
type MockBlockIndexer_GetIndexedBlockByNumber_Call struct {
	*mock.Call
}

// GetIndexedBlockByNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - number uint64
func (_e *MockBlockIndexer_Expecter) GetIndexedBlockByNumber(ctx interface{}, number interface{}) *MockBlockIndexer_GetIndexedBlockByNumber_Call {
	return &MockBlockIndexer_GetIndexedBlockByNumber_Call{Call: _e.mock.On("GetIndexedBlockByNumber", ctx, number)}
}

func (_c *MockBlockIndexer_GetIndexedBlockByNumber_Call) Run(run func(ctx context.Context, number uint64)) *MockBlockIndexer_GetIndexedBlockByNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uint64
		if args[1] != nil {
			arg1 = args[1].(uint64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBlockIndexer_GetIndexedBlockByNumber_Call) Return(indexedBlock *pldapi.IndexedBlock, err error) *MockBlockIndexer_GetIndexedBlockByNumber_Call {
	_c.Call.Return(indexedBlock, err)
	return _c
}

func (_c *MockBlockIndexer_GetIndexedBlockByNumber_Call) RunAndReturn(run func(ctx context.Context, number uint64) (*pldapi.IndexedBlock, error)) *MockBlockIndexer_GetIndexedBlockByNumber_Call {
	_c.Call.Return(run)
	return _c
}

// GetIndexedTransactionByHash provides a mock function for the type MockBlockIndexer
func (_mock *MockBlockIndexer) GetIndexedTransactionByHash(ctx context.Context, hash pldtypes.Bytes32) (*pldapi.IndexedTransaction, error) {
	ret := _mock.Called(ctx, hash)

	if len(ret) == 0 {
		panic("no return value specified for GetIndexedTransactionByHash")
	}

	var r0 *pldapi.IndexedTransaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, pldtypes.Bytes32) (*pldapi.IndexedTransaction, error)); ok {
		return returnFunc(ctx, hash)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, pldtypes.Bytes32) *pldapi.IndexedTransaction); ok {
		r0 = returnFunc(ctx, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.IndexedTransaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, pldtypes.Bytes32) error); ok {
		r1 = returnFunc(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBlockIndexer_GetIndexedTransactionByHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIndexedTransactionByHash'
type MockBlockIndexer_GetIndexedTransactionByHash_Call struct {
	*mock.Call
}

// GetIndexedTransactionByHash is a helper method to define mock.On call
//   - ctx context.Context
//   - hash pldtypes.Bytes32
func (_e *MockBlockIndexer_Expecter) GetIndexedTransactionByHash(ctx interface{}, hash interface{}) *MockBlockIndexer_GetIndexedTransactionByHash_Call {
	return &MockBlockIndexer_GetIndexedTransactionByHash_Call{Call: _e.mock.On("GetIndexedTransactionByHash", ctx, hash)}
}

func (_c *MockBlockIndexer_GetIndexedTransactionByHash_Call) Run(run func(ctx context.Context, hash pldtypes.Bytes32)) *MockBlockIndexer_GetIndexedTransactionByHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 pldtypes.Bytes32
		if args[1] != nil {
			arg1 = args[1].(pldtypes.Bytes32)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBlockIndexer_GetIndexedTransactionByHash_Call) Return(indexedTransaction *pldapi.IndexedTransaction, err error) *MockBlockIndexer_GetIndexedTransactionByHash_Call {
	_c.Call.Return(indexedTransaction, err)
	return _c
}

func (_c *MockBlockIndexer_GetIndexedTransactionByHash_Call) RunAndReturn(run func(ctx context.Context, hash pldtypes.Bytes32) (*pldapi.IndexedTransaction, error)) *MockBlockIndexer_GetIndexedTransactionByHash_Call {
	_c.Call.Return(run)
	return _c
}

// GetIndexedTransactionByNonce provides a mock function for the type MockBlockIndexer
func (_mock *MockBlockIndexer) GetIndexedTransactionByNonce(ctx context.Context, from pldtypes.EthAddress, nonce uint64) (*pldapi.IndexedTransaction, error) {
	ret := _mock.Called(ctx, from, nonce)

	if len(ret) == 0 {
		panic("no return value specified for GetIndexedTransactionByNonce")
	}

	var r0 *pldapi.IndexedTransaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, pldtypes.EthAddress, uint64) (*pldapi.IndexedTransaction, error)); ok {
		return returnFunc(ctx, from, nonce)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, pldtypes.EthAddress, uint64) *pldapi.IndexedTransaction); ok {
		r0 = returnFunc(ctx, from, nonce)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.IndexedTransaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, pldtypes.EthAddress, uint64) error); ok {
		r1 = returnFunc(ctx, from, nonce)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBlockIndexer_GetIndexedTransactionByNonce_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIndexedTransactionByNonce'
type MockBlockIndexer_GetIndexedTransactionByNonce_Call struct {
	*mock.Call
}

// GetIndexedTransactionByNonce is a helper method to define mock.On call
//   - ctx context.Context
//   - from pldtypes.EthAddress
//   - nonce uint64
func (_e *MockBlockIndexer_Expecter) GetIndexedTransactionByNonce(ctx interface{}, from interface{}, nonce interface{}) *MockBlockIndexer_GetIndexedTransactionByNonce_Call {
	return &MockBlockIndexer_GetIndexedTransactionByNonce_Call{Call: _e.mock.On("GetIndexedTransactionByNonce", ctx, from, nonce)}
}

func (_c *MockBlockIndexer_GetIndexedTransactionByNonce_Call) Run(run func(ctx context.Context, from pldtypes.EthAddress, nonce uint64)) *MockBlockIndexer_GetIndexedTransactionByNonce_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 pldtypes.EthAddress
		if args[1] != nil {
			arg1 = args[1].(pldtypes.EthAddress)
		}
		var arg2 uint64
		if args[2] != nil {
			arg2 = args[2].(uint64)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockBlockIndexer_GetIndexedTransactionByNonce_Call) Return(indexedTransaction *pldapi.IndexedTransaction, err error) *MockBlockIndexer_GetIndexedTransactionByNonce_Call {
	_c.Call.Return(indexedTransaction, err)
	return _c
}

func (_c *MockBlockIndexer_GetIndexedTransactionByNonce_Call) RunAndReturn(run func(ctx context.Context, from pldtypes.EthAddress, nonce uint64) (*pldapi.IndexedTransaction, error)) *MockBlockIndexer_GetIndexedTransactionByNonce_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionEventsByHash provides a mock function for the type MockBlockIndexer
func (_mock *MockBlockIndexer) GetTransactionEventsByHash(ctx context.Context, hash pldtypes.Bytes32) ([]*pldapi.IndexedEvent, error) {
	ret := _mock.Called(ctx, hash)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionEventsByHash")
	}

	var r0 []*pldapi.IndexedEvent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, pldtypes.Bytes32) ([]*pldapi.IndexedEvent, error)); ok {
		return returnFunc(ctx, hash)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, pldtypes.Bytes32) []*pldapi.IndexedEvent); ok {
		r0 = returnFunc(ctx, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pldapi.IndexedEvent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, pldtypes.Bytes32) error); ok {
		r1 = returnFunc(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBlockIndexer_GetTransactionEventsByHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionEventsByHash'
type MockBlockIndexer_GetTransactionEventsByHash_Call struct {
	*mock.Call
}

// GetTransactionEventsByHash is a helper method to define mock.On call
//   - ctx context.Context
//   - hash pldtypes.Bytes32
func (_e *MockBlockIndexer_Expecter) GetTransactionEventsByHash(ctx interface{}, hash interface{}) *MockBlockIndexer_GetTransactionEventsByHash_Call {
	return &MockBlockIndexer_GetTransactionEventsByHash_Call{Call: _e.mock.On("GetTransactionEventsByHash", ctx, hash)}
}

func (_c *MockBlockIndexer_GetTransactionEventsByHash_Call) Run(run func(ctx context.Context, hash pldtypes.Bytes32)) *MockBlockIndexer_GetTransactionEventsByHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 pldtypes.Bytes32
		if args[1] != nil {
			arg1 = args[1].(pldtypes.Bytes32)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBlockIndexer_GetTransactionEventsByHash_Call) Return(indexedEvents []*pldapi.IndexedEvent, err error) *MockBlockIndexer_GetTransactionEventsByHash_Call {
	_c.Call.Return(indexedEvents, err)
	return _c
}

func (_c *MockBlockIndexer_GetTransactionEventsByHash_Call) RunAndReturn(run func(ctx context.Context, hash pldtypes.Bytes32) ([]*pldapi.IndexedEvent, error)) *MockBlockIndexer_GetTransactionEventsByHash_Call {
	_c.Call.Return(run)
	return _c
}

// ListTransactionEvents provides a mock function for the type MockBlockIndexer
func (_mock *MockBlockIndexer) ListTransactionEvents(ctx context.Context, lastBlock int64, lastIndex int, limit int) ([]*pldapi.IndexedEvent, error) {
	ret := _mock.Called(ctx, lastBlock, lastIndex, limit)

	if len(ret) == 0 {
		panic("no return value specified for ListTransactionEvents")
	}

	var r0 []*pldapi.IndexedEvent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, int, int) ([]*pldapi.IndexedEvent, error)); ok {
		return returnFunc(ctx, lastBlock, lastIndex, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, int, int) []*pldapi.IndexedEvent); ok {
		r0 = returnFunc(ctx, lastBlock, lastIndex, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pldapi.IndexedEvent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, int, int) error); ok {
		r1 = returnFunc(ctx, lastBlock, lastIndex, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBlockIndexer_ListTransactionEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTransactionEvents'
type MockBlockIndexer_ListTransactionEvents_Call struct {
	*mock.Call
}

// ListTransactionEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - lastBlock int64
//   - lastIndex int
//   - limit int
func (_e *MockBlockIndexer_Expecter) ListTransactionEvents(ctx interface{}, lastBlock interface{}, lastIndex interface{}, limit interface{}) *MockBlockIndexer_ListTransactionEvents_Call {
	return &MockBlockIndexer_ListTransactionEvents_Call{Call: _e.mock.On("ListTransactionEvents", ctx, lastBlock, lastIndex, limit)}
}

func (_c *MockBlockIndexer_ListTransactionEvents_Call) Run(run func(ctx context.Context, lastBlock int64, lastIndex int, limit int)) *MockBlockIndexer_ListTransactionEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockBlockIndexer_ListTransactionEvents_Call) Return(indexedEvents []*pldapi.IndexedEvent, err error) *MockBlockIndexer_ListTransactionEvents_Call {
	_c.Call.Return(indexedEvents, err)
	return _c
}

func (_c *MockBlockIndexer_ListTransactionEvents_Call) RunAndReturn(run func(ctx context.Context, lastBlock int64, lastIndex int, limit int) ([]*pldapi.IndexedEvent, error)) *MockBlockIndexer_ListTransactionEvents_Call {
	_c.Call.Return(run)
	return _c
}

// QueryEventStreamDefinitions provides a mock function for the type MockBlockIndexer
func (_mock *MockBlockIndexer) QueryEventStreamDefinitions(ctx context.Context, dbTX persistence.DBTX, esType pldtypes.Enum[EventStreamType], jq *query.QueryJSON) ([]*EventStream, error) {
	ret := _mock.Called(ctx, dbTX, esType, jq)

	if len(ret) == 0 {
		panic("no return value specified for QueryEventStreamDefinitions")
	}

	var r0 []*EventStream
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, pldtypes.Enum[EventStreamType], *query.QueryJSON) ([]*EventStream, error)); ok {
		return returnFunc(ctx, dbTX, esType, jq)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persistence.DBTX, pldtypes.Enum[EventStreamType], *query.QueryJSON) []*EventStream); ok {
		r0 = returnFunc(ctx, dbTX, esType, jq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*EventStream)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persistence.DBTX, pldtypes.Enum[EventStreamType], *query.QueryJSON) error); ok {
		r1 = returnFunc(ctx, dbTX, esType, jq)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBlockIndexer_QueryEventStreamDefinitions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryEventStreamDefinitions'
type MockBlockIndexer_QueryEventStreamDefinitions_Call struct {
	*mock.Call
}

// QueryEventStreamDefinitions is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTX persistence.DBTX
//   - esType pldtypes.Enum[EventStreamType]
//   - jq *query.QueryJSON
func (_e *MockBlockIndexer_Expecter) QueryEventStreamDefinitions(ctx interface{}, dbTX interface{}, esType interface{}, jq interface{}) *MockBlockIndexer_QueryEventStreamDefinitions_Call {
	return &MockBlockIndexer_QueryEventStreamDefinitions_Call{Call: _e.mock.On("QueryEventStreamDefinitions", ctx, dbTX, esType, jq)}
}

func (_c *MockBlockIndexer_QueryEventStreamDefinitions_Call) Run(run func(ctx context.Context, dbTX persistence.DBTX, esType pldtypes.Enum[EventStreamType], jq *query.QueryJSON)) *MockBlockIndexer_QueryEventStreamDefinitions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persistence.DBTX
		if args[1] != nil {
			arg1 = args[1].(persistence.DBTX)
		}
		var arg2 pldtypes.Enum[EventStreamType]
		if args[2] != nil {
			arg2 = args[2].(pldtypes.Enum[EventStreamType])
		}
		var arg3 *query.QueryJSON
		if args[3] != nil {
			arg3 = args[3].(*query.QueryJSON)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockBlockIndexer_QueryEventStreamDefinitions_Call) Return(eventStreams []*EventStream, err error) *MockBlockIndexer_QueryEventStreamDefinitions_Call {
	_c.Call.Return(eventStreams, err)
	return _c
}

func (_c *MockBlockIndexer_QueryEventStreamDefinitions_Call) RunAndReturn(run func(ctx context.Context, dbTX persistence.DBTX, esType pldtypes.Enum[EventStreamType], jq *query.QueryJSON) ([]*EventStream, error)) *MockBlockIndexer_QueryEventStreamDefinitions_Call {
	_c.Call.Return(run)
	return _c
}

// QueryIndexedBlocks provides a mock function for the type MockBlockIndexer
func (_mock *MockBlockIndexer) QueryIndexedBlocks(ctx context.Context, jq *query.QueryJSON) ([]*pldapi.IndexedBlock, error) {
	ret := _mock.Called(ctx, jq)

	if len(ret) == 0 {
		panic("no return value specified for QueryIndexedBlocks")
	}

	var r0 []*pldapi.IndexedBlock
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *query.QueryJSON) ([]*pldapi.IndexedBlock, error)); ok {
		return returnFunc(ctx, jq)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *query.QueryJSON) []*pldapi.IndexedBlock); ok {
		r0 = returnFunc(ctx, jq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pldapi.IndexedBlock)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *query.QueryJSON) error); ok {
		r1 = returnFunc(ctx, jq)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBlockIndexer_QueryIndexedBlocks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryIndexedBlocks'
type MockBlockIndexer_QueryIndexedBlocks_Call struct {
	*mock.Call
}

// QueryIndexedBlocks is a helper method to define mock.On call
//   - ctx context.Context
//   - jq *query.QueryJSON
func (_e *MockBlockIndexer_Expecter) QueryIndexedBlocks(ctx interface{}, jq interface{}) *MockBlockIndexer_QueryIndexedBlocks_Call {
	return &MockBlockIndexer_QueryIndexedBlocks_Call{Call: _e.mock.On("QueryIndexedBlocks", ctx, jq)}
}

func (_c *MockBlockIndexer_QueryIndexedBlocks_Call) Run(run func(ctx context.Context, jq *query.QueryJSON)) *MockBlockIndexer_QueryIndexedBlocks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *query.QueryJSON
		if args[1] != nil {
			arg1 = args[1].(*query.QueryJSON)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBlockIndexer_QueryIndexedBlocks_Call) Return(indexedBlocks []*pldapi.IndexedBlock, err error) *MockBlockIndexer_QueryIndexedBlocks_Call {
	_c.Call.Return(indexedBlocks, err)
	return _c
}

func (_c *MockBlockIndexer_QueryIndexedBlocks_Call) RunAndReturn(run func(ctx context.Context, jq *query.QueryJSON) ([]*pldapi.IndexedBlock, error)) *MockBlockIndexer_QueryIndexedBlocks_Call {
	_c.Call.Return(run)
	return _c
}

// QueryIndexedEvents provides a mock function for the type MockBlockIndexer
func (_mock *MockBlockIndexer) QueryIndexedEvents(ctx context.Context, jq *query.QueryJSON) ([]*pldapi.IndexedEvent, error) {
	ret := _mock.Called(ctx, jq)

	if len(ret) == 0 {
		panic("no return value specified for QueryIndexedEvents")
	}

	var r0 []*pldapi.IndexedEvent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *query.QueryJSON) ([]*pldapi.IndexedEvent, error)); ok {
		return returnFunc(ctx, jq)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *query.QueryJSON) []*pldapi.IndexedEvent); ok {
		r0 = returnFunc(ctx, jq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pldapi.IndexedEvent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *query.QueryJSON) error); ok {
		r1 = returnFunc(ctx, jq)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBlockIndexer_QueryIndexedEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryIndexedEvents'
type MockBlockIndexer_QueryIndexedEvents_Call struct {
	*mock.Call
}

// QueryIndexedEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - jq *query.QueryJSON
func (_e *MockBlockIndexer_Expecter) QueryIndexedEvents(ctx interface{}, jq interface{}) *MockBlockIndexer_QueryIndexedEvents_Call {
	return &MockBlockIndexer_QueryIndexedEvents_Call{Call: _e.mock.On("QueryIndexedEvents", ctx, jq)}
}

func (_c *MockBlockIndexer_QueryIndexedEvents_Call) Run(run func(ctx context.Context, jq *query.QueryJSON)) *MockBlockIndexer_QueryIndexedEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *query.QueryJSON
		if args[1] != nil {
			arg1 = args[1].(*query.QueryJSON)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBlockIndexer_QueryIndexedEvents_Call) Return(indexedEvents []*pldapi.IndexedEvent, err error) *MockBlockIndexer_QueryIndexedEvents_Call {
	_c.Call.Return(indexedEvents, err)
	return _c
}

func (_c *MockBlockIndexer_QueryIndexedEvents_Call) RunAndReturn(run func(ctx context.Context, jq *query.QueryJSON) ([]*pldapi.IndexedEvent, error)) *MockBlockIndexer_QueryIndexedEvents_Call {
	_c.Call.Return(run)
	return _c
}

// QueryIndexedTransactions provides a mock function for the type MockBlockIndexer
func (_mock *MockBlockIndexer) QueryIndexedTransactions(ctx context.Context, jq *query.QueryJSON) ([]*pldapi.IndexedTransaction, error) {
	ret := _mock.Called(ctx, jq)

	if len(ret) == 0 {
		panic("no return value specified for QueryIndexedTransactions")
	}

	var r0 []*pldapi.IndexedTransaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *query.QueryJSON) ([]*pldapi.IndexedTransaction, error)); ok {
		return returnFunc(ctx, jq)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *query.QueryJSON) []*pldapi.IndexedTransaction); ok {
		r0 = returnFunc(ctx, jq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pldapi.IndexedTransaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *query.QueryJSON) error); ok {
		r1 = returnFunc(ctx, jq)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBlockIndexer_QueryIndexedTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryIndexedTransactions'
type MockBlockIndexer_QueryIndexedTransactions_Call struct {
	*mock.Call
}

// QueryIndexedTransactions is a helper method to define mock.On call
//   - ctx context.Context
//   - jq *query.QueryJSON
func (_e *MockBlockIndexer_Expecter) QueryIndexedTransactions(ctx interface{}, jq interface{}) *MockBlockIndexer_QueryIndexedTransactions_Call {
	return &MockBlockIndexer_QueryIndexedTransactions_Call{Call: _e.mock.On("QueryIndexedTransactions", ctx, jq)}
}

func (_c *MockBlockIndexer_QueryIndexedTransactions_Call) Run(run func(ctx context.Context, jq *query.QueryJSON)) *MockBlockIndexer_QueryIndexedTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *query.QueryJSON
		if args[1] != nil {
			arg1 = args[1].(*query.QueryJSON)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBlockIndexer_QueryIndexedTransactions_Call) Return(indexedTransactions []*pldapi.IndexedTransaction, err error) *MockBlockIndexer_QueryIndexedTransactions_Call {
	_c.Call.Return(indexedTransactions, err)
	return _c
}

func (_c *MockBlockIndexer_QueryIndexedTransactions_Call) RunAndReturn(run func(ctx context.Context, jq *query.QueryJSON) ([]*pldapi.IndexedTransaction, error)) *MockBlockIndexer_QueryIndexedTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// RPCModule provides a mock function for the type MockBlockIndexer
func (_mock *MockBlockIndexer) RPCModule() *rpcserver.RPCModule {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for RPCModule")
	}

	var r0 *rpcserver.RPCModule
	if returnFunc, ok := ret.Get(0).(func() *rpcserver.RPCModule); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcserver.RPCModule)
		}
	}
	return r0
}

// MockBlockIndexer_RPCModule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RPCModule'
type MockBlockIndexer_RPCModule_Call struct {
	*mock.Call
}

// RPCModule is a helper method to define mock.On call
func (_e *MockBlockIndexer_Expecter) RPCModule() *MockBlockIndexer_RPCModule_Call {
	return &MockBlockIndexer_RPCModule_Call{Call: _e.mock.On("RPCModule")}
}

func (_c *MockBlockIndexer_RPCModule_Call) Run(run func()) *MockBlockIndexer_RPCModule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBlockIndexer_RPCModule_Call) Return(rPCModule *rpcserver.RPCModule) *MockBlockIndexer_RPCModule_Call {
	_c.Call.Return(rPCModule)
	return _c
}

func (_c *MockBlockIndexer_RPCModule_Call) RunAndReturn(run func() *rpcserver.RPCModule) *MockBlockIndexer_RPCModule_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveEventStream provides a mock function for the type MockBlockIndexer
func (_mock *MockBlockIndexer) RemoveEventStream(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for RemoveEventStream")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBlockIndexer_RemoveEventStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveEventStream'
type MockBlockIndexer_RemoveEventStream_Call struct {
	*mock.Call
}

// RemoveEventStream is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockBlockIndexer_Expecter) RemoveEventStream(ctx interface{}, id interface{}) *MockBlockIndexer_RemoveEventStream_Call {
	return &MockBlockIndexer_RemoveEventStream_Call{Call: _e.mock.On("RemoveEventStream", ctx, id)}
}

func (_c *MockBlockIndexer_RemoveEventStream_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockBlockIndexer_RemoveEventStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBlockIndexer_RemoveEventStream_Call) Return(err error) *MockBlockIndexer_RemoveEventStream_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBlockIndexer_RemoveEventStream_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockBlockIndexer_RemoveEventStream_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockBlockIndexer
func (_mock *MockBlockIndexer) Start(internalEventStreams ...*InternalEventStream) error {
	// *InternalEventStream
	_va := make([]interface{}, len(internalEventStreams))
	for _i := range internalEventStreams {
		_va[_i] = internalEventStreams[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(...*InternalEventStream) error); ok {
		r0 = returnFunc(internalEventStreams...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBlockIndexer_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockBlockIndexer_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - internalEventStreams ...*InternalEventStream
func (_e *MockBlockIndexer_Expecter) Start(internalEventStreams ...interface{}) *MockBlockIndexer_Start_Call {
	return &MockBlockIndexer_Start_Call{Call: _e.mock.On("Start",
		append([]interface{}{}, internalEventStreams...)...)}
}

func (_c *MockBlockIndexer_Start_Call) Run(run func(internalEventStreams ...*InternalEventStream)) *MockBlockIndexer_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []*InternalEventStream
		variadicArgs := make([]*InternalEventStream, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(*InternalEventStream)
			}
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *MockBlockIndexer_Start_Call) Return(err error) *MockBlockIndexer_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBlockIndexer_Start_Call) RunAndReturn(run func(internalEventStreams ...*InternalEventStream) error) *MockBlockIndexer_Start_Call {
	_c.Call.Return(run)
	return _c
}

// StartEventStream provides a mock function for the type MockBlockIndexer
func (_mock *MockBlockIndexer) StartEventStream(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for StartEventStream")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBlockIndexer_StartEventStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartEventStream'
type MockBlockIndexer_StartEventStream_Call struct {
	*mock.Call
}

// StartEventStream is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockBlockIndexer_Expecter) StartEventStream(ctx interface{}, id interface{}) *MockBlockIndexer_StartEventStream_Call {
	return &MockBlockIndexer_StartEventStream_Call{Call: _e.mock.On("StartEventStream", ctx, id)}
}

func (_c *MockBlockIndexer_StartEventStream_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockBlockIndexer_StartEventStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBlockIndexer_StartEventStream_Call) Return(err error) *MockBlockIndexer_StartEventStream_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBlockIndexer_StartEventStream_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockBlockIndexer_StartEventStream_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockBlockIndexer
func (_mock *MockBlockIndexer) Stop() {
	_mock.Called()
	return
}

// MockBlockIndexer_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockBlockIndexer_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockBlockIndexer_Expecter) Stop() *MockBlockIndexer_Stop_Call {
	return &MockBlockIndexer_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockBlockIndexer_Stop_Call) Run(run func()) *MockBlockIndexer_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBlockIndexer_Stop_Call) Return() *MockBlockIndexer_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBlockIndexer_Stop_Call) RunAndReturn(run func()) *MockBlockIndexer_Stop_Call {
	_c.Run(run)
	return _c
}

// StopEventStream provides a mock function for the type MockBlockIndexer
func (_mock *MockBlockIndexer) StopEventStream(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for StopEventStream")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBlockIndexer_StopEventStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopEventStream'
type MockBlockIndexer_StopEventStream_Call struct {
	*mock.Call
}

// StopEventStream is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockBlockIndexer_Expecter) StopEventStream(ctx interface{}, id interface{}) *MockBlockIndexer_StopEventStream_Call {
	return &MockBlockIndexer_StopEventStream_Call{Call: _e.mock.On("StopEventStream", ctx, id)}
}

func (_c *MockBlockIndexer_StopEventStream_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockBlockIndexer_StopEventStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBlockIndexer_StopEventStream_Call) Return(err error) *MockBlockIndexer_StopEventStream_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBlockIndexer_StopEventStream_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockBlockIndexer_StopEventStream_Call {
	_c.Call.Return(run)
	return _c
}

// WaitForTransactionAnyResult provides a mock function for the type MockBlockIndexer
func (_mock *MockBlockIndexer) WaitForTransactionAnyResult(ctx context.Context, hash pldtypes.Bytes32) (*pldapi.IndexedTransaction, error) {
	ret := _mock.Called(ctx, hash)

	if len(ret) == 0 {
		panic("no return value specified for WaitForTransactionAnyResult")
	}

	var r0 *pldapi.IndexedTransaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, pldtypes.Bytes32) (*pldapi.IndexedTransaction, error)); ok {
		return returnFunc(ctx, hash)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, pldtypes.Bytes32) *pldapi.IndexedTransaction); ok {
		r0 = returnFunc(ctx, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.IndexedTransaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, pldtypes.Bytes32) error); ok {
		r1 = returnFunc(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBlockIndexer_WaitForTransactionAnyResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForTransactionAnyResult'
type MockBlockIndexer_WaitForTransactionAnyResult_Call struct {
	*mock.Call
}

// WaitForTransactionAnyResult is a helper method to define mock.On call
//   - ctx context.Context
//   - hash pldtypes.Bytes32
func (_e *MockBlockIndexer_Expecter) WaitForTransactionAnyResult(ctx interface{}, hash interface{}) *MockBlockIndexer_WaitForTransactionAnyResult_Call {
	return &MockBlockIndexer_WaitForTransactionAnyResult_Call{Call: _e.mock.On("WaitForTransactionAnyResult", ctx, hash)}
}

func (_c *MockBlockIndexer_WaitForTransactionAnyResult_Call) Run(run func(ctx context.Context, hash pldtypes.Bytes32)) *MockBlockIndexer_WaitForTransactionAnyResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 pldtypes.Bytes32
		if args[1] != nil {
			arg1 = args[1].(pldtypes.Bytes32)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBlockIndexer_WaitForTransactionAnyResult_Call) Return(indexedTransaction *pldapi.IndexedTransaction, err error) *MockBlockIndexer_WaitForTransactionAnyResult_Call {
	_c.Call.Return(indexedTransaction, err)
	return _c
}

func (_c *MockBlockIndexer_WaitForTransactionAnyResult_Call) RunAndReturn(run func(ctx context.Context, hash pldtypes.Bytes32) (*pldapi.IndexedTransaction, error)) *MockBlockIndexer_WaitForTransactionAnyResult_Call {
	_c.Call.Return(run)
	return _c
}

// WaitForTransactionSuccess provides a mock function for the type MockBlockIndexer
func (_mock *MockBlockIndexer) WaitForTransactionSuccess(ctx context.Context, hash pldtypes.Bytes32, errorABI abi.ABI) (*pldapi.IndexedTransaction, error) {
	ret := _mock.Called(ctx, hash, errorABI)

	if len(ret) == 0 {
		panic("no return value specified for WaitForTransactionSuccess")
	}

	var r0 *pldapi.IndexedTransaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, pldtypes.Bytes32, abi.ABI) (*pldapi.IndexedTransaction, error)); ok {
		return returnFunc(ctx, hash, errorABI)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, pldtypes.Bytes32, abi.ABI) *pldapi.IndexedTransaction); ok {
		r0 = returnFunc(ctx, hash, errorABI)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.IndexedTransaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, pldtypes.Bytes32, abi.ABI) error); ok {
		r1 = returnFunc(ctx, hash, errorABI)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBlockIndexer_WaitForTransactionSuccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForTransactionSuccess'
type MockBlockIndexer_WaitForTransactionSuccess_Call struct {
	*mock.Call
}

// WaitForTransactionSuccess is a helper method to define mock.On call
//   - ctx context.Context
//   - hash pldtypes.Bytes32
//   - errorABI abi.ABI
func (_e *MockBlockIndexer_Expecter) WaitForTransactionSuccess(ctx interface{}, hash interface{}, errorABI interface{}) *MockBlockIndexer_WaitForTransactionSuccess_Call {
	return &MockBlockIndexer_WaitForTransactionSuccess_Call{Call: _e.mock.On("WaitForTransactionSuccess", ctx, hash, errorABI)}
}

func (_c *MockBlockIndexer_WaitForTransactionSuccess_Call) Run(run func(ctx context.Context, hash pldtypes.Bytes32, errorABI abi.ABI)) *MockBlockIndexer_WaitForTransactionSuccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 pldtypes.Bytes32
		if args[1] != nil {
			arg1 = args[1].(pldtypes.Bytes32)
		}
		var arg2 abi.ABI
		if args[2] != nil {
			arg2 = args[2].(abi.ABI)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockBlockIndexer_WaitForTransactionSuccess_Call) Return(indexedTransaction *pldapi.IndexedTransaction, err error) *MockBlockIndexer_WaitForTransactionSuccess_Call {
	_c.Call.Return(indexedTransaction, err)
	return _c
}

func (_c *MockBlockIndexer_WaitForTransactionSuccess_Call) RunAndReturn(run func(ctx context.Context, hash pldtypes.Bytes32, errorABI abi.ABI) (*pldapi.IndexedTransaction, error)) *MockBlockIndexer_WaitForTransactionSuccess_Call {
	_c.Call.Return(run)
	return _c
}
