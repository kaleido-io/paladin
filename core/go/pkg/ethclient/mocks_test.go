// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ethclient

import (
	"context"

	"github.com/LF-Decentralized-Trust-labs/paladin/sdk/go/pkg/pldtypes"
	"github.com/LF-Decentralized-Trust-labs/paladin/toolkit/pkg/prototk"
	"github.com/LF-Decentralized-Trust-labs/paladin/toolkit/pkg/signerapi"
	"github.com/hyperledger/firefly-signer/pkg/abi"
	"github.com/hyperledger/firefly-signer/pkg/ethsigner"
	"github.com/hyperledger/firefly-signer/pkg/ethtypes"
	mock "github.com/stretchr/testify/mock"
)

// NewMockEthClient creates a new instance of MockEthClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEthClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEthClient {
	mock := &MockEthClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEthClient is an autogenerated mock type for the EthClient type
type MockEthClient struct {
	mock.Mock
}

type MockEthClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEthClient) EXPECT() *MockEthClient_Expecter {
	return &MockEthClient_Expecter{mock: &_m.Mock}
}

// CallContractNoResolve provides a mock function for the type MockEthClient
func (_mock *MockEthClient) CallContractNoResolve(ctx context.Context, tx *ethsigner.Transaction, block string, opts ...CallOption) (CallResult, error) {
	// CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tx, block)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CallContractNoResolve")
	}

	var r0 CallResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ethsigner.Transaction, string, ...CallOption) (CallResult, error)); ok {
		return returnFunc(ctx, tx, block, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ethsigner.Transaction, string, ...CallOption) CallResult); ok {
		r0 = returnFunc(ctx, tx, block, opts...)
	} else {
		r0 = ret.Get(0).(CallResult)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ethsigner.Transaction, string, ...CallOption) error); ok {
		r1 = returnFunc(ctx, tx, block, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEthClient_CallContractNoResolve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallContractNoResolve'
type MockEthClient_CallContractNoResolve_Call struct {
	*mock.Call
}

// CallContractNoResolve is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *ethsigner.Transaction
//   - block string
//   - opts ...CallOption
func (_e *MockEthClient_Expecter) CallContractNoResolve(ctx interface{}, tx interface{}, block interface{}, opts ...interface{}) *MockEthClient_CallContractNoResolve_Call {
	return &MockEthClient_CallContractNoResolve_Call{Call: _e.mock.On("CallContractNoResolve",
		append([]interface{}{ctx, tx, block}, opts...)...)}
}

func (_c *MockEthClient_CallContractNoResolve_Call) Run(run func(ctx context.Context, tx *ethsigner.Transaction, block string, opts ...CallOption)) *MockEthClient_CallContractNoResolve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ethsigner.Transaction
		if args[1] != nil {
			arg1 = args[1].(*ethsigner.Transaction)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []CallOption
		variadicArgs := make([]CallOption, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(CallOption)
			}
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockEthClient_CallContractNoResolve_Call) Return(res CallResult, err error) *MockEthClient_CallContractNoResolve_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockEthClient_CallContractNoResolve_Call) RunAndReturn(run func(ctx context.Context, tx *ethsigner.Transaction, block string, opts ...CallOption) (CallResult, error)) *MockEthClient_CallContractNoResolve_Call {
	_c.Call.Return(run)
	return _c
}

// ChainID provides a mock function for the type MockEthClient
func (_mock *MockEthClient) ChainID() int64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ChainID")
	}

	var r0 int64
	if returnFunc, ok := ret.Get(0).(func() int64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int64)
	}
	return r0
}

// MockEthClient_ChainID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChainID'
type MockEthClient_ChainID_Call struct {
	*mock.Call
}

// ChainID is a helper method to define mock.On call
func (_e *MockEthClient_Expecter) ChainID() *MockEthClient_ChainID_Call {
	return &MockEthClient_ChainID_Call{Call: _e.mock.On("ChainID")}
}

func (_c *MockEthClient_ChainID_Call) Run(run func()) *MockEthClient_ChainID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEthClient_ChainID_Call) Return(n int64) *MockEthClient_ChainID_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockEthClient_ChainID_Call) RunAndReturn(run func() int64) *MockEthClient_ChainID_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function for the type MockEthClient
func (_mock *MockEthClient) Close() {
	_mock.Called()
	return
}

// MockEthClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockEthClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockEthClient_Expecter) Close() *MockEthClient_Close_Call {
	return &MockEthClient_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockEthClient_Close_Call) Run(run func()) *MockEthClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEthClient_Close_Call) Return() *MockEthClient_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEthClient_Close_Call) RunAndReturn(run func()) *MockEthClient_Close_Call {
	_c.Run(run)
	return _c
}

// EstimateGasNoResolve provides a mock function for the type MockEthClient
func (_mock *MockEthClient) EstimateGasNoResolve(ctx context.Context, tx *ethsigner.Transaction, opts ...CallOption) (EstimateGasResult, error) {
	// CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tx)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EstimateGasNoResolve")
	}

	var r0 EstimateGasResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ethsigner.Transaction, ...CallOption) (EstimateGasResult, error)); ok {
		return returnFunc(ctx, tx, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ethsigner.Transaction, ...CallOption) EstimateGasResult); ok {
		r0 = returnFunc(ctx, tx, opts...)
	} else {
		r0 = ret.Get(0).(EstimateGasResult)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ethsigner.Transaction, ...CallOption) error); ok {
		r1 = returnFunc(ctx, tx, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEthClient_EstimateGasNoResolve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EstimateGasNoResolve'
type MockEthClient_EstimateGasNoResolve_Call struct {
	*mock.Call
}

// EstimateGasNoResolve is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *ethsigner.Transaction
//   - opts ...CallOption
func (_e *MockEthClient_Expecter) EstimateGasNoResolve(ctx interface{}, tx interface{}, opts ...interface{}) *MockEthClient_EstimateGasNoResolve_Call {
	return &MockEthClient_EstimateGasNoResolve_Call{Call: _e.mock.On("EstimateGasNoResolve",
		append([]interface{}{ctx, tx}, opts...)...)}
}

func (_c *MockEthClient_EstimateGasNoResolve_Call) Run(run func(ctx context.Context, tx *ethsigner.Transaction, opts ...CallOption)) *MockEthClient_EstimateGasNoResolve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ethsigner.Transaction
		if args[1] != nil {
			arg1 = args[1].(*ethsigner.Transaction)
		}
		var arg2 []CallOption
		variadicArgs := make([]CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockEthClient_EstimateGasNoResolve_Call) Return(res EstimateGasResult, err error) *MockEthClient_EstimateGasNoResolve_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockEthClient_EstimateGasNoResolve_Call) RunAndReturn(run func(ctx context.Context, tx *ethsigner.Transaction, opts ...CallOption) (EstimateGasResult, error)) *MockEthClient_EstimateGasNoResolve_Call {
	_c.Call.Return(run)
	return _c
}

// GasPrice provides a mock function for the type MockEthClient
func (_mock *MockEthClient) GasPrice(ctx context.Context) (*pldtypes.HexUint256, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GasPrice")
	}

	var r0 *pldtypes.HexUint256
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*pldtypes.HexUint256, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *pldtypes.HexUint256); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldtypes.HexUint256)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEthClient_GasPrice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GasPrice'
type MockEthClient_GasPrice_Call struct {
	*mock.Call
}

// GasPrice is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockEthClient_Expecter) GasPrice(ctx interface{}) *MockEthClient_GasPrice_Call {
	return &MockEthClient_GasPrice_Call{Call: _e.mock.On("GasPrice", ctx)}
}

func (_c *MockEthClient_GasPrice_Call) Run(run func(ctx context.Context)) *MockEthClient_GasPrice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockEthClient_GasPrice_Call) Return(gasPrice *pldtypes.HexUint256, err error) *MockEthClient_GasPrice_Call {
	_c.Call.Return(gasPrice, err)
	return _c
}

func (_c *MockEthClient_GasPrice_Call) RunAndReturn(run func(ctx context.Context) (*pldtypes.HexUint256, error)) *MockEthClient_GasPrice_Call {
	_c.Call.Return(run)
	return _c
}

// GetBalance provides a mock function for the type MockEthClient
func (_mock *MockEthClient) GetBalance(ctx context.Context, address pldtypes.EthAddress, block string) (*pldtypes.HexUint256, error) {
	ret := _mock.Called(ctx, address, block)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 *pldtypes.HexUint256
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, pldtypes.EthAddress, string) (*pldtypes.HexUint256, error)); ok {
		return returnFunc(ctx, address, block)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, pldtypes.EthAddress, string) *pldtypes.HexUint256); ok {
		r0 = returnFunc(ctx, address, block)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldtypes.HexUint256)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, pldtypes.EthAddress, string) error); ok {
		r1 = returnFunc(ctx, address, block)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEthClient_GetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalance'
type MockEthClient_GetBalance_Call struct {
	*mock.Call
}

// GetBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - address pldtypes.EthAddress
//   - block string
func (_e *MockEthClient_Expecter) GetBalance(ctx interface{}, address interface{}, block interface{}) *MockEthClient_GetBalance_Call {
	return &MockEthClient_GetBalance_Call{Call: _e.mock.On("GetBalance", ctx, address, block)}
}

func (_c *MockEthClient_GetBalance_Call) Run(run func(ctx context.Context, address pldtypes.EthAddress, block string)) *MockEthClient_GetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 pldtypes.EthAddress
		if args[1] != nil {
			arg1 = args[1].(pldtypes.EthAddress)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockEthClient_GetBalance_Call) Return(balance *pldtypes.HexUint256, err error) *MockEthClient_GetBalance_Call {
	_c.Call.Return(balance, err)
	return _c
}

func (_c *MockEthClient_GetBalance_Call) RunAndReturn(run func(ctx context.Context, address pldtypes.EthAddress, block string) (*pldtypes.HexUint256, error)) *MockEthClient_GetBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionCount provides a mock function for the type MockEthClient
func (_mock *MockEthClient) GetTransactionCount(ctx context.Context, fromAddr pldtypes.EthAddress) (*pldtypes.HexUint64, error) {
	ret := _mock.Called(ctx, fromAddr)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionCount")
	}

	var r0 *pldtypes.HexUint64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, pldtypes.EthAddress) (*pldtypes.HexUint64, error)); ok {
		return returnFunc(ctx, fromAddr)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, pldtypes.EthAddress) *pldtypes.HexUint64); ok {
		r0 = returnFunc(ctx, fromAddr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldtypes.HexUint64)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, pldtypes.EthAddress) error); ok {
		r1 = returnFunc(ctx, fromAddr)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEthClient_GetTransactionCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionCount'
type MockEthClient_GetTransactionCount_Call struct {
	*mock.Call
}

// GetTransactionCount is a helper method to define mock.On call
//   - ctx context.Context
//   - fromAddr pldtypes.EthAddress
func (_e *MockEthClient_Expecter) GetTransactionCount(ctx interface{}, fromAddr interface{}) *MockEthClient_GetTransactionCount_Call {
	return &MockEthClient_GetTransactionCount_Call{Call: _e.mock.On("GetTransactionCount", ctx, fromAddr)}
}

func (_c *MockEthClient_GetTransactionCount_Call) Run(run func(ctx context.Context, fromAddr pldtypes.EthAddress)) *MockEthClient_GetTransactionCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 pldtypes.EthAddress
		if args[1] != nil {
			arg1 = args[1].(pldtypes.EthAddress)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEthClient_GetTransactionCount_Call) Return(transactionCount *pldtypes.HexUint64, err error) *MockEthClient_GetTransactionCount_Call {
	_c.Call.Return(transactionCount, err)
	return _c
}

func (_c *MockEthClient_GetTransactionCount_Call) RunAndReturn(run func(ctx context.Context, fromAddr pldtypes.EthAddress) (*pldtypes.HexUint64, error)) *MockEthClient_GetTransactionCount_Call {
	_c.Call.Return(run)
	return _c
}

// SendRawTransaction provides a mock function for the type MockEthClient
func (_mock *MockEthClient) SendRawTransaction(ctx context.Context, rawTX pldtypes.HexBytes) (*pldtypes.Bytes32, error) {
	ret := _mock.Called(ctx, rawTX)

	if len(ret) == 0 {
		panic("no return value specified for SendRawTransaction")
	}

	var r0 *pldtypes.Bytes32
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, pldtypes.HexBytes) (*pldtypes.Bytes32, error)); ok {
		return returnFunc(ctx, rawTX)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, pldtypes.HexBytes) *pldtypes.Bytes32); ok {
		r0 = returnFunc(ctx, rawTX)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldtypes.Bytes32)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, pldtypes.HexBytes) error); ok {
		r1 = returnFunc(ctx, rawTX)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEthClient_SendRawTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendRawTransaction'
type MockEthClient_SendRawTransaction_Call struct {
	*mock.Call
}

// SendRawTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - rawTX pldtypes.HexBytes
func (_e *MockEthClient_Expecter) SendRawTransaction(ctx interface{}, rawTX interface{}) *MockEthClient_SendRawTransaction_Call {
	return &MockEthClient_SendRawTransaction_Call{Call: _e.mock.On("SendRawTransaction", ctx, rawTX)}
}

func (_c *MockEthClient_SendRawTransaction_Call) Run(run func(ctx context.Context, rawTX pldtypes.HexBytes)) *MockEthClient_SendRawTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 pldtypes.HexBytes
		if args[1] != nil {
			arg1 = args[1].(pldtypes.HexBytes)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEthClient_SendRawTransaction_Call) Return(bytes32 *pldtypes.Bytes32, err error) *MockEthClient_SendRawTransaction_Call {
	_c.Call.Return(bytes32, err)
	return _c
}

func (_c *MockEthClient_SendRawTransaction_Call) RunAndReturn(run func(ctx context.Context, rawTX pldtypes.HexBytes) (*pldtypes.Bytes32, error)) *MockEthClient_SendRawTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEthClientWithKeyManager creates a new instance of MockEthClientWithKeyManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEthClientWithKeyManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEthClientWithKeyManager {
	mock := &MockEthClientWithKeyManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEthClientWithKeyManager is an autogenerated mock type for the EthClientWithKeyManager type
type MockEthClientWithKeyManager struct {
	mock.Mock
}

type MockEthClientWithKeyManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEthClientWithKeyManager) EXPECT() *MockEthClientWithKeyManager_Expecter {
	return &MockEthClientWithKeyManager_Expecter{mock: &_m.Mock}
}

// ABI provides a mock function for the type MockEthClientWithKeyManager
func (_mock *MockEthClientWithKeyManager) ABI(ctx context.Context, a abi.ABI) (ABIClient, error) {
	ret := _mock.Called(ctx, a)

	if len(ret) == 0 {
		panic("no return value specified for ABI")
	}

	var r0 ABIClient
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, abi.ABI) (ABIClient, error)); ok {
		return returnFunc(ctx, a)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, abi.ABI) ABIClient); ok {
		r0 = returnFunc(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ABIClient)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, abi.ABI) error); ok {
		r1 = returnFunc(ctx, a)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEthClientWithKeyManager_ABI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ABI'
type MockEthClientWithKeyManager_ABI_Call struct {
	*mock.Call
}

// ABI is a helper method to define mock.On call
//   - ctx context.Context
//   - a abi.ABI
func (_e *MockEthClientWithKeyManager_Expecter) ABI(ctx interface{}, a interface{}) *MockEthClientWithKeyManager_ABI_Call {
	return &MockEthClientWithKeyManager_ABI_Call{Call: _e.mock.On("ABI", ctx, a)}
}

func (_c *MockEthClientWithKeyManager_ABI_Call) Run(run func(ctx context.Context, a abi.ABI)) *MockEthClientWithKeyManager_ABI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 abi.ABI
		if args[1] != nil {
			arg1 = args[1].(abi.ABI)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEthClientWithKeyManager_ABI_Call) Return(aBIClient ABIClient, err error) *MockEthClientWithKeyManager_ABI_Call {
	_c.Call.Return(aBIClient, err)
	return _c
}

func (_c *MockEthClientWithKeyManager_ABI_Call) RunAndReturn(run func(ctx context.Context, a abi.ABI) (ABIClient, error)) *MockEthClientWithKeyManager_ABI_Call {
	_c.Call.Return(run)
	return _c
}

// ABIConstructor provides a mock function for the type MockEthClientWithKeyManager
func (_mock *MockEthClientWithKeyManager) ABIConstructor(ctx context.Context, constructorABI *abi.Entry, bytecode pldtypes.HexBytes) (ABIFunctionClient, error) {
	ret := _mock.Called(ctx, constructorABI, bytecode)

	if len(ret) == 0 {
		panic("no return value specified for ABIConstructor")
	}

	var r0 ABIFunctionClient
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *abi.Entry, pldtypes.HexBytes) (ABIFunctionClient, error)); ok {
		return returnFunc(ctx, constructorABI, bytecode)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *abi.Entry, pldtypes.HexBytes) ABIFunctionClient); ok {
		r0 = returnFunc(ctx, constructorABI, bytecode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ABIFunctionClient)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *abi.Entry, pldtypes.HexBytes) error); ok {
		r1 = returnFunc(ctx, constructorABI, bytecode)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEthClientWithKeyManager_ABIConstructor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ABIConstructor'
type MockEthClientWithKeyManager_ABIConstructor_Call struct {
	*mock.Call
}

// ABIConstructor is a helper method to define mock.On call
//   - ctx context.Context
//   - constructorABI *abi.Entry
//   - bytecode pldtypes.HexBytes
func (_e *MockEthClientWithKeyManager_Expecter) ABIConstructor(ctx interface{}, constructorABI interface{}, bytecode interface{}) *MockEthClientWithKeyManager_ABIConstructor_Call {
	return &MockEthClientWithKeyManager_ABIConstructor_Call{Call: _e.mock.On("ABIConstructor", ctx, constructorABI, bytecode)}
}

func (_c *MockEthClientWithKeyManager_ABIConstructor_Call) Run(run func(ctx context.Context, constructorABI *abi.Entry, bytecode pldtypes.HexBytes)) *MockEthClientWithKeyManager_ABIConstructor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *abi.Entry
		if args[1] != nil {
			arg1 = args[1].(*abi.Entry)
		}
		var arg2 pldtypes.HexBytes
		if args[2] != nil {
			arg2 = args[2].(pldtypes.HexBytes)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockEthClientWithKeyManager_ABIConstructor_Call) Return(aBIFunctionClient ABIFunctionClient, err error) *MockEthClientWithKeyManager_ABIConstructor_Call {
	_c.Call.Return(aBIFunctionClient, err)
	return _c
}

func (_c *MockEthClientWithKeyManager_ABIConstructor_Call) RunAndReturn(run func(ctx context.Context, constructorABI *abi.Entry, bytecode pldtypes.HexBytes) (ABIFunctionClient, error)) *MockEthClientWithKeyManager_ABIConstructor_Call {
	_c.Call.Return(run)
	return _c
}

// ABIFunction provides a mock function for the type MockEthClientWithKeyManager
func (_mock *MockEthClientWithKeyManager) ABIFunction(ctx context.Context, functionABI *abi.Entry) (ABIFunctionClient, error) {
	ret := _mock.Called(ctx, functionABI)

	if len(ret) == 0 {
		panic("no return value specified for ABIFunction")
	}

	var r0 ABIFunctionClient
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *abi.Entry) (ABIFunctionClient, error)); ok {
		return returnFunc(ctx, functionABI)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *abi.Entry) ABIFunctionClient); ok {
		r0 = returnFunc(ctx, functionABI)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ABIFunctionClient)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *abi.Entry) error); ok {
		r1 = returnFunc(ctx, functionABI)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEthClientWithKeyManager_ABIFunction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ABIFunction'
type MockEthClientWithKeyManager_ABIFunction_Call struct {
	*mock.Call
}

// ABIFunction is a helper method to define mock.On call
//   - ctx context.Context
//   - functionABI *abi.Entry
func (_e *MockEthClientWithKeyManager_Expecter) ABIFunction(ctx interface{}, functionABI interface{}) *MockEthClientWithKeyManager_ABIFunction_Call {
	return &MockEthClientWithKeyManager_ABIFunction_Call{Call: _e.mock.On("ABIFunction", ctx, functionABI)}
}

func (_c *MockEthClientWithKeyManager_ABIFunction_Call) Run(run func(ctx context.Context, functionABI *abi.Entry)) *MockEthClientWithKeyManager_ABIFunction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *abi.Entry
		if args[1] != nil {
			arg1 = args[1].(*abi.Entry)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEthClientWithKeyManager_ABIFunction_Call) Return(aBIFunctionClient ABIFunctionClient, err error) *MockEthClientWithKeyManager_ABIFunction_Call {
	_c.Call.Return(aBIFunctionClient, err)
	return _c
}

func (_c *MockEthClientWithKeyManager_ABIFunction_Call) RunAndReturn(run func(ctx context.Context, functionABI *abi.Entry) (ABIFunctionClient, error)) *MockEthClientWithKeyManager_ABIFunction_Call {
	_c.Call.Return(run)
	return _c
}

// ABIJSON provides a mock function for the type MockEthClientWithKeyManager
func (_mock *MockEthClientWithKeyManager) ABIJSON(ctx context.Context, abiJson []byte) (ABIClient, error) {
	ret := _mock.Called(ctx, abiJson)

	if len(ret) == 0 {
		panic("no return value specified for ABIJSON")
	}

	var r0 ABIClient
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte) (ABIClient, error)); ok {
		return returnFunc(ctx, abiJson)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte) ABIClient); ok {
		r0 = returnFunc(ctx, abiJson)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ABIClient)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = returnFunc(ctx, abiJson)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEthClientWithKeyManager_ABIJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ABIJSON'
type MockEthClientWithKeyManager_ABIJSON_Call struct {
	*mock.Call
}

// ABIJSON is a helper method to define mock.On call
//   - ctx context.Context
//   - abiJson []byte
func (_e *MockEthClientWithKeyManager_Expecter) ABIJSON(ctx interface{}, abiJson interface{}) *MockEthClientWithKeyManager_ABIJSON_Call {
	return &MockEthClientWithKeyManager_ABIJSON_Call{Call: _e.mock.On("ABIJSON", ctx, abiJson)}
}

func (_c *MockEthClientWithKeyManager_ABIJSON_Call) Run(run func(ctx context.Context, abiJson []byte)) *MockEthClientWithKeyManager_ABIJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEthClientWithKeyManager_ABIJSON_Call) Return(aBIClient ABIClient, err error) *MockEthClientWithKeyManager_ABIJSON_Call {
	_c.Call.Return(aBIClient, err)
	return _c
}

func (_c *MockEthClientWithKeyManager_ABIJSON_Call) RunAndReturn(run func(ctx context.Context, abiJson []byte) (ABIClient, error)) *MockEthClientWithKeyManager_ABIJSON_Call {
	_c.Call.Return(run)
	return _c
}

// BuildRawTransaction provides a mock function for the type MockEthClientWithKeyManager
func (_mock *MockEthClientWithKeyManager) BuildRawTransaction(ctx context.Context, txVersion EthTXVersion, from string, tx *ethsigner.Transaction, opts ...CallOption) (pldtypes.HexBytes, error) {
	// CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, txVersion, from, tx)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BuildRawTransaction")
	}

	var r0 pldtypes.HexBytes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, EthTXVersion, string, *ethsigner.Transaction, ...CallOption) (pldtypes.HexBytes, error)); ok {
		return returnFunc(ctx, txVersion, from, tx, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, EthTXVersion, string, *ethsigner.Transaction, ...CallOption) pldtypes.HexBytes); ok {
		r0 = returnFunc(ctx, txVersion, from, tx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pldtypes.HexBytes)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, EthTXVersion, string, *ethsigner.Transaction, ...CallOption) error); ok {
		r1 = returnFunc(ctx, txVersion, from, tx, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEthClientWithKeyManager_BuildRawTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildRawTransaction'
type MockEthClientWithKeyManager_BuildRawTransaction_Call struct {
	*mock.Call
}

// BuildRawTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - txVersion EthTXVersion
//   - from string
//   - tx *ethsigner.Transaction
//   - opts ...CallOption
func (_e *MockEthClientWithKeyManager_Expecter) BuildRawTransaction(ctx interface{}, txVersion interface{}, from interface{}, tx interface{}, opts ...interface{}) *MockEthClientWithKeyManager_BuildRawTransaction_Call {
	return &MockEthClientWithKeyManager_BuildRawTransaction_Call{Call: _e.mock.On("BuildRawTransaction",
		append([]interface{}{ctx, txVersion, from, tx}, opts...)...)}
}

func (_c *MockEthClientWithKeyManager_BuildRawTransaction_Call) Run(run func(ctx context.Context, txVersion EthTXVersion, from string, tx *ethsigner.Transaction, opts ...CallOption)) *MockEthClientWithKeyManager_BuildRawTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 EthTXVersion
		if args[1] != nil {
			arg1 = args[1].(EthTXVersion)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 *ethsigner.Transaction
		if args[3] != nil {
			arg3 = args[3].(*ethsigner.Transaction)
		}
		var arg4 []CallOption
		variadicArgs := make([]CallOption, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(CallOption)
			}
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockEthClientWithKeyManager_BuildRawTransaction_Call) Return(hexBytes pldtypes.HexBytes, err error) *MockEthClientWithKeyManager_BuildRawTransaction_Call {
	_c.Call.Return(hexBytes, err)
	return _c
}

func (_c *MockEthClientWithKeyManager_BuildRawTransaction_Call) RunAndReturn(run func(ctx context.Context, txVersion EthTXVersion, from string, tx *ethsigner.Transaction, opts ...CallOption) (pldtypes.HexBytes, error)) *MockEthClientWithKeyManager_BuildRawTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// CallContract provides a mock function for the type MockEthClientWithKeyManager
func (_mock *MockEthClientWithKeyManager) CallContract(ctx context.Context, from *string, tx *ethsigner.Transaction, block string, opts ...CallOption) (CallResult, error) {
	// CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, from, tx, block)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CallContract")
	}

	var r0 CallResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *string, *ethsigner.Transaction, string, ...CallOption) (CallResult, error)); ok {
		return returnFunc(ctx, from, tx, block, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *string, *ethsigner.Transaction, string, ...CallOption) CallResult); ok {
		r0 = returnFunc(ctx, from, tx, block, opts...)
	} else {
		r0 = ret.Get(0).(CallResult)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *string, *ethsigner.Transaction, string, ...CallOption) error); ok {
		r1 = returnFunc(ctx, from, tx, block, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEthClientWithKeyManager_CallContract_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallContract'
type MockEthClientWithKeyManager_CallContract_Call struct {
	*mock.Call
}

// CallContract is a helper method to define mock.On call
//   - ctx context.Context
//   - from *string
//   - tx *ethsigner.Transaction
//   - block string
//   - opts ...CallOption
func (_e *MockEthClientWithKeyManager_Expecter) CallContract(ctx interface{}, from interface{}, tx interface{}, block interface{}, opts ...interface{}) *MockEthClientWithKeyManager_CallContract_Call {
	return &MockEthClientWithKeyManager_CallContract_Call{Call: _e.mock.On("CallContract",
		append([]interface{}{ctx, from, tx, block}, opts...)...)}
}

func (_c *MockEthClientWithKeyManager_CallContract_Call) Run(run func(ctx context.Context, from *string, tx *ethsigner.Transaction, block string, opts ...CallOption)) *MockEthClientWithKeyManager_CallContract_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *string
		if args[1] != nil {
			arg1 = args[1].(*string)
		}
		var arg2 *ethsigner.Transaction
		if args[2] != nil {
			arg2 = args[2].(*ethsigner.Transaction)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 []CallOption
		variadicArgs := make([]CallOption, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(CallOption)
			}
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockEthClientWithKeyManager_CallContract_Call) Return(res CallResult, err error) *MockEthClientWithKeyManager_CallContract_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockEthClientWithKeyManager_CallContract_Call) RunAndReturn(run func(ctx context.Context, from *string, tx *ethsigner.Transaction, block string, opts ...CallOption) (CallResult, error)) *MockEthClientWithKeyManager_CallContract_Call {
	_c.Call.Return(run)
	return _c
}

// CallContractNoResolve provides a mock function for the type MockEthClientWithKeyManager
func (_mock *MockEthClientWithKeyManager) CallContractNoResolve(ctx context.Context, tx *ethsigner.Transaction, block string, opts ...CallOption) (CallResult, error) {
	// CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tx, block)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CallContractNoResolve")
	}

	var r0 CallResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ethsigner.Transaction, string, ...CallOption) (CallResult, error)); ok {
		return returnFunc(ctx, tx, block, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ethsigner.Transaction, string, ...CallOption) CallResult); ok {
		r0 = returnFunc(ctx, tx, block, opts...)
	} else {
		r0 = ret.Get(0).(CallResult)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ethsigner.Transaction, string, ...CallOption) error); ok {
		r1 = returnFunc(ctx, tx, block, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEthClientWithKeyManager_CallContractNoResolve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallContractNoResolve'
type MockEthClientWithKeyManager_CallContractNoResolve_Call struct {
	*mock.Call
}

// CallContractNoResolve is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *ethsigner.Transaction
//   - block string
//   - opts ...CallOption
func (_e *MockEthClientWithKeyManager_Expecter) CallContractNoResolve(ctx interface{}, tx interface{}, block interface{}, opts ...interface{}) *MockEthClientWithKeyManager_CallContractNoResolve_Call {
	return &MockEthClientWithKeyManager_CallContractNoResolve_Call{Call: _e.mock.On("CallContractNoResolve",
		append([]interface{}{ctx, tx, block}, opts...)...)}
}

func (_c *MockEthClientWithKeyManager_CallContractNoResolve_Call) Run(run func(ctx context.Context, tx *ethsigner.Transaction, block string, opts ...CallOption)) *MockEthClientWithKeyManager_CallContractNoResolve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ethsigner.Transaction
		if args[1] != nil {
			arg1 = args[1].(*ethsigner.Transaction)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []CallOption
		variadicArgs := make([]CallOption, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(CallOption)
			}
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockEthClientWithKeyManager_CallContractNoResolve_Call) Return(res CallResult, err error) *MockEthClientWithKeyManager_CallContractNoResolve_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockEthClientWithKeyManager_CallContractNoResolve_Call) RunAndReturn(run func(ctx context.Context, tx *ethsigner.Transaction, block string, opts ...CallOption) (CallResult, error)) *MockEthClientWithKeyManager_CallContractNoResolve_Call {
	_c.Call.Return(run)
	return _c
}

// ChainID provides a mock function for the type MockEthClientWithKeyManager
func (_mock *MockEthClientWithKeyManager) ChainID() int64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ChainID")
	}

	var r0 int64
	if returnFunc, ok := ret.Get(0).(func() int64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int64)
	}
	return r0
}

// MockEthClientWithKeyManager_ChainID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChainID'
type MockEthClientWithKeyManager_ChainID_Call struct {
	*mock.Call
}

// ChainID is a helper method to define mock.On call
func (_e *MockEthClientWithKeyManager_Expecter) ChainID() *MockEthClientWithKeyManager_ChainID_Call {
	return &MockEthClientWithKeyManager_ChainID_Call{Call: _e.mock.On("ChainID")}
}

func (_c *MockEthClientWithKeyManager_ChainID_Call) Run(run func()) *MockEthClientWithKeyManager_ChainID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEthClientWithKeyManager_ChainID_Call) Return(n int64) *MockEthClientWithKeyManager_ChainID_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockEthClientWithKeyManager_ChainID_Call) RunAndReturn(run func() int64) *MockEthClientWithKeyManager_ChainID_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function for the type MockEthClientWithKeyManager
func (_mock *MockEthClientWithKeyManager) Close() {
	_mock.Called()
	return
}

// MockEthClientWithKeyManager_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockEthClientWithKeyManager_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockEthClientWithKeyManager_Expecter) Close() *MockEthClientWithKeyManager_Close_Call {
	return &MockEthClientWithKeyManager_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockEthClientWithKeyManager_Close_Call) Run(run func()) *MockEthClientWithKeyManager_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEthClientWithKeyManager_Close_Call) Return() *MockEthClientWithKeyManager_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEthClientWithKeyManager_Close_Call) RunAndReturn(run func()) *MockEthClientWithKeyManager_Close_Call {
	_c.Run(run)
	return _c
}

// EstimateGas provides a mock function for the type MockEthClientWithKeyManager
func (_mock *MockEthClientWithKeyManager) EstimateGas(ctx context.Context, from *string, tx *ethsigner.Transaction, opts ...CallOption) (EstimateGasResult, error) {
	// CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, from, tx)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EstimateGas")
	}

	var r0 EstimateGasResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *string, *ethsigner.Transaction, ...CallOption) (EstimateGasResult, error)); ok {
		return returnFunc(ctx, from, tx, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *string, *ethsigner.Transaction, ...CallOption) EstimateGasResult); ok {
		r0 = returnFunc(ctx, from, tx, opts...)
	} else {
		r0 = ret.Get(0).(EstimateGasResult)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *string, *ethsigner.Transaction, ...CallOption) error); ok {
		r1 = returnFunc(ctx, from, tx, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEthClientWithKeyManager_EstimateGas_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EstimateGas'
type MockEthClientWithKeyManager_EstimateGas_Call struct {
	*mock.Call
}

// EstimateGas is a helper method to define mock.On call
//   - ctx context.Context
//   - from *string
//   - tx *ethsigner.Transaction
//   - opts ...CallOption
func (_e *MockEthClientWithKeyManager_Expecter) EstimateGas(ctx interface{}, from interface{}, tx interface{}, opts ...interface{}) *MockEthClientWithKeyManager_EstimateGas_Call {
	return &MockEthClientWithKeyManager_EstimateGas_Call{Call: _e.mock.On("EstimateGas",
		append([]interface{}{ctx, from, tx}, opts...)...)}
}

func (_c *MockEthClientWithKeyManager_EstimateGas_Call) Run(run func(ctx context.Context, from *string, tx *ethsigner.Transaction, opts ...CallOption)) *MockEthClientWithKeyManager_EstimateGas_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *string
		if args[1] != nil {
			arg1 = args[1].(*string)
		}
		var arg2 *ethsigner.Transaction
		if args[2] != nil {
			arg2 = args[2].(*ethsigner.Transaction)
		}
		var arg3 []CallOption
		variadicArgs := make([]CallOption, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(CallOption)
			}
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockEthClientWithKeyManager_EstimateGas_Call) Return(res EstimateGasResult, err error) *MockEthClientWithKeyManager_EstimateGas_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockEthClientWithKeyManager_EstimateGas_Call) RunAndReturn(run func(ctx context.Context, from *string, tx *ethsigner.Transaction, opts ...CallOption) (EstimateGasResult, error)) *MockEthClientWithKeyManager_EstimateGas_Call {
	_c.Call.Return(run)
	return _c
}

// EstimateGasNoResolve provides a mock function for the type MockEthClientWithKeyManager
func (_mock *MockEthClientWithKeyManager) EstimateGasNoResolve(ctx context.Context, tx *ethsigner.Transaction, opts ...CallOption) (EstimateGasResult, error) {
	// CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tx)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EstimateGasNoResolve")
	}

	var r0 EstimateGasResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ethsigner.Transaction, ...CallOption) (EstimateGasResult, error)); ok {
		return returnFunc(ctx, tx, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ethsigner.Transaction, ...CallOption) EstimateGasResult); ok {
		r0 = returnFunc(ctx, tx, opts...)
	} else {
		r0 = ret.Get(0).(EstimateGasResult)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ethsigner.Transaction, ...CallOption) error); ok {
		r1 = returnFunc(ctx, tx, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEthClientWithKeyManager_EstimateGasNoResolve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EstimateGasNoResolve'
type MockEthClientWithKeyManager_EstimateGasNoResolve_Call struct {
	*mock.Call
}

// EstimateGasNoResolve is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *ethsigner.Transaction
//   - opts ...CallOption
func (_e *MockEthClientWithKeyManager_Expecter) EstimateGasNoResolve(ctx interface{}, tx interface{}, opts ...interface{}) *MockEthClientWithKeyManager_EstimateGasNoResolve_Call {
	return &MockEthClientWithKeyManager_EstimateGasNoResolve_Call{Call: _e.mock.On("EstimateGasNoResolve",
		append([]interface{}{ctx, tx}, opts...)...)}
}

func (_c *MockEthClientWithKeyManager_EstimateGasNoResolve_Call) Run(run func(ctx context.Context, tx *ethsigner.Transaction, opts ...CallOption)) *MockEthClientWithKeyManager_EstimateGasNoResolve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ethsigner.Transaction
		if args[1] != nil {
			arg1 = args[1].(*ethsigner.Transaction)
		}
		var arg2 []CallOption
		variadicArgs := make([]CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockEthClientWithKeyManager_EstimateGasNoResolve_Call) Return(res EstimateGasResult, err error) *MockEthClientWithKeyManager_EstimateGasNoResolve_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockEthClientWithKeyManager_EstimateGasNoResolve_Call) RunAndReturn(run func(ctx context.Context, tx *ethsigner.Transaction, opts ...CallOption) (EstimateGasResult, error)) *MockEthClientWithKeyManager_EstimateGasNoResolve_Call {
	_c.Call.Return(run)
	return _c
}

// GasPrice provides a mock function for the type MockEthClientWithKeyManager
func (_mock *MockEthClientWithKeyManager) GasPrice(ctx context.Context) (*pldtypes.HexUint256, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GasPrice")
	}

	var r0 *pldtypes.HexUint256
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*pldtypes.HexUint256, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *pldtypes.HexUint256); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldtypes.HexUint256)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEthClientWithKeyManager_GasPrice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GasPrice'
type MockEthClientWithKeyManager_GasPrice_Call struct {
	*mock.Call
}

// GasPrice is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockEthClientWithKeyManager_Expecter) GasPrice(ctx interface{}) *MockEthClientWithKeyManager_GasPrice_Call {
	return &MockEthClientWithKeyManager_GasPrice_Call{Call: _e.mock.On("GasPrice", ctx)}
}

func (_c *MockEthClientWithKeyManager_GasPrice_Call) Run(run func(ctx context.Context)) *MockEthClientWithKeyManager_GasPrice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockEthClientWithKeyManager_GasPrice_Call) Return(gasPrice *pldtypes.HexUint256, err error) *MockEthClientWithKeyManager_GasPrice_Call {
	_c.Call.Return(gasPrice, err)
	return _c
}

func (_c *MockEthClientWithKeyManager_GasPrice_Call) RunAndReturn(run func(ctx context.Context) (*pldtypes.HexUint256, error)) *MockEthClientWithKeyManager_GasPrice_Call {
	_c.Call.Return(run)
	return _c
}

// GetBalance provides a mock function for the type MockEthClientWithKeyManager
func (_mock *MockEthClientWithKeyManager) GetBalance(ctx context.Context, address pldtypes.EthAddress, block string) (*pldtypes.HexUint256, error) {
	ret := _mock.Called(ctx, address, block)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 *pldtypes.HexUint256
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, pldtypes.EthAddress, string) (*pldtypes.HexUint256, error)); ok {
		return returnFunc(ctx, address, block)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, pldtypes.EthAddress, string) *pldtypes.HexUint256); ok {
		r0 = returnFunc(ctx, address, block)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldtypes.HexUint256)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, pldtypes.EthAddress, string) error); ok {
		r1 = returnFunc(ctx, address, block)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEthClientWithKeyManager_GetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalance'
type MockEthClientWithKeyManager_GetBalance_Call struct {
	*mock.Call
}

// GetBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - address pldtypes.EthAddress
//   - block string
func (_e *MockEthClientWithKeyManager_Expecter) GetBalance(ctx interface{}, address interface{}, block interface{}) *MockEthClientWithKeyManager_GetBalance_Call {
	return &MockEthClientWithKeyManager_GetBalance_Call{Call: _e.mock.On("GetBalance", ctx, address, block)}
}

func (_c *MockEthClientWithKeyManager_GetBalance_Call) Run(run func(ctx context.Context, address pldtypes.EthAddress, block string)) *MockEthClientWithKeyManager_GetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 pldtypes.EthAddress
		if args[1] != nil {
			arg1 = args[1].(pldtypes.EthAddress)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockEthClientWithKeyManager_GetBalance_Call) Return(balance *pldtypes.HexUint256, err error) *MockEthClientWithKeyManager_GetBalance_Call {
	_c.Call.Return(balance, err)
	return _c
}

func (_c *MockEthClientWithKeyManager_GetBalance_Call) RunAndReturn(run func(ctx context.Context, address pldtypes.EthAddress, block string) (*pldtypes.HexUint256, error)) *MockEthClientWithKeyManager_GetBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionCount provides a mock function for the type MockEthClientWithKeyManager
func (_mock *MockEthClientWithKeyManager) GetTransactionCount(ctx context.Context, fromAddr pldtypes.EthAddress) (*pldtypes.HexUint64, error) {
	ret := _mock.Called(ctx, fromAddr)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionCount")
	}

	var r0 *pldtypes.HexUint64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, pldtypes.EthAddress) (*pldtypes.HexUint64, error)); ok {
		return returnFunc(ctx, fromAddr)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, pldtypes.EthAddress) *pldtypes.HexUint64); ok {
		r0 = returnFunc(ctx, fromAddr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldtypes.HexUint64)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, pldtypes.EthAddress) error); ok {
		r1 = returnFunc(ctx, fromAddr)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEthClientWithKeyManager_GetTransactionCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionCount'
type MockEthClientWithKeyManager_GetTransactionCount_Call struct {
	*mock.Call
}

// GetTransactionCount is a helper method to define mock.On call
//   - ctx context.Context
//   - fromAddr pldtypes.EthAddress
func (_e *MockEthClientWithKeyManager_Expecter) GetTransactionCount(ctx interface{}, fromAddr interface{}) *MockEthClientWithKeyManager_GetTransactionCount_Call {
	return &MockEthClientWithKeyManager_GetTransactionCount_Call{Call: _e.mock.On("GetTransactionCount", ctx, fromAddr)}
}

func (_c *MockEthClientWithKeyManager_GetTransactionCount_Call) Run(run func(ctx context.Context, fromAddr pldtypes.EthAddress)) *MockEthClientWithKeyManager_GetTransactionCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 pldtypes.EthAddress
		if args[1] != nil {
			arg1 = args[1].(pldtypes.EthAddress)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEthClientWithKeyManager_GetTransactionCount_Call) Return(transactionCount *pldtypes.HexUint64, err error) *MockEthClientWithKeyManager_GetTransactionCount_Call {
	_c.Call.Return(transactionCount, err)
	return _c
}

func (_c *MockEthClientWithKeyManager_GetTransactionCount_Call) RunAndReturn(run func(ctx context.Context, fromAddr pldtypes.EthAddress) (*pldtypes.HexUint64, error)) *MockEthClientWithKeyManager_GetTransactionCount_Call {
	_c.Call.Return(run)
	return _c
}

// MustABIJSON provides a mock function for the type MockEthClientWithKeyManager
func (_mock *MockEthClientWithKeyManager) MustABIJSON(abiJson []byte) ABIClient {
	ret := _mock.Called(abiJson)

	if len(ret) == 0 {
		panic("no return value specified for MustABIJSON")
	}

	var r0 ABIClient
	if returnFunc, ok := ret.Get(0).(func([]byte) ABIClient); ok {
		r0 = returnFunc(abiJson)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ABIClient)
		}
	}
	return r0
}

// MockEthClientWithKeyManager_MustABIJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MustABIJSON'
type MockEthClientWithKeyManager_MustABIJSON_Call struct {
	*mock.Call
}

// MustABIJSON is a helper method to define mock.On call
//   - abiJson []byte
func (_e *MockEthClientWithKeyManager_Expecter) MustABIJSON(abiJson interface{}) *MockEthClientWithKeyManager_MustABIJSON_Call {
	return &MockEthClientWithKeyManager_MustABIJSON_Call{Call: _e.mock.On("MustABIJSON", abiJson)}
}

func (_c *MockEthClientWithKeyManager_MustABIJSON_Call) Run(run func(abiJson []byte)) *MockEthClientWithKeyManager_MustABIJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockEthClientWithKeyManager_MustABIJSON_Call) Return(aBIClient ABIClient) *MockEthClientWithKeyManager_MustABIJSON_Call {
	_c.Call.Return(aBIClient)
	return _c
}

func (_c *MockEthClientWithKeyManager_MustABIJSON_Call) RunAndReturn(run func(abiJson []byte) ABIClient) *MockEthClientWithKeyManager_MustABIJSON_Call {
	_c.Call.Return(run)
	return _c
}

// SendRawTransaction provides a mock function for the type MockEthClientWithKeyManager
func (_mock *MockEthClientWithKeyManager) SendRawTransaction(ctx context.Context, rawTX pldtypes.HexBytes) (*pldtypes.Bytes32, error) {
	ret := _mock.Called(ctx, rawTX)

	if len(ret) == 0 {
		panic("no return value specified for SendRawTransaction")
	}

	var r0 *pldtypes.Bytes32
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, pldtypes.HexBytes) (*pldtypes.Bytes32, error)); ok {
		return returnFunc(ctx, rawTX)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, pldtypes.HexBytes) *pldtypes.Bytes32); ok {
		r0 = returnFunc(ctx, rawTX)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldtypes.Bytes32)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, pldtypes.HexBytes) error); ok {
		r1 = returnFunc(ctx, rawTX)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEthClientWithKeyManager_SendRawTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendRawTransaction'
type MockEthClientWithKeyManager_SendRawTransaction_Call struct {
	*mock.Call
}

// SendRawTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - rawTX pldtypes.HexBytes
func (_e *MockEthClientWithKeyManager_Expecter) SendRawTransaction(ctx interface{}, rawTX interface{}) *MockEthClientWithKeyManager_SendRawTransaction_Call {
	return &MockEthClientWithKeyManager_SendRawTransaction_Call{Call: _e.mock.On("SendRawTransaction", ctx, rawTX)}
}

func (_c *MockEthClientWithKeyManager_SendRawTransaction_Call) Run(run func(ctx context.Context, rawTX pldtypes.HexBytes)) *MockEthClientWithKeyManager_SendRawTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 pldtypes.HexBytes
		if args[1] != nil {
			arg1 = args[1].(pldtypes.HexBytes)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEthClientWithKeyManager_SendRawTransaction_Call) Return(bytes32 *pldtypes.Bytes32, err error) *MockEthClientWithKeyManager_SendRawTransaction_Call {
	_c.Call.Return(bytes32, err)
	return _c
}

func (_c *MockEthClientWithKeyManager_SendRawTransaction_Call) RunAndReturn(run func(ctx context.Context, rawTX pldtypes.HexBytes) (*pldtypes.Bytes32, error)) *MockEthClientWithKeyManager_SendRawTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCallOption creates a new instance of MockCallOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCallOption(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCallOption {
	mock := &MockCallOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCallOption is an autogenerated mock type for the CallOption type
type MockCallOption struct {
	mock.Mock
}

type MockCallOption_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCallOption) EXPECT() *MockCallOption_Expecter {
	return &MockCallOption_Expecter{mock: &_m.Mock}
}

// isCallOptions provides a mock function for the type MockCallOption
func (_mock *MockCallOption) isCallOptions() {
	_mock.Called()
	return
}

// MockCallOption_isCallOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'isCallOptions'
type MockCallOption_isCallOptions_Call struct {
	*mock.Call
}

// isCallOptions is a helper method to define mock.On call
func (_e *MockCallOption_Expecter) isCallOptions() *MockCallOption_isCallOptions_Call {
	return &MockCallOption_isCallOptions_Call{Call: _e.mock.On("isCallOptions")}
}

func (_c *MockCallOption_isCallOptions_Call) Run(run func()) *MockCallOption_isCallOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCallOption_isCallOptions_Call) Return() *MockCallOption_isCallOptions_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCallOption_isCallOptions_Call) RunAndReturn(run func()) *MockCallOption_isCallOptions_Call {
	_c.Run(run)
	return _c
}

// NewMockKeyManager creates a new instance of MockKeyManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKeyManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKeyManager {
	mock := &MockKeyManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockKeyManager is an autogenerated mock type for the KeyManager type
type MockKeyManager struct {
	mock.Mock
}

type MockKeyManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKeyManager) EXPECT() *MockKeyManager_Expecter {
	return &MockKeyManager_Expecter{mock: &_m.Mock}
}

// AddInMemorySigner provides a mock function for the type MockKeyManager
func (_mock *MockKeyManager) AddInMemorySigner(prefix string, signer signerapi.InMemorySigner) {
	_mock.Called(prefix, signer)
	return
}

// MockKeyManager_AddInMemorySigner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddInMemorySigner'
type MockKeyManager_AddInMemorySigner_Call struct {
	*mock.Call
}

// AddInMemorySigner is a helper method to define mock.On call
//   - prefix string
//   - signer signerapi.InMemorySigner
func (_e *MockKeyManager_Expecter) AddInMemorySigner(prefix interface{}, signer interface{}) *MockKeyManager_AddInMemorySigner_Call {
	return &MockKeyManager_AddInMemorySigner_Call{Call: _e.mock.On("AddInMemorySigner", prefix, signer)}
}

func (_c *MockKeyManager_AddInMemorySigner_Call) Run(run func(prefix string, signer signerapi.InMemorySigner)) *MockKeyManager_AddInMemorySigner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 signerapi.InMemorySigner
		if args[1] != nil {
			arg1 = args[1].(signerapi.InMemorySigner)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockKeyManager_AddInMemorySigner_Call) Return() *MockKeyManager_AddInMemorySigner_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockKeyManager_AddInMemorySigner_Call) RunAndReturn(run func(prefix string, signer signerapi.InMemorySigner)) *MockKeyManager_AddInMemorySigner_Call {
	_c.Run(run)
	return _c
}

// Close provides a mock function for the type MockKeyManager
func (_mock *MockKeyManager) Close() {
	_mock.Called()
	return
}

// MockKeyManager_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockKeyManager_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockKeyManager_Expecter) Close() *MockKeyManager_Close_Call {
	return &MockKeyManager_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockKeyManager_Close_Call) Run(run func()) *MockKeyManager_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKeyManager_Close_Call) Return() *MockKeyManager_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockKeyManager_Close_Call) RunAndReturn(run func()) *MockKeyManager_Close_Call {
	_c.Run(run)
	return _c
}

// ResolveKey provides a mock function for the type MockKeyManager
func (_mock *MockKeyManager) ResolveKey(ctx context.Context, identifier string, algorithm string, verifierType string) (string, string, error) {
	ret := _mock.Called(ctx, identifier, algorithm, verifierType)

	if len(ret) == 0 {
		panic("no return value specified for ResolveKey")
	}

	var r0 string
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (string, string, error)); ok {
		return returnFunc(ctx, identifier, algorithm, verifierType)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = returnFunc(ctx, identifier, algorithm, verifierType)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) string); ok {
		r1 = returnFunc(ctx, identifier, algorithm, verifierType)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = returnFunc(ctx, identifier, algorithm, verifierType)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockKeyManager_ResolveKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveKey'
type MockKeyManager_ResolveKey_Call struct {
	*mock.Call
}

// ResolveKey is a helper method to define mock.On call
//   - ctx context.Context
//   - identifier string
//   - algorithm string
//   - verifierType string
func (_e *MockKeyManager_Expecter) ResolveKey(ctx interface{}, identifier interface{}, algorithm interface{}, verifierType interface{}) *MockKeyManager_ResolveKey_Call {
	return &MockKeyManager_ResolveKey_Call{Call: _e.mock.On("ResolveKey", ctx, identifier, algorithm, verifierType)}
}

func (_c *MockKeyManager_ResolveKey_Call) Run(run func(ctx context.Context, identifier string, algorithm string, verifierType string)) *MockKeyManager_ResolveKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockKeyManager_ResolveKey_Call) Return(keyHandle string, verifier string, err error) *MockKeyManager_ResolveKey_Call {
	_c.Call.Return(keyHandle, verifier, err)
	return _c
}

func (_c *MockKeyManager_ResolveKey_Call) RunAndReturn(run func(ctx context.Context, identifier string, algorithm string, verifierType string) (string, string, error)) *MockKeyManager_ResolveKey_Call {
	_c.Call.Return(run)
	return _c
}

// Sign provides a mock function for the type MockKeyManager
func (_mock *MockKeyManager) Sign(ctx context.Context, req *prototk.SignWithKeyRequest) (*prototk.SignWithKeyResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 *prototk.SignWithKeyResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.SignWithKeyRequest) (*prototk.SignWithKeyResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.SignWithKeyRequest) *prototk.SignWithKeyResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.SignWithKeyResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.SignWithKeyRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKeyManager_Sign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sign'
type MockKeyManager_Sign_Call struct {
	*mock.Call
}

// Sign is a helper method to define mock.On call
//   - ctx context.Context
//   - req *prototk.SignWithKeyRequest
func (_e *MockKeyManager_Expecter) Sign(ctx interface{}, req interface{}) *MockKeyManager_Sign_Call {
	return &MockKeyManager_Sign_Call{Call: _e.mock.On("Sign", ctx, req)}
}

func (_c *MockKeyManager_Sign_Call) Run(run func(ctx context.Context, req *prototk.SignWithKeyRequest)) *MockKeyManager_Sign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.SignWithKeyRequest
		if args[1] != nil {
			arg1 = args[1].(*prototk.SignWithKeyRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockKeyManager_Sign_Call) Return(signWithKeyResponse *prototk.SignWithKeyResponse, err error) *MockKeyManager_Sign_Call {
	_c.Call.Return(signWithKeyResponse, err)
	return _c
}

func (_c *MockKeyManager_Sign_Call) RunAndReturn(run func(ctx context.Context, req *prototk.SignWithKeyRequest) (*prototk.SignWithKeyResponse, error)) *MockKeyManager_Sign_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEthClientFactoryBase creates a new instance of MockEthClientFactoryBase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEthClientFactoryBase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEthClientFactoryBase {
	mock := &MockEthClientFactoryBase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEthClientFactoryBase is an autogenerated mock type for the EthClientFactoryBase type
type MockEthClientFactoryBase struct {
	mock.Mock
}

type MockEthClientFactoryBase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEthClientFactoryBase) EXPECT() *MockEthClientFactoryBase_Expecter {
	return &MockEthClientFactoryBase_Expecter{mock: &_m.Mock}
}

// ChainID provides a mock function for the type MockEthClientFactoryBase
func (_mock *MockEthClientFactoryBase) ChainID() int64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ChainID")
	}

	var r0 int64
	if returnFunc, ok := ret.Get(0).(func() int64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int64)
	}
	return r0
}

// MockEthClientFactoryBase_ChainID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChainID'
type MockEthClientFactoryBase_ChainID_Call struct {
	*mock.Call
}

// ChainID is a helper method to define mock.On call
func (_e *MockEthClientFactoryBase_Expecter) ChainID() *MockEthClientFactoryBase_ChainID_Call {
	return &MockEthClientFactoryBase_ChainID_Call{Call: _e.mock.On("ChainID")}
}

func (_c *MockEthClientFactoryBase_ChainID_Call) Run(run func()) *MockEthClientFactoryBase_ChainID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEthClientFactoryBase_ChainID_Call) Return(n int64) *MockEthClientFactoryBase_ChainID_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockEthClientFactoryBase_ChainID_Call) RunAndReturn(run func() int64) *MockEthClientFactoryBase_ChainID_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockEthClientFactoryBase
func (_mock *MockEthClientFactoryBase) Start() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEthClientFactoryBase_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockEthClientFactoryBase_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockEthClientFactoryBase_Expecter) Start() *MockEthClientFactoryBase_Start_Call {
	return &MockEthClientFactoryBase_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockEthClientFactoryBase_Start_Call) Run(run func()) *MockEthClientFactoryBase_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEthClientFactoryBase_Start_Call) Return(err error) *MockEthClientFactoryBase_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEthClientFactoryBase_Start_Call) RunAndReturn(run func() error) *MockEthClientFactoryBase_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockEthClientFactoryBase
func (_mock *MockEthClientFactoryBase) Stop() {
	_mock.Called()
	return
}

// MockEthClientFactoryBase_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockEthClientFactoryBase_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockEthClientFactoryBase_Expecter) Stop() *MockEthClientFactoryBase_Stop_Call {
	return &MockEthClientFactoryBase_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockEthClientFactoryBase_Stop_Call) Run(run func()) *MockEthClientFactoryBase_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEthClientFactoryBase_Stop_Call) Return() *MockEthClientFactoryBase_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEthClientFactoryBase_Stop_Call) RunAndReturn(run func()) *MockEthClientFactoryBase_Stop_Call {
	_c.Run(run)
	return _c
}

// NewMockEthClientFactory creates a new instance of MockEthClientFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEthClientFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEthClientFactory {
	mock := &MockEthClientFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEthClientFactory is an autogenerated mock type for the EthClientFactory type
type MockEthClientFactory struct {
	mock.Mock
}

type MockEthClientFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEthClientFactory) EXPECT() *MockEthClientFactory_Expecter {
	return &MockEthClientFactory_Expecter{mock: &_m.Mock}
}

// ChainID provides a mock function for the type MockEthClientFactory
func (_mock *MockEthClientFactory) ChainID() int64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ChainID")
	}

	var r0 int64
	if returnFunc, ok := ret.Get(0).(func() int64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int64)
	}
	return r0
}

// MockEthClientFactory_ChainID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChainID'
type MockEthClientFactory_ChainID_Call struct {
	*mock.Call
}

// ChainID is a helper method to define mock.On call
func (_e *MockEthClientFactory_Expecter) ChainID() *MockEthClientFactory_ChainID_Call {
	return &MockEthClientFactory_ChainID_Call{Call: _e.mock.On("ChainID")}
}

func (_c *MockEthClientFactory_ChainID_Call) Run(run func()) *MockEthClientFactory_ChainID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEthClientFactory_ChainID_Call) Return(n int64) *MockEthClientFactory_ChainID_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockEthClientFactory_ChainID_Call) RunAndReturn(run func() int64) *MockEthClientFactory_ChainID_Call {
	_c.Call.Return(run)
	return _c
}

// HTTPClient provides a mock function for the type MockEthClientFactory
func (_mock *MockEthClientFactory) HTTPClient() EthClient {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for HTTPClient")
	}

	var r0 EthClient
	if returnFunc, ok := ret.Get(0).(func() EthClient); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EthClient)
		}
	}
	return r0
}

// MockEthClientFactory_HTTPClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HTTPClient'
type MockEthClientFactory_HTTPClient_Call struct {
	*mock.Call
}

// HTTPClient is a helper method to define mock.On call
func (_e *MockEthClientFactory_Expecter) HTTPClient() *MockEthClientFactory_HTTPClient_Call {
	return &MockEthClientFactory_HTTPClient_Call{Call: _e.mock.On("HTTPClient")}
}

func (_c *MockEthClientFactory_HTTPClient_Call) Run(run func()) *MockEthClientFactory_HTTPClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEthClientFactory_HTTPClient_Call) Return(ethClient EthClient) *MockEthClientFactory_HTTPClient_Call {
	_c.Call.Return(ethClient)
	return _c
}

func (_c *MockEthClientFactory_HTTPClient_Call) RunAndReturn(run func() EthClient) *MockEthClientFactory_HTTPClient_Call {
	_c.Call.Return(run)
	return _c
}

// NewWS provides a mock function for the type MockEthClientFactory
func (_mock *MockEthClientFactory) NewWS() (EthClient, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewWS")
	}

	var r0 EthClient
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (EthClient, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() EthClient); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EthClient)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEthClientFactory_NewWS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewWS'
type MockEthClientFactory_NewWS_Call struct {
	*mock.Call
}

// NewWS is a helper method to define mock.On call
func (_e *MockEthClientFactory_Expecter) NewWS() *MockEthClientFactory_NewWS_Call {
	return &MockEthClientFactory_NewWS_Call{Call: _e.mock.On("NewWS")}
}

func (_c *MockEthClientFactory_NewWS_Call) Run(run func()) *MockEthClientFactory_NewWS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEthClientFactory_NewWS_Call) Return(ethClient EthClient, err error) *MockEthClientFactory_NewWS_Call {
	_c.Call.Return(ethClient, err)
	return _c
}

func (_c *MockEthClientFactory_NewWS_Call) RunAndReturn(run func() (EthClient, error)) *MockEthClientFactory_NewWS_Call {
	_c.Call.Return(run)
	return _c
}

// SharedWS provides a mock function for the type MockEthClientFactory
func (_mock *MockEthClientFactory) SharedWS() EthClient {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for SharedWS")
	}

	var r0 EthClient
	if returnFunc, ok := ret.Get(0).(func() EthClient); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EthClient)
		}
	}
	return r0
}

// MockEthClientFactory_SharedWS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SharedWS'
type MockEthClientFactory_SharedWS_Call struct {
	*mock.Call
}

// SharedWS is a helper method to define mock.On call
func (_e *MockEthClientFactory_Expecter) SharedWS() *MockEthClientFactory_SharedWS_Call {
	return &MockEthClientFactory_SharedWS_Call{Call: _e.mock.On("SharedWS")}
}

func (_c *MockEthClientFactory_SharedWS_Call) Run(run func()) *MockEthClientFactory_SharedWS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEthClientFactory_SharedWS_Call) Return(ethClient EthClient) *MockEthClientFactory_SharedWS_Call {
	_c.Call.Return(ethClient)
	return _c
}

func (_c *MockEthClientFactory_SharedWS_Call) RunAndReturn(run func() EthClient) *MockEthClientFactory_SharedWS_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockEthClientFactory
func (_mock *MockEthClientFactory) Start() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEthClientFactory_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockEthClientFactory_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockEthClientFactory_Expecter) Start() *MockEthClientFactory_Start_Call {
	return &MockEthClientFactory_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockEthClientFactory_Start_Call) Run(run func()) *MockEthClientFactory_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEthClientFactory_Start_Call) Return(err error) *MockEthClientFactory_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEthClientFactory_Start_Call) RunAndReturn(run func() error) *MockEthClientFactory_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockEthClientFactory
func (_mock *MockEthClientFactory) Stop() {
	_mock.Called()
	return
}

// MockEthClientFactory_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockEthClientFactory_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockEthClientFactory_Expecter) Stop() *MockEthClientFactory_Stop_Call {
	return &MockEthClientFactory_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockEthClientFactory_Stop_Call) Run(run func()) *MockEthClientFactory_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEthClientFactory_Stop_Call) Return() *MockEthClientFactory_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEthClientFactory_Stop_Call) RunAndReturn(run func()) *MockEthClientFactory_Stop_Call {
	_c.Run(run)
	return _c
}

// NewMockEthClientFactoryWithKeyManager creates a new instance of MockEthClientFactoryWithKeyManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEthClientFactoryWithKeyManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEthClientFactoryWithKeyManager {
	mock := &MockEthClientFactoryWithKeyManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEthClientFactoryWithKeyManager is an autogenerated mock type for the EthClientFactoryWithKeyManager type
type MockEthClientFactoryWithKeyManager struct {
	mock.Mock
}

type MockEthClientFactoryWithKeyManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEthClientFactoryWithKeyManager) EXPECT() *MockEthClientFactoryWithKeyManager_Expecter {
	return &MockEthClientFactoryWithKeyManager_Expecter{mock: &_m.Mock}
}

// ChainID provides a mock function for the type MockEthClientFactoryWithKeyManager
func (_mock *MockEthClientFactoryWithKeyManager) ChainID() int64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ChainID")
	}

	var r0 int64
	if returnFunc, ok := ret.Get(0).(func() int64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int64)
	}
	return r0
}

// MockEthClientFactoryWithKeyManager_ChainID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChainID'
type MockEthClientFactoryWithKeyManager_ChainID_Call struct {
	*mock.Call
}

// ChainID is a helper method to define mock.On call
func (_e *MockEthClientFactoryWithKeyManager_Expecter) ChainID() *MockEthClientFactoryWithKeyManager_ChainID_Call {
	return &MockEthClientFactoryWithKeyManager_ChainID_Call{Call: _e.mock.On("ChainID")}
}

func (_c *MockEthClientFactoryWithKeyManager_ChainID_Call) Run(run func()) *MockEthClientFactoryWithKeyManager_ChainID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEthClientFactoryWithKeyManager_ChainID_Call) Return(n int64) *MockEthClientFactoryWithKeyManager_ChainID_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockEthClientFactoryWithKeyManager_ChainID_Call) RunAndReturn(run func() int64) *MockEthClientFactoryWithKeyManager_ChainID_Call {
	_c.Call.Return(run)
	return _c
}

// HTTPClient provides a mock function for the type MockEthClientFactoryWithKeyManager
func (_mock *MockEthClientFactoryWithKeyManager) HTTPClient() EthClientWithKeyManager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for HTTPClient")
	}

	var r0 EthClientWithKeyManager
	if returnFunc, ok := ret.Get(0).(func() EthClientWithKeyManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EthClientWithKeyManager)
		}
	}
	return r0
}

// MockEthClientFactoryWithKeyManager_HTTPClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HTTPClient'
type MockEthClientFactoryWithKeyManager_HTTPClient_Call struct {
	*mock.Call
}

// HTTPClient is a helper method to define mock.On call
func (_e *MockEthClientFactoryWithKeyManager_Expecter) HTTPClient() *MockEthClientFactoryWithKeyManager_HTTPClient_Call {
	return &MockEthClientFactoryWithKeyManager_HTTPClient_Call{Call: _e.mock.On("HTTPClient")}
}

func (_c *MockEthClientFactoryWithKeyManager_HTTPClient_Call) Run(run func()) *MockEthClientFactoryWithKeyManager_HTTPClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEthClientFactoryWithKeyManager_HTTPClient_Call) Return(ethClientWithKeyManager EthClientWithKeyManager) *MockEthClientFactoryWithKeyManager_HTTPClient_Call {
	_c.Call.Return(ethClientWithKeyManager)
	return _c
}

func (_c *MockEthClientFactoryWithKeyManager_HTTPClient_Call) RunAndReturn(run func() EthClientWithKeyManager) *MockEthClientFactoryWithKeyManager_HTTPClient_Call {
	_c.Call.Return(run)
	return _c
}

// NewWS provides a mock function for the type MockEthClientFactoryWithKeyManager
func (_mock *MockEthClientFactoryWithKeyManager) NewWS() (EthClientWithKeyManager, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewWS")
	}

	var r0 EthClientWithKeyManager
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (EthClientWithKeyManager, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() EthClientWithKeyManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EthClientWithKeyManager)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEthClientFactoryWithKeyManager_NewWS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewWS'
type MockEthClientFactoryWithKeyManager_NewWS_Call struct {
	*mock.Call
}

// NewWS is a helper method to define mock.On call
func (_e *MockEthClientFactoryWithKeyManager_Expecter) NewWS() *MockEthClientFactoryWithKeyManager_NewWS_Call {
	return &MockEthClientFactoryWithKeyManager_NewWS_Call{Call: _e.mock.On("NewWS")}
}

func (_c *MockEthClientFactoryWithKeyManager_NewWS_Call) Run(run func()) *MockEthClientFactoryWithKeyManager_NewWS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEthClientFactoryWithKeyManager_NewWS_Call) Return(ethClientWithKeyManager EthClientWithKeyManager, err error) *MockEthClientFactoryWithKeyManager_NewWS_Call {
	_c.Call.Return(ethClientWithKeyManager, err)
	return _c
}

func (_c *MockEthClientFactoryWithKeyManager_NewWS_Call) RunAndReturn(run func() (EthClientWithKeyManager, error)) *MockEthClientFactoryWithKeyManager_NewWS_Call {
	_c.Call.Return(run)
	return _c
}

// SharedWS provides a mock function for the type MockEthClientFactoryWithKeyManager
func (_mock *MockEthClientFactoryWithKeyManager) SharedWS() EthClientWithKeyManager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for SharedWS")
	}

	var r0 EthClientWithKeyManager
	if returnFunc, ok := ret.Get(0).(func() EthClientWithKeyManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EthClientWithKeyManager)
		}
	}
	return r0
}

// MockEthClientFactoryWithKeyManager_SharedWS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SharedWS'
type MockEthClientFactoryWithKeyManager_SharedWS_Call struct {
	*mock.Call
}

// SharedWS is a helper method to define mock.On call
func (_e *MockEthClientFactoryWithKeyManager_Expecter) SharedWS() *MockEthClientFactoryWithKeyManager_SharedWS_Call {
	return &MockEthClientFactoryWithKeyManager_SharedWS_Call{Call: _e.mock.On("SharedWS")}
}

func (_c *MockEthClientFactoryWithKeyManager_SharedWS_Call) Run(run func()) *MockEthClientFactoryWithKeyManager_SharedWS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEthClientFactoryWithKeyManager_SharedWS_Call) Return(ethClientWithKeyManager EthClientWithKeyManager) *MockEthClientFactoryWithKeyManager_SharedWS_Call {
	_c.Call.Return(ethClientWithKeyManager)
	return _c
}

func (_c *MockEthClientFactoryWithKeyManager_SharedWS_Call) RunAndReturn(run func() EthClientWithKeyManager) *MockEthClientFactoryWithKeyManager_SharedWS_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockEthClientFactoryWithKeyManager
func (_mock *MockEthClientFactoryWithKeyManager) Start() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEthClientFactoryWithKeyManager_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockEthClientFactoryWithKeyManager_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockEthClientFactoryWithKeyManager_Expecter) Start() *MockEthClientFactoryWithKeyManager_Start_Call {
	return &MockEthClientFactoryWithKeyManager_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockEthClientFactoryWithKeyManager_Start_Call) Run(run func()) *MockEthClientFactoryWithKeyManager_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEthClientFactoryWithKeyManager_Start_Call) Return(err error) *MockEthClientFactoryWithKeyManager_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEthClientFactoryWithKeyManager_Start_Call) RunAndReturn(run func() error) *MockEthClientFactoryWithKeyManager_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockEthClientFactoryWithKeyManager
func (_mock *MockEthClientFactoryWithKeyManager) Stop() {
	_mock.Called()
	return
}

// MockEthClientFactoryWithKeyManager_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockEthClientFactoryWithKeyManager_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockEthClientFactoryWithKeyManager_Expecter) Stop() *MockEthClientFactoryWithKeyManager_Stop_Call {
	return &MockEthClientFactoryWithKeyManager_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockEthClientFactoryWithKeyManager_Stop_Call) Run(run func()) *MockEthClientFactoryWithKeyManager_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEthClientFactoryWithKeyManager_Stop_Call) Return() *MockEthClientFactoryWithKeyManager_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEthClientFactoryWithKeyManager_Stop_Call) RunAndReturn(run func()) *MockEthClientFactoryWithKeyManager_Stop_Call {
	_c.Run(run)
	return _c
}

// NewMockABIFunctionClient creates a new instance of MockABIFunctionClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockABIFunctionClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockABIFunctionClient {
	mock := &MockABIFunctionClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockABIFunctionClient is an autogenerated mock type for the ABIFunctionClient type
type MockABIFunctionClient struct {
	mock.Mock
}

type MockABIFunctionClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockABIFunctionClient) EXPECT() *MockABIFunctionClient_Expecter {
	return &MockABIFunctionClient_Expecter{mock: &_m.Mock}
}

// ABI provides a mock function for the type MockABIFunctionClient
func (_mock *MockABIFunctionClient) ABI() abi.ABI {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ABI")
	}

	var r0 abi.ABI
	if returnFunc, ok := ret.Get(0).(func() abi.ABI); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(abi.ABI)
		}
	}
	return r0
}

// MockABIFunctionClient_ABI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ABI'
type MockABIFunctionClient_ABI_Call struct {
	*mock.Call
}

// ABI is a helper method to define mock.On call
func (_e *MockABIFunctionClient_Expecter) ABI() *MockABIFunctionClient_ABI_Call {
	return &MockABIFunctionClient_ABI_Call{Call: _e.mock.On("ABI")}
}

func (_c *MockABIFunctionClient_ABI_Call) Run(run func()) *MockABIFunctionClient_ABI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockABIFunctionClient_ABI_Call) Return(aBI abi.ABI) *MockABIFunctionClient_ABI_Call {
	_c.Call.Return(aBI)
	return _c
}

func (_c *MockABIFunctionClient_ABI_Call) RunAndReturn(run func() abi.ABI) *MockABIFunctionClient_ABI_Call {
	_c.Call.Return(run)
	return _c
}

// ABIEntry provides a mock function for the type MockABIFunctionClient
func (_mock *MockABIFunctionClient) ABIEntry() *abi.Entry {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ABIEntry")
	}

	var r0 *abi.Entry
	if returnFunc, ok := ret.Get(0).(func() *abi.Entry); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abi.Entry)
		}
	}
	return r0
}

// MockABIFunctionClient_ABIEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ABIEntry'
type MockABIFunctionClient_ABIEntry_Call struct {
	*mock.Call
}

// ABIEntry is a helper method to define mock.On call
func (_e *MockABIFunctionClient_Expecter) ABIEntry() *MockABIFunctionClient_ABIEntry_Call {
	return &MockABIFunctionClient_ABIEntry_Call{Call: _e.mock.On("ABIEntry")}
}

func (_c *MockABIFunctionClient_ABIEntry_Call) Run(run func()) *MockABIFunctionClient_ABIEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockABIFunctionClient_ABIEntry_Call) Return(entry *abi.Entry) *MockABIFunctionClient_ABIEntry_Call {
	_c.Call.Return(entry)
	return _c
}

func (_c *MockABIFunctionClient_ABIEntry_Call) RunAndReturn(run func() *abi.Entry) *MockABIFunctionClient_ABIEntry_Call {
	_c.Call.Return(run)
	return _c
}

// R provides a mock function for the type MockABIFunctionClient
func (_mock *MockABIFunctionClient) R(ctx context.Context) ABIFunctionRequestBuilder {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for R")
	}

	var r0 ABIFunctionRequestBuilder
	if returnFunc, ok := ret.Get(0).(func(context.Context) ABIFunctionRequestBuilder); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ABIFunctionRequestBuilder)
		}
	}
	return r0
}

// MockABIFunctionClient_R_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'R'
type MockABIFunctionClient_R_Call struct {
	*mock.Call
}

// R is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockABIFunctionClient_Expecter) R(ctx interface{}) *MockABIFunctionClient_R_Call {
	return &MockABIFunctionClient_R_Call{Call: _e.mock.On("R", ctx)}
}

func (_c *MockABIFunctionClient_R_Call) Run(run func(ctx context.Context)) *MockABIFunctionClient_R_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockABIFunctionClient_R_Call) Return(aBIFunctionRequestBuilder ABIFunctionRequestBuilder) *MockABIFunctionClient_R_Call {
	_c.Call.Return(aBIFunctionRequestBuilder)
	return _c
}

func (_c *MockABIFunctionClient_R_Call) RunAndReturn(run func(ctx context.Context) ABIFunctionRequestBuilder) *MockABIFunctionClient_R_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockABIClient creates a new instance of MockABIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockABIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockABIClient {
	mock := &MockABIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockABIClient is an autogenerated mock type for the ABIClient type
type MockABIClient struct {
	mock.Mock
}

type MockABIClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockABIClient) EXPECT() *MockABIClient_Expecter {
	return &MockABIClient_Expecter{mock: &_m.Mock}
}

// ABI provides a mock function for the type MockABIClient
func (_mock *MockABIClient) ABI() abi.ABI {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ABI")
	}

	var r0 abi.ABI
	if returnFunc, ok := ret.Get(0).(func() abi.ABI); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(abi.ABI)
		}
	}
	return r0
}

// MockABIClient_ABI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ABI'
type MockABIClient_ABI_Call struct {
	*mock.Call
}

// ABI is a helper method to define mock.On call
func (_e *MockABIClient_Expecter) ABI() *MockABIClient_ABI_Call {
	return &MockABIClient_ABI_Call{Call: _e.mock.On("ABI")}
}

func (_c *MockABIClient_ABI_Call) Run(run func()) *MockABIClient_ABI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockABIClient_ABI_Call) Return(aBI abi.ABI) *MockABIClient_ABI_Call {
	_c.Call.Return(aBI)
	return _c
}

func (_c *MockABIClient_ABI_Call) RunAndReturn(run func() abi.ABI) *MockABIClient_ABI_Call {
	_c.Call.Return(run)
	return _c
}

// Constructor provides a mock function for the type MockABIClient
func (_mock *MockABIClient) Constructor(ctx context.Context, bytecode pldtypes.HexBytes) (ABIFunctionClient, error) {
	ret := _mock.Called(ctx, bytecode)

	if len(ret) == 0 {
		panic("no return value specified for Constructor")
	}

	var r0 ABIFunctionClient
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, pldtypes.HexBytes) (ABIFunctionClient, error)); ok {
		return returnFunc(ctx, bytecode)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, pldtypes.HexBytes) ABIFunctionClient); ok {
		r0 = returnFunc(ctx, bytecode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ABIFunctionClient)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, pldtypes.HexBytes) error); ok {
		r1 = returnFunc(ctx, bytecode)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockABIClient_Constructor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Constructor'
type MockABIClient_Constructor_Call struct {
	*mock.Call
}

// Constructor is a helper method to define mock.On call
//   - ctx context.Context
//   - bytecode pldtypes.HexBytes
func (_e *MockABIClient_Expecter) Constructor(ctx interface{}, bytecode interface{}) *MockABIClient_Constructor_Call {
	return &MockABIClient_Constructor_Call{Call: _e.mock.On("Constructor", ctx, bytecode)}
}

func (_c *MockABIClient_Constructor_Call) Run(run func(ctx context.Context, bytecode pldtypes.HexBytes)) *MockABIClient_Constructor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 pldtypes.HexBytes
		if args[1] != nil {
			arg1 = args[1].(pldtypes.HexBytes)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockABIClient_Constructor_Call) Return(aBIFunctionClient ABIFunctionClient, err error) *MockABIClient_Constructor_Call {
	_c.Call.Return(aBIFunctionClient, err)
	return _c
}

func (_c *MockABIClient_Constructor_Call) RunAndReturn(run func(ctx context.Context, bytecode pldtypes.HexBytes) (ABIFunctionClient, error)) *MockABIClient_Constructor_Call {
	_c.Call.Return(run)
	return _c
}

// Function provides a mock function for the type MockABIClient
func (_mock *MockABIClient) Function(ctx context.Context, nameOrFullSig string) (ABIFunctionClient, error) {
	ret := _mock.Called(ctx, nameOrFullSig)

	if len(ret) == 0 {
		panic("no return value specified for Function")
	}

	var r0 ABIFunctionClient
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (ABIFunctionClient, error)); ok {
		return returnFunc(ctx, nameOrFullSig)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ABIFunctionClient); ok {
		r0 = returnFunc(ctx, nameOrFullSig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ABIFunctionClient)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, nameOrFullSig)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockABIClient_Function_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Function'
type MockABIClient_Function_Call struct {
	*mock.Call
}

// Function is a helper method to define mock.On call
//   - ctx context.Context
//   - nameOrFullSig string
func (_e *MockABIClient_Expecter) Function(ctx interface{}, nameOrFullSig interface{}) *MockABIClient_Function_Call {
	return &MockABIClient_Function_Call{Call: _e.mock.On("Function", ctx, nameOrFullSig)}
}

func (_c *MockABIClient_Function_Call) Run(run func(ctx context.Context, nameOrFullSig string)) *MockABIClient_Function_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockABIClient_Function_Call) Return(aBIFunctionClient ABIFunctionClient, err error) *MockABIClient_Function_Call {
	_c.Call.Return(aBIFunctionClient, err)
	return _c
}

func (_c *MockABIClient_Function_Call) RunAndReturn(run func(ctx context.Context, nameOrFullSig string) (ABIFunctionClient, error)) *MockABIClient_Function_Call {
	_c.Call.Return(run)
	return _c
}

// MustConstructor provides a mock function for the type MockABIClient
func (_mock *MockABIClient) MustConstructor(bytecode pldtypes.HexBytes) ABIFunctionClient {
	ret := _mock.Called(bytecode)

	if len(ret) == 0 {
		panic("no return value specified for MustConstructor")
	}

	var r0 ABIFunctionClient
	if returnFunc, ok := ret.Get(0).(func(pldtypes.HexBytes) ABIFunctionClient); ok {
		r0 = returnFunc(bytecode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ABIFunctionClient)
		}
	}
	return r0
}

// MockABIClient_MustConstructor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MustConstructor'
type MockABIClient_MustConstructor_Call struct {
	*mock.Call
}

// MustConstructor is a helper method to define mock.On call
//   - bytecode pldtypes.HexBytes
func (_e *MockABIClient_Expecter) MustConstructor(bytecode interface{}) *MockABIClient_MustConstructor_Call {
	return &MockABIClient_MustConstructor_Call{Call: _e.mock.On("MustConstructor", bytecode)}
}

func (_c *MockABIClient_MustConstructor_Call) Run(run func(bytecode pldtypes.HexBytes)) *MockABIClient_MustConstructor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 pldtypes.HexBytes
		if args[0] != nil {
			arg0 = args[0].(pldtypes.HexBytes)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockABIClient_MustConstructor_Call) Return(aBIFunctionClient ABIFunctionClient) *MockABIClient_MustConstructor_Call {
	_c.Call.Return(aBIFunctionClient)
	return _c
}

func (_c *MockABIClient_MustConstructor_Call) RunAndReturn(run func(bytecode pldtypes.HexBytes) ABIFunctionClient) *MockABIClient_MustConstructor_Call {
	_c.Call.Return(run)
	return _c
}

// MustFunction provides a mock function for the type MockABIClient
func (_mock *MockABIClient) MustFunction(nameOrFullSig string) ABIFunctionClient {
	ret := _mock.Called(nameOrFullSig)

	if len(ret) == 0 {
		panic("no return value specified for MustFunction")
	}

	var r0 ABIFunctionClient
	if returnFunc, ok := ret.Get(0).(func(string) ABIFunctionClient); ok {
		r0 = returnFunc(nameOrFullSig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ABIFunctionClient)
		}
	}
	return r0
}

// MockABIClient_MustFunction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MustFunction'
type MockABIClient_MustFunction_Call struct {
	*mock.Call
}

// MustFunction is a helper method to define mock.On call
//   - nameOrFullSig string
func (_e *MockABIClient_Expecter) MustFunction(nameOrFullSig interface{}) *MockABIClient_MustFunction_Call {
	return &MockABIClient_MustFunction_Call{Call: _e.mock.On("MustFunction", nameOrFullSig)}
}

func (_c *MockABIClient_MustFunction_Call) Run(run func(nameOrFullSig string)) *MockABIClient_MustFunction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockABIClient_MustFunction_Call) Return(aBIFunctionClient ABIFunctionClient) *MockABIClient_MustFunction_Call {
	_c.Call.Return(aBIFunctionClient)
	return _c
}

func (_c *MockABIClient_MustFunction_Call) RunAndReturn(run func(nameOrFullSig string) ABIFunctionClient) *MockABIClient_MustFunction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockABIFunctionRequestBuilder creates a new instance of MockABIFunctionRequestBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockABIFunctionRequestBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockABIFunctionRequestBuilder {
	mock := &MockABIFunctionRequestBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockABIFunctionRequestBuilder is an autogenerated mock type for the ABIFunctionRequestBuilder type
type MockABIFunctionRequestBuilder struct {
	mock.Mock
}

type MockABIFunctionRequestBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockABIFunctionRequestBuilder) EXPECT() *MockABIFunctionRequestBuilder_Expecter {
	return &MockABIFunctionRequestBuilder_Expecter{mock: &_m.Mock}
}

// Block provides a mock function for the type MockABIFunctionRequestBuilder
func (_mock *MockABIFunctionRequestBuilder) Block(v uint64) ABIFunctionRequestBuilder {
	ret := _mock.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for Block")
	}

	var r0 ABIFunctionRequestBuilder
	if returnFunc, ok := ret.Get(0).(func(uint64) ABIFunctionRequestBuilder); ok {
		r0 = returnFunc(v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ABIFunctionRequestBuilder)
		}
	}
	return r0
}

// MockABIFunctionRequestBuilder_Block_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Block'
type MockABIFunctionRequestBuilder_Block_Call struct {
	*mock.Call
}

// Block is a helper method to define mock.On call
//   - v uint64
func (_e *MockABIFunctionRequestBuilder_Expecter) Block(v interface{}) *MockABIFunctionRequestBuilder_Block_Call {
	return &MockABIFunctionRequestBuilder_Block_Call{Call: _e.mock.On("Block", v)}
}

func (_c *MockABIFunctionRequestBuilder_Block_Call) Run(run func(v uint64)) *MockABIFunctionRequestBuilder_Block_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uint64
		if args[0] != nil {
			arg0 = args[0].(uint64)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockABIFunctionRequestBuilder_Block_Call) Return(aBIFunctionRequestBuilder ABIFunctionRequestBuilder) *MockABIFunctionRequestBuilder_Block_Call {
	_c.Call.Return(aBIFunctionRequestBuilder)
	return _c
}

func (_c *MockABIFunctionRequestBuilder_Block_Call) RunAndReturn(run func(v uint64) ABIFunctionRequestBuilder) *MockABIFunctionRequestBuilder_Block_Call {
	_c.Call.Return(run)
	return _c
}

// BlockRef provides a mock function for the type MockABIFunctionRequestBuilder
func (_mock *MockABIFunctionRequestBuilder) BlockRef(blockRef BlockRef) ABIFunctionRequestBuilder {
	ret := _mock.Called(blockRef)

	if len(ret) == 0 {
		panic("no return value specified for BlockRef")
	}

	var r0 ABIFunctionRequestBuilder
	if returnFunc, ok := ret.Get(0).(func(BlockRef) ABIFunctionRequestBuilder); ok {
		r0 = returnFunc(blockRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ABIFunctionRequestBuilder)
		}
	}
	return r0
}

// MockABIFunctionRequestBuilder_BlockRef_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockRef'
type MockABIFunctionRequestBuilder_BlockRef_Call struct {
	*mock.Call
}

// BlockRef is a helper method to define mock.On call
//   - blockRef BlockRef
func (_e *MockABIFunctionRequestBuilder_Expecter) BlockRef(blockRef interface{}) *MockABIFunctionRequestBuilder_BlockRef_Call {
	return &MockABIFunctionRequestBuilder_BlockRef_Call{Call: _e.mock.On("BlockRef", blockRef)}
}

func (_c *MockABIFunctionRequestBuilder_BlockRef_Call) Run(run func(blockRef BlockRef)) *MockABIFunctionRequestBuilder_BlockRef_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 BlockRef
		if args[0] != nil {
			arg0 = args[0].(BlockRef)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockABIFunctionRequestBuilder_BlockRef_Call) Return(aBIFunctionRequestBuilder ABIFunctionRequestBuilder) *MockABIFunctionRequestBuilder_BlockRef_Call {
	_c.Call.Return(aBIFunctionRequestBuilder)
	return _c
}

func (_c *MockABIFunctionRequestBuilder_BlockRef_Call) RunAndReturn(run func(blockRef BlockRef) ABIFunctionRequestBuilder) *MockABIFunctionRequestBuilder_BlockRef_Call {
	_c.Call.Return(run)
	return _c
}

// BuildCallData provides a mock function for the type MockABIFunctionRequestBuilder
func (_mock *MockABIFunctionRequestBuilder) BuildCallData() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for BuildCallData")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockABIFunctionRequestBuilder_BuildCallData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildCallData'
type MockABIFunctionRequestBuilder_BuildCallData_Call struct {
	*mock.Call
}

// BuildCallData is a helper method to define mock.On call
func (_e *MockABIFunctionRequestBuilder_Expecter) BuildCallData() *MockABIFunctionRequestBuilder_BuildCallData_Call {
	return &MockABIFunctionRequestBuilder_BuildCallData_Call{Call: _e.mock.On("BuildCallData")}
}

func (_c *MockABIFunctionRequestBuilder_BuildCallData_Call) Run(run func()) *MockABIFunctionRequestBuilder_BuildCallData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockABIFunctionRequestBuilder_BuildCallData_Call) Return(err error) *MockABIFunctionRequestBuilder_BuildCallData_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockABIFunctionRequestBuilder_BuildCallData_Call) RunAndReturn(run func() error) *MockABIFunctionRequestBuilder_BuildCallData_Call {
	_c.Call.Return(run)
	return _c
}

// Call provides a mock function for the type MockABIFunctionRequestBuilder
func (_mock *MockABIFunctionRequestBuilder) Call() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Call")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockABIFunctionRequestBuilder_Call_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Call'
type MockABIFunctionRequestBuilder_Call_Call struct {
	*mock.Call
}

// Call is a helper method to define mock.On call
func (_e *MockABIFunctionRequestBuilder_Expecter) Call() *MockABIFunctionRequestBuilder_Call_Call {
	return &MockABIFunctionRequestBuilder_Call_Call{Call: _e.mock.On("Call")}
}

func (_c *MockABIFunctionRequestBuilder_Call_Call) Run(run func()) *MockABIFunctionRequestBuilder_Call_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockABIFunctionRequestBuilder_Call_Call) Return(err error) *MockABIFunctionRequestBuilder_Call_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockABIFunctionRequestBuilder_Call_Call) RunAndReturn(run func() error) *MockABIFunctionRequestBuilder_Call_Call {
	_c.Call.Return(run)
	return _c
}

// CallOptions provides a mock function for the type MockABIFunctionRequestBuilder
func (_mock *MockABIFunctionRequestBuilder) CallOptions(callOptions ...CallOption) ABIFunctionRequestBuilder {
	// CallOption
	_va := make([]interface{}, len(callOptions))
	for _i := range callOptions {
		_va[_i] = callOptions[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CallOptions")
	}

	var r0 ABIFunctionRequestBuilder
	if returnFunc, ok := ret.Get(0).(func(...CallOption) ABIFunctionRequestBuilder); ok {
		r0 = returnFunc(callOptions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ABIFunctionRequestBuilder)
		}
	}
	return r0
}

// MockABIFunctionRequestBuilder_CallOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallOptions'
type MockABIFunctionRequestBuilder_CallOptions_Call struct {
	*mock.Call
}

// CallOptions is a helper method to define mock.On call
//   - callOptions ...CallOption
func (_e *MockABIFunctionRequestBuilder_Expecter) CallOptions(callOptions ...interface{}) *MockABIFunctionRequestBuilder_CallOptions_Call {
	return &MockABIFunctionRequestBuilder_CallOptions_Call{Call: _e.mock.On("CallOptions",
		append([]interface{}{}, callOptions...)...)}
}

func (_c *MockABIFunctionRequestBuilder_CallOptions_Call) Run(run func(callOptions ...CallOption)) *MockABIFunctionRequestBuilder_CallOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []CallOption
		variadicArgs := make([]CallOption, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(CallOption)
			}
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *MockABIFunctionRequestBuilder_CallOptions_Call) Return(aBIFunctionRequestBuilder ABIFunctionRequestBuilder) *MockABIFunctionRequestBuilder_CallOptions_Call {
	_c.Call.Return(aBIFunctionRequestBuilder)
	return _c
}

func (_c *MockABIFunctionRequestBuilder_CallOptions_Call) RunAndReturn(run func(callOptions ...CallOption) ABIFunctionRequestBuilder) *MockABIFunctionRequestBuilder_CallOptions_Call {
	_c.Call.Return(run)
	return _c
}

// CallResult provides a mock function for the type MockABIFunctionRequestBuilder
func (_mock *MockABIFunctionRequestBuilder) CallResult() (CallResult, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CallResult")
	}

	var r0 CallResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (CallResult, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() CallResult); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(CallResult)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockABIFunctionRequestBuilder_CallResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallResult'
type MockABIFunctionRequestBuilder_CallResult_Call struct {
	*mock.Call
}

// CallResult is a helper method to define mock.On call
func (_e *MockABIFunctionRequestBuilder_Expecter) CallResult() *MockABIFunctionRequestBuilder_CallResult_Call {
	return &MockABIFunctionRequestBuilder_CallResult_Call{Call: _e.mock.On("CallResult")}
}

func (_c *MockABIFunctionRequestBuilder_CallResult_Call) Run(run func()) *MockABIFunctionRequestBuilder_CallResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockABIFunctionRequestBuilder_CallResult_Call) Return(res CallResult, err error) *MockABIFunctionRequestBuilder_CallResult_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockABIFunctionRequestBuilder_CallResult_Call) RunAndReturn(run func() (CallResult, error)) *MockABIFunctionRequestBuilder_CallResult_Call {
	_c.Call.Return(run)
	return _c
}

// EstimateGas provides a mock function for the type MockABIFunctionRequestBuilder
func (_mock *MockABIFunctionRequestBuilder) EstimateGas() (EstimateGasResult, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for EstimateGas")
	}

	var r0 EstimateGasResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (EstimateGasResult, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() EstimateGasResult); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(EstimateGasResult)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockABIFunctionRequestBuilder_EstimateGas_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EstimateGas'
type MockABIFunctionRequestBuilder_EstimateGas_Call struct {
	*mock.Call
}

// EstimateGas is a helper method to define mock.On call
func (_e *MockABIFunctionRequestBuilder_Expecter) EstimateGas() *MockABIFunctionRequestBuilder_EstimateGas_Call {
	return &MockABIFunctionRequestBuilder_EstimateGas_Call{Call: _e.mock.On("EstimateGas")}
}

func (_c *MockABIFunctionRequestBuilder_EstimateGas_Call) Run(run func()) *MockABIFunctionRequestBuilder_EstimateGas_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockABIFunctionRequestBuilder_EstimateGas_Call) Return(res EstimateGasResult, err error) *MockABIFunctionRequestBuilder_EstimateGas_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockABIFunctionRequestBuilder_EstimateGas_Call) RunAndReturn(run func() (EstimateGasResult, error)) *MockABIFunctionRequestBuilder_EstimateGas_Call {
	_c.Call.Return(run)
	return _c
}

// GasLimit provides a mock function for the type MockABIFunctionRequestBuilder
func (_mock *MockABIFunctionRequestBuilder) GasLimit(v uint64) ABIFunctionRequestBuilder {
	ret := _mock.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for GasLimit")
	}

	var r0 ABIFunctionRequestBuilder
	if returnFunc, ok := ret.Get(0).(func(uint64) ABIFunctionRequestBuilder); ok {
		r0 = returnFunc(v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ABIFunctionRequestBuilder)
		}
	}
	return r0
}

// MockABIFunctionRequestBuilder_GasLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GasLimit'
type MockABIFunctionRequestBuilder_GasLimit_Call struct {
	*mock.Call
}

// GasLimit is a helper method to define mock.On call
//   - v uint64
func (_e *MockABIFunctionRequestBuilder_Expecter) GasLimit(v interface{}) *MockABIFunctionRequestBuilder_GasLimit_Call {
	return &MockABIFunctionRequestBuilder_GasLimit_Call{Call: _e.mock.On("GasLimit", v)}
}

func (_c *MockABIFunctionRequestBuilder_GasLimit_Call) Run(run func(v uint64)) *MockABIFunctionRequestBuilder_GasLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uint64
		if args[0] != nil {
			arg0 = args[0].(uint64)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockABIFunctionRequestBuilder_GasLimit_Call) Return(aBIFunctionRequestBuilder ABIFunctionRequestBuilder) *MockABIFunctionRequestBuilder_GasLimit_Call {
	_c.Call.Return(aBIFunctionRequestBuilder)
	return _c
}

func (_c *MockABIFunctionRequestBuilder_GasLimit_Call) RunAndReturn(run func(v uint64) ABIFunctionRequestBuilder) *MockABIFunctionRequestBuilder_GasLimit_Call {
	_c.Call.Return(run)
	return _c
}

// Input provides a mock function for the type MockABIFunctionRequestBuilder
func (_mock *MockABIFunctionRequestBuilder) Input(v any) ABIFunctionRequestBuilder {
	ret := _mock.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for Input")
	}

	var r0 ABIFunctionRequestBuilder
	if returnFunc, ok := ret.Get(0).(func(any) ABIFunctionRequestBuilder); ok {
		r0 = returnFunc(v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ABIFunctionRequestBuilder)
		}
	}
	return r0
}

// MockABIFunctionRequestBuilder_Input_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Input'
type MockABIFunctionRequestBuilder_Input_Call struct {
	*mock.Call
}

// Input is a helper method to define mock.On call
//   - v any
func (_e *MockABIFunctionRequestBuilder_Expecter) Input(v interface{}) *MockABIFunctionRequestBuilder_Input_Call {
	return &MockABIFunctionRequestBuilder_Input_Call{Call: _e.mock.On("Input", v)}
}

func (_c *MockABIFunctionRequestBuilder_Input_Call) Run(run func(v any)) *MockABIFunctionRequestBuilder_Input_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockABIFunctionRequestBuilder_Input_Call) Return(aBIFunctionRequestBuilder ABIFunctionRequestBuilder) *MockABIFunctionRequestBuilder_Input_Call {
	_c.Call.Return(aBIFunctionRequestBuilder)
	return _c
}

func (_c *MockABIFunctionRequestBuilder_Input_Call) RunAndReturn(run func(v any) ABIFunctionRequestBuilder) *MockABIFunctionRequestBuilder_Input_Call {
	_c.Call.Return(run)
	return _c
}

// Output provides a mock function for the type MockABIFunctionRequestBuilder
func (_mock *MockABIFunctionRequestBuilder) Output(v any) ABIFunctionRequestBuilder {
	ret := _mock.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for Output")
	}

	var r0 ABIFunctionRequestBuilder
	if returnFunc, ok := ret.Get(0).(func(any) ABIFunctionRequestBuilder); ok {
		r0 = returnFunc(v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ABIFunctionRequestBuilder)
		}
	}
	return r0
}

// MockABIFunctionRequestBuilder_Output_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Output'
type MockABIFunctionRequestBuilder_Output_Call struct {
	*mock.Call
}

// Output is a helper method to define mock.On call
//   - v any
func (_e *MockABIFunctionRequestBuilder_Expecter) Output(v interface{}) *MockABIFunctionRequestBuilder_Output_Call {
	return &MockABIFunctionRequestBuilder_Output_Call{Call: _e.mock.On("Output", v)}
}

func (_c *MockABIFunctionRequestBuilder_Output_Call) Run(run func(v any)) *MockABIFunctionRequestBuilder_Output_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockABIFunctionRequestBuilder_Output_Call) Return(aBIFunctionRequestBuilder ABIFunctionRequestBuilder) *MockABIFunctionRequestBuilder_Output_Call {
	_c.Call.Return(aBIFunctionRequestBuilder)
	return _c
}

func (_c *MockABIFunctionRequestBuilder_Output_Call) RunAndReturn(run func(v any) ABIFunctionRequestBuilder) *MockABIFunctionRequestBuilder_Output_Call {
	_c.Call.Return(run)
	return _c
}

// RawTransaction provides a mock function for the type MockABIFunctionRequestBuilder
func (_mock *MockABIFunctionRequestBuilder) RawTransaction() (pldtypes.HexBytes, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for RawTransaction")
	}

	var r0 pldtypes.HexBytes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (pldtypes.HexBytes, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() pldtypes.HexBytes); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pldtypes.HexBytes)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockABIFunctionRequestBuilder_RawTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RawTransaction'
type MockABIFunctionRequestBuilder_RawTransaction_Call struct {
	*mock.Call
}

// RawTransaction is a helper method to define mock.On call
func (_e *MockABIFunctionRequestBuilder_Expecter) RawTransaction() *MockABIFunctionRequestBuilder_RawTransaction_Call {
	return &MockABIFunctionRequestBuilder_RawTransaction_Call{Call: _e.mock.On("RawTransaction")}
}

func (_c *MockABIFunctionRequestBuilder_RawTransaction_Call) Run(run func()) *MockABIFunctionRequestBuilder_RawTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockABIFunctionRequestBuilder_RawTransaction_Call) Return(rawTX pldtypes.HexBytes, err error) *MockABIFunctionRequestBuilder_RawTransaction_Call {
	_c.Call.Return(rawTX, err)
	return _c
}

func (_c *MockABIFunctionRequestBuilder_RawTransaction_Call) RunAndReturn(run func() (pldtypes.HexBytes, error)) *MockABIFunctionRequestBuilder_RawTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// Serializer provides a mock function for the type MockABIFunctionRequestBuilder
func (_mock *MockABIFunctionRequestBuilder) Serializer(serializer *abi.Serializer) ABIFunctionRequestBuilder {
	ret := _mock.Called(serializer)

	if len(ret) == 0 {
		panic("no return value specified for Serializer")
	}

	var r0 ABIFunctionRequestBuilder
	if returnFunc, ok := ret.Get(0).(func(*abi.Serializer) ABIFunctionRequestBuilder); ok {
		r0 = returnFunc(serializer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ABIFunctionRequestBuilder)
		}
	}
	return r0
}

// MockABIFunctionRequestBuilder_Serializer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Serializer'
type MockABIFunctionRequestBuilder_Serializer_Call struct {
	*mock.Call
}

// Serializer is a helper method to define mock.On call
//   - serializer *abi.Serializer
func (_e *MockABIFunctionRequestBuilder_Expecter) Serializer(serializer interface{}) *MockABIFunctionRequestBuilder_Serializer_Call {
	return &MockABIFunctionRequestBuilder_Serializer_Call{Call: _e.mock.On("Serializer", serializer)}
}

func (_c *MockABIFunctionRequestBuilder_Serializer_Call) Run(run func(serializer *abi.Serializer)) *MockABIFunctionRequestBuilder_Serializer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *abi.Serializer
		if args[0] != nil {
			arg0 = args[0].(*abi.Serializer)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockABIFunctionRequestBuilder_Serializer_Call) Return(aBIFunctionRequestBuilder ABIFunctionRequestBuilder) *MockABIFunctionRequestBuilder_Serializer_Call {
	_c.Call.Return(aBIFunctionRequestBuilder)
	return _c
}

func (_c *MockABIFunctionRequestBuilder_Serializer_Call) RunAndReturn(run func(serializer *abi.Serializer) ABIFunctionRequestBuilder) *MockABIFunctionRequestBuilder_Serializer_Call {
	_c.Call.Return(run)
	return _c
}

// SignAndSend provides a mock function for the type MockABIFunctionRequestBuilder
func (_mock *MockABIFunctionRequestBuilder) SignAndSend() (*pldtypes.Bytes32, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for SignAndSend")
	}

	var r0 *pldtypes.Bytes32
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*pldtypes.Bytes32, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *pldtypes.Bytes32); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldtypes.Bytes32)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockABIFunctionRequestBuilder_SignAndSend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignAndSend'
type MockABIFunctionRequestBuilder_SignAndSend_Call struct {
	*mock.Call
}

// SignAndSend is a helper method to define mock.On call
func (_e *MockABIFunctionRequestBuilder_Expecter) SignAndSend() *MockABIFunctionRequestBuilder_SignAndSend_Call {
	return &MockABIFunctionRequestBuilder_SignAndSend_Call{Call: _e.mock.On("SignAndSend")}
}

func (_c *MockABIFunctionRequestBuilder_SignAndSend_Call) Run(run func()) *MockABIFunctionRequestBuilder_SignAndSend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockABIFunctionRequestBuilder_SignAndSend_Call) Return(txHash *pldtypes.Bytes32, err error) *MockABIFunctionRequestBuilder_SignAndSend_Call {
	_c.Call.Return(txHash, err)
	return _c
}

func (_c *MockABIFunctionRequestBuilder_SignAndSend_Call) RunAndReturn(run func() (*pldtypes.Bytes32, error)) *MockABIFunctionRequestBuilder_SignAndSend_Call {
	_c.Call.Return(run)
	return _c
}

// Signer provides a mock function for the type MockABIFunctionRequestBuilder
func (_mock *MockABIFunctionRequestBuilder) Signer(s string) ABIFunctionRequestBuilder {
	ret := _mock.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for Signer")
	}

	var r0 ABIFunctionRequestBuilder
	if returnFunc, ok := ret.Get(0).(func(string) ABIFunctionRequestBuilder); ok {
		r0 = returnFunc(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ABIFunctionRequestBuilder)
		}
	}
	return r0
}

// MockABIFunctionRequestBuilder_Signer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Signer'
type MockABIFunctionRequestBuilder_Signer_Call struct {
	*mock.Call
}

// Signer is a helper method to define mock.On call
//   - s string
func (_e *MockABIFunctionRequestBuilder_Expecter) Signer(s interface{}) *MockABIFunctionRequestBuilder_Signer_Call {
	return &MockABIFunctionRequestBuilder_Signer_Call{Call: _e.mock.On("Signer", s)}
}

func (_c *MockABIFunctionRequestBuilder_Signer_Call) Run(run func(s string)) *MockABIFunctionRequestBuilder_Signer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockABIFunctionRequestBuilder_Signer_Call) Return(aBIFunctionRequestBuilder ABIFunctionRequestBuilder) *MockABIFunctionRequestBuilder_Signer_Call {
	_c.Call.Return(aBIFunctionRequestBuilder)
	return _c
}

func (_c *MockABIFunctionRequestBuilder_Signer_Call) RunAndReturn(run func(s string) ABIFunctionRequestBuilder) *MockABIFunctionRequestBuilder_Signer_Call {
	_c.Call.Return(run)
	return _c
}

// TX provides a mock function for the type MockABIFunctionRequestBuilder
func (_mock *MockABIFunctionRequestBuilder) TX() *ethsigner.Transaction {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for TX")
	}

	var r0 *ethsigner.Transaction
	if returnFunc, ok := ret.Get(0).(func() *ethsigner.Transaction); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ethsigner.Transaction)
		}
	}
	return r0
}

// MockABIFunctionRequestBuilder_TX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TX'
type MockABIFunctionRequestBuilder_TX_Call struct {
	*mock.Call
}

// TX is a helper method to define mock.On call
func (_e *MockABIFunctionRequestBuilder_Expecter) TX() *MockABIFunctionRequestBuilder_TX_Call {
	return &MockABIFunctionRequestBuilder_TX_Call{Call: _e.mock.On("TX")}
}

func (_c *MockABIFunctionRequestBuilder_TX_Call) Run(run func()) *MockABIFunctionRequestBuilder_TX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockABIFunctionRequestBuilder_TX_Call) Return(transaction *ethsigner.Transaction) *MockABIFunctionRequestBuilder_TX_Call {
	_c.Call.Return(transaction)
	return _c
}

func (_c *MockABIFunctionRequestBuilder_TX_Call) RunAndReturn(run func() *ethsigner.Transaction) *MockABIFunctionRequestBuilder_TX_Call {
	_c.Call.Return(run)
	return _c
}

// TXVersion provides a mock function for the type MockABIFunctionRequestBuilder
func (_mock *MockABIFunctionRequestBuilder) TXVersion(ethTXVersion EthTXVersion) ABIFunctionRequestBuilder {
	ret := _mock.Called(ethTXVersion)

	if len(ret) == 0 {
		panic("no return value specified for TXVersion")
	}

	var r0 ABIFunctionRequestBuilder
	if returnFunc, ok := ret.Get(0).(func(EthTXVersion) ABIFunctionRequestBuilder); ok {
		r0 = returnFunc(ethTXVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ABIFunctionRequestBuilder)
		}
	}
	return r0
}

// MockABIFunctionRequestBuilder_TXVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TXVersion'
type MockABIFunctionRequestBuilder_TXVersion_Call struct {
	*mock.Call
}

// TXVersion is a helper method to define mock.On call
//   - ethTXVersion EthTXVersion
func (_e *MockABIFunctionRequestBuilder_Expecter) TXVersion(ethTXVersion interface{}) *MockABIFunctionRequestBuilder_TXVersion_Call {
	return &MockABIFunctionRequestBuilder_TXVersion_Call{Call: _e.mock.On("TXVersion", ethTXVersion)}
}

func (_c *MockABIFunctionRequestBuilder_TXVersion_Call) Run(run func(ethTXVersion EthTXVersion)) *MockABIFunctionRequestBuilder_TXVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 EthTXVersion
		if args[0] != nil {
			arg0 = args[0].(EthTXVersion)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockABIFunctionRequestBuilder_TXVersion_Call) Return(aBIFunctionRequestBuilder ABIFunctionRequestBuilder) *MockABIFunctionRequestBuilder_TXVersion_Call {
	_c.Call.Return(aBIFunctionRequestBuilder)
	return _c
}

func (_c *MockABIFunctionRequestBuilder_TXVersion_Call) RunAndReturn(run func(ethTXVersion EthTXVersion) ABIFunctionRequestBuilder) *MockABIFunctionRequestBuilder_TXVersion_Call {
	_c.Call.Return(run)
	return _c
}

// To provides a mock function for the type MockABIFunctionRequestBuilder
func (_mock *MockABIFunctionRequestBuilder) To(address0xHex *ethtypes.Address0xHex) ABIFunctionRequestBuilder {
	ret := _mock.Called(address0xHex)

	if len(ret) == 0 {
		panic("no return value specified for To")
	}

	var r0 ABIFunctionRequestBuilder
	if returnFunc, ok := ret.Get(0).(func(*ethtypes.Address0xHex) ABIFunctionRequestBuilder); ok {
		r0 = returnFunc(address0xHex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ABIFunctionRequestBuilder)
		}
	}
	return r0
}

// MockABIFunctionRequestBuilder_To_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'To'
type MockABIFunctionRequestBuilder_To_Call struct {
	*mock.Call
}

// To is a helper method to define mock.On call
//   - address0xHex *ethtypes.Address0xHex
func (_e *MockABIFunctionRequestBuilder_Expecter) To(address0xHex interface{}) *MockABIFunctionRequestBuilder_To_Call {
	return &MockABIFunctionRequestBuilder_To_Call{Call: _e.mock.On("To", address0xHex)}
}

func (_c *MockABIFunctionRequestBuilder_To_Call) Run(run func(address0xHex *ethtypes.Address0xHex)) *MockABIFunctionRequestBuilder_To_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ethtypes.Address0xHex
		if args[0] != nil {
			arg0 = args[0].(*ethtypes.Address0xHex)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockABIFunctionRequestBuilder_To_Call) Return(aBIFunctionRequestBuilder ABIFunctionRequestBuilder) *MockABIFunctionRequestBuilder_To_Call {
	_c.Call.Return(aBIFunctionRequestBuilder)
	return _c
}

func (_c *MockABIFunctionRequestBuilder_To_Call) RunAndReturn(run func(address0xHex *ethtypes.Address0xHex) ABIFunctionRequestBuilder) *MockABIFunctionRequestBuilder_To_Call {
	_c.Call.Return(run)
	return _c
}
