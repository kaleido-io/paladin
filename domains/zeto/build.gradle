/*
 * Copyright Â© 2024 Kaleido, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

ext {
    goFiles = fileTree(".") {
        include "internal/**/*.go"
        include "pkg/**/*.go"
    }
    goFilesE2E = fileTree(".") {
        include "integration-test/**/*.go"
    }
    targetCoverage = 92.5
    maxCoverageBarGap = 1
    coveragePackages = [
        "github.com/LF-Decentralized-Trust-labs/paladin/domains/zeto/internal/...",
        "github.com/LF-Decentralized-Trust-labs/paladin/domains/zeto/pkg/types/states.go",
        "github.com/LF-Decentralized-Trust-labs/paladin/domains/zeto/pkg/zetosigner",
    ]

    zetoVersion = "v0.2.0"
    zetoHost = "hyperledger-labs"
    zkpOut = "${projectDir}/zkp"
    toolsOut = "${projectDir}/tools"
}

configurations {
    // Resolvable configurations
    contractCompile {
        canBeConsumed = false
        canBeResolved = true
    }
    toolkitGo {
        canBeConsumed = false
        canBeResolved = true
    }
    coreGo {
        canBeConsumed = false
        canBeResolved = true
    }

    // Consumable configurations
    goSource {
        canBeConsumed = true
        canBeResolved = false
    }
    zetoArtifacts {
        canBeConsumed = true
        canBeResolved = false
    }
    poseidonArtifacts {
        canBeConsumed = true
        canBeResolved = false
    }
}

dependencies {
    contractCompile project(path: ":solidity", configuration: "compiledContracts")
    toolkitGo project(path: ":toolkit:go", configuration: "goSource")
    coreGo project(path: ":core:go", configuration: "goSource")
}

task downloadZetoProver() {
    def outname = "zeto-wasm-${zetoVersion}.tar.gz"
    def url = "https://github.com/${zetoHost}/zeto/releases/download/${zetoVersion}/${outname}"
    def f = new File(toolsOut, outname)
    doFirst {
        mkdir(f.parent)
        new URL(url).withInputStream{ i -> f.withOutputStream{ it << i }}
    }
    outputs.file(f)
}

task downloadZetoTestProvingKeys() {
    def outname = "zeto-test-proving-keys-${zetoVersion}.tar.gz"
    def url = "https://github.com/${zetoHost}/zeto/releases/download/${zetoVersion}/${outname}"
    def f = new File(toolsOut, outname)
    doFirst {
        mkdir(f.parent)
        new URL(url).withInputStream{ i -> f.withOutputStream{ it << i }}
    }
    outputs.file(f)
}

task downloadZetoCompiledContracts() {
    def outname = "zeto-contracts-${zetoVersion}.tar.gz"
    def url = "https://github.com/${zetoHost}/zeto/releases/download/${zetoVersion}/${outname}"
    def f = new File(toolsOut, outname)
    doFirst {
        mkdir(f.parent)
        new URL(url).withInputStream{ i -> f.withOutputStream{ it << i }}
    }
    outputs.file(f)
}

task installPoseidonDependencies(type: Exec) {
    outputs.dir("${toolsOut}/solidity")

    workingDir "${toolsOut}/solidity"
    executable "npm"
    args "install"
    args "circomlibjs@0.1.7"
}

task protoc(type: ProtoCompile, dependsOn: [
        ":toolkit:go:protoc",
    ]) {
    protocPath "bin"
    protoPath projectDir
    protoFiles fileTree("pkg/proto") {
        include "**/*.proto"
    }
    plugins {
        go {
            out projectDir
        }
        go_grpc {
            out projectDir
        }
    }
}

task copyPoseidonBuildScript(type: Copy, dependsOn: protoc) {
    from file("${projectDir}/scripts/build-poseidon.js")
    into "${toolsOut}/solidity"
}

task generatePoseidonArtifacts(type: Exec, dependsOn: [installPoseidonDependencies, copyPoseidonBuildScript]) {
    inputs.files(fileTree("${toolsOut}/solidity/node_modules/circomlibjs"))
    outputs.dir("${toolsOut}/solidity")

    workingDir "${toolsOut}/solidity"
    executable "node"
    args "build-poseidon.js"
}

task extractZetoArtifacts(type: Copy, dependsOn: [protoc, downloadZetoProver, downloadZetoTestProvingKeys, downloadZetoCompiledContracts]) {
    from tarTree("${toolsOut}/zeto-wasm-${zetoVersion}.tar.gz")
    from tarTree("${toolsOut}/zeto-test-proving-keys-${zetoVersion}.tar.gz")
    from tarTree("${toolsOut}/zeto-contracts-${zetoVersion}.tar.gz")
    into zkpOut
}

task copySolidity(type: Copy, dependsOn: [protoc, ":solidity:compile", extractZetoArtifacts]) {
    inputs.files(configurations.contractCompile)
    from fileTree(configurations.contractCompile.asPath) {
        include 'contracts/domains/zeto/ZetoFactory.sol/ZetoFactory.json'
    }
    from fileTree("${zkpOut}/artifacts/contracts") {
        include 'lib/interfaces/izeto.sol/IZeto.json'
        include 'lib/interfaces/izeto_kyc.sol/IZetoKyc.json'
        include 'lib/interfaces/izeto_lockable.sol/IZetoLockable.json'
        include 'lib/interfaces/izeto_kyc.sol/IZetoKyc.json'
        include 'lib/interfaces/zeto_fungible_initializable.sol/IZetoFungibleInitializable.json'
        include 'lib/interfaces/zeto_nf_initializable.sol/IZetoNonFungibleInitializable.json'
    }
    into 'internal/zeto/abis'

    // Flatten all paths into the destination folder
    eachFile { path = name }
    includeEmptyDirs = false
}

task copyPkgSolidity(type: Copy) {
    inputs.files(configurations.contractCompile)

    into 'pkg/types/abis'
    from fileTree(configurations.contractCompile.asPath) {
        include 'contracts/domains/interfaces/IZetoFungible.sol/IZetoFungible.json'
        include 'contracts/domains/interfaces/IZetoNonFungible.sol/IZetoNonFungible.json'
    }

    // Flatten all paths into the destination folder
    eachFile { path = name }
    includeEmptyDirs = false
}

task unitTests(type: Exec, dependsOn: [
        protoc,
        ":core:go:makeMocks",
        ":testinfra:startTestInfra",
        downloadZetoCompiledContracts,
        copySolidity,
        copyPkgSolidity,
        ":domains:integration-test:copySolidity" // TODO: find a better way to share this
    ]) {
    inputs.files(configurations.toolkitGo)
    inputs.files(configurations.coreGo)
    inputs.files(goFiles)
    outputs.dir('coverage')

    def packages = project.properties["coveragePackages"].join(",")

    workingDir '.'
    executable 'go'
    args 'test'
    args './internal/...'
    args './pkg/...'
    args '-cover'
    args '-covermode=atomic'
    args '-timeout=30s'
    args "-coverpkg=${packages}"
    args '-coverprofile=coverage.txt'
    if (project.findProperty('verboseTests') == 'true') {
        args '-v'
    }
    helpers.dumpLogsOnFailure(it, ':testinfra:startTestInfra')
}

task checkCoverage(type: GoCheckCoverage, dependsOn: [unitTests]) {
    coverageFile('coverage.txt')
    target = targetCoverage
    maxGap = maxCoverageBarGap
}

task test {
    finalizedBy checkCoverage
}

task buildGo(type: GoLib, dependsOn: [":toolkit:go:protoc", copySolidity, copyPkgSolidity]) {
    inputs.files(configurations.coreGo)
    inputs.files(configurations.toolkitGo)
    baseName "zeto"
    sources goFiles
    mainFile 'zeto.go'
}

task build {
    dependsOn test
}

task clean(type: Delete) {
    delete 'coverage'
    delete 'internal/zeto/abis'
    delete 'pkg/types/abis'
    delete zkpOut
    delete toolsOut
}

task assemble {
    dependsOn buildGo
}

dependencies {
    goSource files(goFiles, copySolidity, copyPkgSolidity)
    zetoArtifacts files(extractZetoArtifacts)
    poseidonArtifacts files(generatePoseidonArtifacts)
}
