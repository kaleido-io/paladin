// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package rpcclient

import (
	"context"

	"github.com/LF-Decentralized-Trust-labs/paladin/sdk/go/pkg/pldtypes"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockByteable creates a new instance of MockByteable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockByteable(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockByteable {
	mock := &MockByteable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockByteable is an autogenerated mock type for the Byteable type
type MockByteable struct {
	mock.Mock
}

type MockByteable_Expecter struct {
	mock *mock.Mock
}

func (_m *MockByteable) EXPECT() *MockByteable_Expecter {
	return &MockByteable_Expecter{mock: &_m.Mock}
}

// Bytes provides a mock function for the type MockByteable
func (_mock *MockByteable) Bytes() []byte {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Bytes")
	}

	var r0 []byte
	if returnFunc, ok := ret.Get(0).(func() []byte); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	return r0
}

// MockByteable_Bytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bytes'
type MockByteable_Bytes_Call struct {
	*mock.Call
}

// Bytes is a helper method to define mock.On call
func (_e *MockByteable_Expecter) Bytes() *MockByteable_Bytes_Call {
	return &MockByteable_Bytes_Call{Call: _e.mock.On("Bytes")}
}

func (_c *MockByteable_Bytes_Call) Run(run func()) *MockByteable_Bytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockByteable_Bytes_Call) Return(bytes []byte) *MockByteable_Bytes_Call {
	_c.Call.Return(bytes)
	return _c
}

func (_c *MockByteable_Bytes_Call) RunAndReturn(run func() []byte) *MockByteable_Bytes_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockErrorRPC creates a new instance of MockErrorRPC. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockErrorRPC(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockErrorRPC {
	mock := &MockErrorRPC{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockErrorRPC is an autogenerated mock type for the ErrorRPC type
type MockErrorRPC struct {
	mock.Mock
}

type MockErrorRPC_Expecter struct {
	mock *mock.Mock
}

func (_m *MockErrorRPC) EXPECT() *MockErrorRPC_Expecter {
	return &MockErrorRPC_Expecter{mock: &_m.Mock}
}

// Error provides a mock function for the type MockErrorRPC
func (_mock *MockErrorRPC) Error() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Error")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockErrorRPC_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockErrorRPC_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
func (_e *MockErrorRPC_Expecter) Error() *MockErrorRPC_Error_Call {
	return &MockErrorRPC_Error_Call{Call: _e.mock.On("Error")}
}

func (_c *MockErrorRPC_Error_Call) Run(run func()) *MockErrorRPC_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockErrorRPC_Error_Call) Return(s string) *MockErrorRPC_Error_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockErrorRPC_Error_Call) RunAndReturn(run func() string) *MockErrorRPC_Error_Call {
	_c.Call.Return(run)
	return _c
}

// RPCError provides a mock function for the type MockErrorRPC
func (_mock *MockErrorRPC) RPCError() *RPCError {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for RPCError")
	}

	var r0 *RPCError
	if returnFunc, ok := ret.Get(0).(func() *RPCError); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RPCError)
		}
	}
	return r0
}

// MockErrorRPC_RPCError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RPCError'
type MockErrorRPC_RPCError_Call struct {
	*mock.Call
}

// RPCError is a helper method to define mock.On call
func (_e *MockErrorRPC_Expecter) RPCError() *MockErrorRPC_RPCError_Call {
	return &MockErrorRPC_RPCError_Call{Call: _e.mock.On("RPCError")}
}

func (_c *MockErrorRPC_RPCError_Call) Run(run func()) *MockErrorRPC_RPCError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockErrorRPC_RPCError_Call) Return(rPCError *RPCError) *MockErrorRPC_RPCError_Call {
	_c.Call.Return(rPCError)
	return _c
}

func (_c *MockErrorRPC_RPCError_Call) RunAndReturn(run func() *RPCError) *MockErrorRPC_RPCError_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// CallRPC provides a mock function for the type MockClient
func (_mock *MockClient) CallRPC(ctx context.Context, result interface{}, method string, params ...interface{}) ErrorRPC {
	var _ca []interface{}
	_ca = append(_ca, ctx, result, method)
	_ca = append(_ca, params...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CallRPC")
	}

	var r0 ErrorRPC
	if returnFunc, ok := ret.Get(0).(func(context.Context, interface{}, string, ...interface{}) ErrorRPC); ok {
		r0 = returnFunc(ctx, result, method, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ErrorRPC)
		}
	}
	return r0
}

// MockClient_CallRPC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallRPC'
type MockClient_CallRPC_Call struct {
	*mock.Call
}

// CallRPC is a helper method to define mock.On call
//   - ctx context.Context
//   - result interface{}
//   - method string
//   - params ...interface{}
func (_e *MockClient_Expecter) CallRPC(ctx interface{}, result interface{}, method interface{}, params ...interface{}) *MockClient_CallRPC_Call {
	return &MockClient_CallRPC_Call{Call: _e.mock.On("CallRPC",
		append([]interface{}{ctx, result, method}, params...)...)}
}

func (_c *MockClient_CallRPC_Call) Run(run func(ctx context.Context, result interface{}, method string, params ...interface{})) *MockClient_CallRPC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []interface{}
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockClient_CallRPC_Call) Return(errorRPC ErrorRPC) *MockClient_CallRPC_Call {
	_c.Call.Return(errorRPC)
	return _c
}

func (_c *MockClient_CallRPC_Call) RunAndReturn(run func(ctx context.Context, result interface{}, method string, params ...interface{}) ErrorRPC) *MockClient_CallRPC_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWSClient creates a new instance of MockWSClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWSClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWSClient {
	mock := &MockWSClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWSClient is an autogenerated mock type for the WSClient type
type MockWSClient struct {
	mock.Mock
}

type MockWSClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWSClient) EXPECT() *MockWSClient_Expecter {
	return &MockWSClient_Expecter{mock: &_m.Mock}
}

// CallRPC provides a mock function for the type MockWSClient
func (_mock *MockWSClient) CallRPC(ctx context.Context, result interface{}, method string, params ...interface{}) ErrorRPC {
	var _ca []interface{}
	_ca = append(_ca, ctx, result, method)
	_ca = append(_ca, params...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CallRPC")
	}

	var r0 ErrorRPC
	if returnFunc, ok := ret.Get(0).(func(context.Context, interface{}, string, ...interface{}) ErrorRPC); ok {
		r0 = returnFunc(ctx, result, method, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ErrorRPC)
		}
	}
	return r0
}

// MockWSClient_CallRPC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallRPC'
type MockWSClient_CallRPC_Call struct {
	*mock.Call
}

// CallRPC is a helper method to define mock.On call
//   - ctx context.Context
//   - result interface{}
//   - method string
//   - params ...interface{}
func (_e *MockWSClient_Expecter) CallRPC(ctx interface{}, result interface{}, method interface{}, params ...interface{}) *MockWSClient_CallRPC_Call {
	return &MockWSClient_CallRPC_Call{Call: _e.mock.On("CallRPC",
		append([]interface{}{ctx, result, method}, params...)...)}
}

func (_c *MockWSClient_CallRPC_Call) Run(run func(ctx context.Context, result interface{}, method string, params ...interface{})) *MockWSClient_CallRPC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []interface{}
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockWSClient_CallRPC_Call) Return(errorRPC ErrorRPC) *MockWSClient_CallRPC_Call {
	_c.Call.Return(errorRPC)
	return _c
}

func (_c *MockWSClient_CallRPC_Call) RunAndReturn(run func(ctx context.Context, result interface{}, method string, params ...interface{}) ErrorRPC) *MockWSClient_CallRPC_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function for the type MockWSClient
func (_mock *MockWSClient) Close() {
	_mock.Called()
	return
}

// MockWSClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockWSClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockWSClient_Expecter) Close() *MockWSClient_Close_Call {
	return &MockWSClient_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockWSClient_Close_Call) Run(run func()) *MockWSClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWSClient_Close_Call) Return() *MockWSClient_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockWSClient_Close_Call) RunAndReturn(run func()) *MockWSClient_Close_Call {
	_c.Run(run)
	return _c
}

// Connect provides a mock function for the type MockWSClient
func (_mock *MockWSClient) Connect(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWSClient_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockWSClient_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockWSClient_Expecter) Connect(ctx interface{}) *MockWSClient_Connect_Call {
	return &MockWSClient_Connect_Call{Call: _e.mock.On("Connect", ctx)}
}

func (_c *MockWSClient_Connect_Call) Run(run func(ctx context.Context)) *MockWSClient_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockWSClient_Connect_Call) Return(err error) *MockWSClient_Connect_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWSClient_Connect_Call) RunAndReturn(run func(ctx context.Context) error) *MockWSClient_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function for the type MockWSClient
func (_mock *MockWSClient) Subscribe(ctx context.Context, conf SubscriptionConfig, params ...interface{}) (Subscription, ErrorRPC) {
	var _ca []interface{}
	_ca = append(_ca, ctx, conf)
	_ca = append(_ca, params...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 Subscription
	var r1 ErrorRPC
	if returnFunc, ok := ret.Get(0).(func(context.Context, SubscriptionConfig, ...interface{}) (Subscription, ErrorRPC)); ok {
		return returnFunc(ctx, conf, params...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, SubscriptionConfig, ...interface{}) Subscription); ok {
		r0 = returnFunc(ctx, conf, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Subscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, SubscriptionConfig, ...interface{}) ErrorRPC); ok {
		r1 = returnFunc(ctx, conf, params...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(ErrorRPC)
		}
	}
	return r0, r1
}

// MockWSClient_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockWSClient_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - conf SubscriptionConfig
//   - params ...interface{}
func (_e *MockWSClient_Expecter) Subscribe(ctx interface{}, conf interface{}, params ...interface{}) *MockWSClient_Subscribe_Call {
	return &MockWSClient_Subscribe_Call{Call: _e.mock.On("Subscribe",
		append([]interface{}{ctx, conf}, params...)...)}
}

func (_c *MockWSClient_Subscribe_Call) Run(run func(ctx context.Context, conf SubscriptionConfig, params ...interface{})) *MockWSClient_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 SubscriptionConfig
		if args[1] != nil {
			arg1 = args[1].(SubscriptionConfig)
		}
		var arg2 []interface{}
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockWSClient_Subscribe_Call) Return(subscription Subscription, errorRPC ErrorRPC) *MockWSClient_Subscribe_Call {
	_c.Call.Return(subscription, errorRPC)
	return _c
}

func (_c *MockWSClient_Subscribe_Call) RunAndReturn(run func(ctx context.Context, conf SubscriptionConfig, params ...interface{}) (Subscription, ErrorRPC)) *MockWSClient_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// Subscriptions provides a mock function for the type MockWSClient
func (_mock *MockWSClient) Subscriptions() []Subscription {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Subscriptions")
	}

	var r0 []Subscription
	if returnFunc, ok := ret.Get(0).(func() []Subscription); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Subscription)
		}
	}
	return r0
}

// MockWSClient_Subscriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscriptions'
type MockWSClient_Subscriptions_Call struct {
	*mock.Call
}

// Subscriptions is a helper method to define mock.On call
func (_e *MockWSClient_Expecter) Subscriptions() *MockWSClient_Subscriptions_Call {
	return &MockWSClient_Subscriptions_Call{Call: _e.mock.On("Subscriptions")}
}

func (_c *MockWSClient_Subscriptions_Call) Run(run func()) *MockWSClient_Subscriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWSClient_Subscriptions_Call) Return(subscriptions []Subscription) *MockWSClient_Subscriptions_Call {
	_c.Call.Return(subscriptions)
	return _c
}

func (_c *MockWSClient_Subscriptions_Call) RunAndReturn(run func() []Subscription) *MockWSClient_Subscriptions_Call {
	_c.Call.Return(run)
	return _c
}

// UnsubscribeAll provides a mock function for the type MockWSClient
func (_mock *MockWSClient) UnsubscribeAll(ctx context.Context) ErrorRPC {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UnsubscribeAll")
	}

	var r0 ErrorRPC
	if returnFunc, ok := ret.Get(0).(func(context.Context) ErrorRPC); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ErrorRPC)
		}
	}
	return r0
}

// MockWSClient_UnsubscribeAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnsubscribeAll'
type MockWSClient_UnsubscribeAll_Call struct {
	*mock.Call
}

// UnsubscribeAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockWSClient_Expecter) UnsubscribeAll(ctx interface{}) *MockWSClient_UnsubscribeAll_Call {
	return &MockWSClient_UnsubscribeAll_Call{Call: _e.mock.On("UnsubscribeAll", ctx)}
}

func (_c *MockWSClient_UnsubscribeAll_Call) Run(run func(ctx context.Context)) *MockWSClient_UnsubscribeAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockWSClient_UnsubscribeAll_Call) Return(errorRPC ErrorRPC) *MockWSClient_UnsubscribeAll_Call {
	_c.Call.Return(errorRPC)
	return _c
}

func (_c *MockWSClient_UnsubscribeAll_Call) RunAndReturn(run func(ctx context.Context) ErrorRPC) *MockWSClient_UnsubscribeAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSubscription creates a new instance of MockSubscription. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSubscription(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSubscription {
	mock := &MockSubscription{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSubscription is an autogenerated mock type for the Subscription type
type MockSubscription struct {
	mock.Mock
}

type MockSubscription_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSubscription) EXPECT() *MockSubscription_Expecter {
	return &MockSubscription_Expecter{mock: &_m.Mock}
}

// LocalID provides a mock function for the type MockSubscription
func (_mock *MockSubscription) LocalID() uuid.UUID {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for LocalID")
	}

	var r0 uuid.UUID
	if returnFunc, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	return r0
}

// MockSubscription_LocalID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LocalID'
type MockSubscription_LocalID_Call struct {
	*mock.Call
}

// LocalID is a helper method to define mock.On call
func (_e *MockSubscription_Expecter) LocalID() *MockSubscription_LocalID_Call {
	return &MockSubscription_LocalID_Call{Call: _e.mock.On("LocalID")}
}

func (_c *MockSubscription_LocalID_Call) Run(run func()) *MockSubscription_LocalID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubscription_LocalID_Call) Return(uUID uuid.UUID) *MockSubscription_LocalID_Call {
	_c.Call.Return(uUID)
	return _c
}

func (_c *MockSubscription_LocalID_Call) RunAndReturn(run func() uuid.UUID) *MockSubscription_LocalID_Call {
	_c.Call.Return(run)
	return _c
}

// Notifications provides a mock function for the type MockSubscription
func (_mock *MockSubscription) Notifications() chan RPCSubscriptionNotification {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Notifications")
	}

	var r0 chan RPCSubscriptionNotification
	if returnFunc, ok := ret.Get(0).(func() chan RPCSubscriptionNotification); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan RPCSubscriptionNotification)
		}
	}
	return r0
}

// MockSubscription_Notifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Notifications'
type MockSubscription_Notifications_Call struct {
	*mock.Call
}

// Notifications is a helper method to define mock.On call
func (_e *MockSubscription_Expecter) Notifications() *MockSubscription_Notifications_Call {
	return &MockSubscription_Notifications_Call{Call: _e.mock.On("Notifications")}
}

func (_c *MockSubscription_Notifications_Call) Run(run func()) *MockSubscription_Notifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubscription_Notifications_Call) Return(rPCSubscriptionNotificationCh chan RPCSubscriptionNotification) *MockSubscription_Notifications_Call {
	_c.Call.Return(rPCSubscriptionNotificationCh)
	return _c
}

func (_c *MockSubscription_Notifications_Call) RunAndReturn(run func() chan RPCSubscriptionNotification) *MockSubscription_Notifications_Call {
	_c.Call.Return(run)
	return _c
}

// Unsubscribe provides a mock function for the type MockSubscription
func (_mock *MockSubscription) Unsubscribe(ctx context.Context) ErrorRPC {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Unsubscribe")
	}

	var r0 ErrorRPC
	if returnFunc, ok := ret.Get(0).(func(context.Context) ErrorRPC); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ErrorRPC)
		}
	}
	return r0
}

// MockSubscription_Unsubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unsubscribe'
type MockSubscription_Unsubscribe_Call struct {
	*mock.Call
}

// Unsubscribe is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSubscription_Expecter) Unsubscribe(ctx interface{}) *MockSubscription_Unsubscribe_Call {
	return &MockSubscription_Unsubscribe_Call{Call: _e.mock.On("Unsubscribe", ctx)}
}

func (_c *MockSubscription_Unsubscribe_Call) Run(run func(ctx context.Context)) *MockSubscription_Unsubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubscription_Unsubscribe_Call) Return(errorRPC ErrorRPC) *MockSubscription_Unsubscribe_Call {
	_c.Call.Return(errorRPC)
	return _c
}

func (_c *MockSubscription_Unsubscribe_Call) RunAndReturn(run func(ctx context.Context) ErrorRPC) *MockSubscription_Unsubscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRPCSubscriptionNotification creates a new instance of MockRPCSubscriptionNotification. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRPCSubscriptionNotification(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRPCSubscriptionNotification {
	mock := &MockRPCSubscriptionNotification{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRPCSubscriptionNotification is an autogenerated mock type for the RPCSubscriptionNotification type
type MockRPCSubscriptionNotification struct {
	mock.Mock
}

type MockRPCSubscriptionNotification_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRPCSubscriptionNotification) EXPECT() *MockRPCSubscriptionNotification_Expecter {
	return &MockRPCSubscriptionNotification_Expecter{mock: &_m.Mock}
}

// Ack provides a mock function for the type MockRPCSubscriptionNotification
func (_mock *MockRPCSubscriptionNotification) Ack(ctx context.Context) ErrorRPC {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ack")
	}

	var r0 ErrorRPC
	if returnFunc, ok := ret.Get(0).(func(context.Context) ErrorRPC); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ErrorRPC)
		}
	}
	return r0
}

// MockRPCSubscriptionNotification_Ack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ack'
type MockRPCSubscriptionNotification_Ack_Call struct {
	*mock.Call
}

// Ack is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRPCSubscriptionNotification_Expecter) Ack(ctx interface{}) *MockRPCSubscriptionNotification_Ack_Call {
	return &MockRPCSubscriptionNotification_Ack_Call{Call: _e.mock.On("Ack", ctx)}
}

func (_c *MockRPCSubscriptionNotification_Ack_Call) Run(run func(ctx context.Context)) *MockRPCSubscriptionNotification_Ack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRPCSubscriptionNotification_Ack_Call) Return(errorRPC ErrorRPC) *MockRPCSubscriptionNotification_Ack_Call {
	_c.Call.Return(errorRPC)
	return _c
}

func (_c *MockRPCSubscriptionNotification_Ack_Call) RunAndReturn(run func(ctx context.Context) ErrorRPC) *MockRPCSubscriptionNotification_Ack_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentSubID provides a mock function for the type MockRPCSubscriptionNotification
func (_mock *MockRPCSubscriptionNotification) GetCurrentSubID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentSubID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockRPCSubscriptionNotification_GetCurrentSubID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentSubID'
type MockRPCSubscriptionNotification_GetCurrentSubID_Call struct {
	*mock.Call
}

// GetCurrentSubID is a helper method to define mock.On call
func (_e *MockRPCSubscriptionNotification_Expecter) GetCurrentSubID() *MockRPCSubscriptionNotification_GetCurrentSubID_Call {
	return &MockRPCSubscriptionNotification_GetCurrentSubID_Call{Call: _e.mock.On("GetCurrentSubID")}
}

func (_c *MockRPCSubscriptionNotification_GetCurrentSubID_Call) Run(run func()) *MockRPCSubscriptionNotification_GetCurrentSubID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRPCSubscriptionNotification_GetCurrentSubID_Call) Return(s string) *MockRPCSubscriptionNotification_GetCurrentSubID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockRPCSubscriptionNotification_GetCurrentSubID_Call) RunAndReturn(run func() string) *MockRPCSubscriptionNotification_GetCurrentSubID_Call {
	_c.Call.Return(run)
	return _c
}

// GetResult provides a mock function for the type MockRPCSubscriptionNotification
func (_mock *MockRPCSubscriptionNotification) GetResult() pldtypes.RawJSON {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetResult")
	}

	var r0 pldtypes.RawJSON
	if returnFunc, ok := ret.Get(0).(func() pldtypes.RawJSON); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pldtypes.RawJSON)
		}
	}
	return r0
}

// MockRPCSubscriptionNotification_GetResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResult'
type MockRPCSubscriptionNotification_GetResult_Call struct {
	*mock.Call
}

// GetResult is a helper method to define mock.On call
func (_e *MockRPCSubscriptionNotification_Expecter) GetResult() *MockRPCSubscriptionNotification_GetResult_Call {
	return &MockRPCSubscriptionNotification_GetResult_Call{Call: _e.mock.On("GetResult")}
}

func (_c *MockRPCSubscriptionNotification_GetResult_Call) Run(run func()) *MockRPCSubscriptionNotification_GetResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRPCSubscriptionNotification_GetResult_Call) Return(rawJSON pldtypes.RawJSON) *MockRPCSubscriptionNotification_GetResult_Call {
	_c.Call.Return(rawJSON)
	return _c
}

func (_c *MockRPCSubscriptionNotification_GetResult_Call) RunAndReturn(run func() pldtypes.RawJSON) *MockRPCSubscriptionNotification_GetResult_Call {
	_c.Call.Return(run)
	return _c
}

// Nack provides a mock function for the type MockRPCSubscriptionNotification
func (_mock *MockRPCSubscriptionNotification) Nack(ctx context.Context) ErrorRPC {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Nack")
	}

	var r0 ErrorRPC
	if returnFunc, ok := ret.Get(0).(func(context.Context) ErrorRPC); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ErrorRPC)
		}
	}
	return r0
}

// MockRPCSubscriptionNotification_Nack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Nack'
type MockRPCSubscriptionNotification_Nack_Call struct {
	*mock.Call
}

// Nack is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRPCSubscriptionNotification_Expecter) Nack(ctx interface{}) *MockRPCSubscriptionNotification_Nack_Call {
	return &MockRPCSubscriptionNotification_Nack_Call{Call: _e.mock.On("Nack", ctx)}
}

func (_c *MockRPCSubscriptionNotification_Nack_Call) Run(run func(ctx context.Context)) *MockRPCSubscriptionNotification_Nack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRPCSubscriptionNotification_Nack_Call) Return(errorRPC ErrorRPC) *MockRPCSubscriptionNotification_Nack_Call {
	_c.Call.Return(errorRPC)
	return _c
}

func (_c *MockRPCSubscriptionNotification_Nack_Call) RunAndReturn(run func(ctx context.Context) ErrorRPC) *MockRPCSubscriptionNotification_Nack_Call {
	_c.Call.Return(run)
	return _c
}
