// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package rpcserver

import (
	"context"
	"net"
	"net/http"

	"github.com/LF-Decentralized-Trust-labs/paladin/sdk/go/pkg/rpcclient"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRPCHandler creates a new instance of MockRPCHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRPCHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRPCHandler {
	mock := &MockRPCHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRPCHandler is an autogenerated mock type for the RPCHandler type
type MockRPCHandler struct {
	mock.Mock
}

type MockRPCHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRPCHandler) EXPECT() *MockRPCHandler_Expecter {
	return &MockRPCHandler_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function for the type MockRPCHandler
func (_mock *MockRPCHandler) Handle(ctx context.Context, req *rpcclient.RPCRequest) *rpcclient.RPCResponse {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 *rpcclient.RPCResponse
	if returnFunc, ok := ret.Get(0).(func(context.Context, *rpcclient.RPCRequest) *rpcclient.RPCResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcclient.RPCResponse)
		}
	}
	return r0
}

// MockRPCHandler_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type MockRPCHandler_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - ctx context.Context
//   - req *rpcclient.RPCRequest
func (_e *MockRPCHandler_Expecter) Handle(ctx interface{}, req interface{}) *MockRPCHandler_Handle_Call {
	return &MockRPCHandler_Handle_Call{Call: _e.mock.On("Handle", ctx, req)}
}

func (_c *MockRPCHandler_Handle_Call) Run(run func(ctx context.Context, req *rpcclient.RPCRequest)) *MockRPCHandler_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *rpcclient.RPCRequest
		if args[1] != nil {
			arg1 = args[1].(*rpcclient.RPCRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRPCHandler_Handle_Call) Return(rPCResponse *rpcclient.RPCResponse) *MockRPCHandler_Handle_Call {
	_c.Call.Return(rPCResponse)
	return _c
}

func (_c *MockRPCHandler_Handle_Call) RunAndReturn(run func(ctx context.Context, req *rpcclient.RPCRequest) *rpcclient.RPCResponse) *MockRPCHandler_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRPCAsyncControl creates a new instance of MockRPCAsyncControl. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRPCAsyncControl(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRPCAsyncControl {
	mock := &MockRPCAsyncControl{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRPCAsyncControl is an autogenerated mock type for the RPCAsyncControl type
type MockRPCAsyncControl struct {
	mock.Mock
}

type MockRPCAsyncControl_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRPCAsyncControl) EXPECT() *MockRPCAsyncControl_Expecter {
	return &MockRPCAsyncControl_Expecter{mock: &_m.Mock}
}

// Closed provides a mock function for the type MockRPCAsyncControl
func (_mock *MockRPCAsyncControl) Closed() {
	_mock.Called()
	return
}

// MockRPCAsyncControl_Closed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Closed'
type MockRPCAsyncControl_Closed_Call struct {
	*mock.Call
}

// Closed is a helper method to define mock.On call
func (_e *MockRPCAsyncControl_Expecter) Closed() *MockRPCAsyncControl_Closed_Call {
	return &MockRPCAsyncControl_Closed_Call{Call: _e.mock.On("Closed")}
}

func (_c *MockRPCAsyncControl_Closed_Call) Run(run func()) *MockRPCAsyncControl_Closed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRPCAsyncControl_Closed_Call) Return() *MockRPCAsyncControl_Closed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRPCAsyncControl_Closed_Call) RunAndReturn(run func()) *MockRPCAsyncControl_Closed_Call {
	_c.Run(run)
	return _c
}

// ID provides a mock function for the type MockRPCAsyncControl
func (_mock *MockRPCAsyncControl) ID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockRPCAsyncControl_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockRPCAsyncControl_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MockRPCAsyncControl_Expecter) ID() *MockRPCAsyncControl_ID_Call {
	return &MockRPCAsyncControl_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *MockRPCAsyncControl_ID_Call) Run(run func()) *MockRPCAsyncControl_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRPCAsyncControl_ID_Call) Return(s string) *MockRPCAsyncControl_ID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockRPCAsyncControl_ID_Call) RunAndReturn(run func() string) *MockRPCAsyncControl_ID_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function for the type MockRPCAsyncControl
func (_mock *MockRPCAsyncControl) Send(method string, params any) {
	_mock.Called(method, params)
	return
}

// MockRPCAsyncControl_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockRPCAsyncControl_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - method string
//   - params any
func (_e *MockRPCAsyncControl_Expecter) Send(method interface{}, params interface{}) *MockRPCAsyncControl_Send_Call {
	return &MockRPCAsyncControl_Send_Call{Call: _e.mock.On("Send", method, params)}
}

func (_c *MockRPCAsyncControl_Send_Call) Run(run func(method string, params any)) *MockRPCAsyncControl_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRPCAsyncControl_Send_Call) Return() *MockRPCAsyncControl_Send_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRPCAsyncControl_Send_Call) RunAndReturn(run func(method string, params any)) *MockRPCAsyncControl_Send_Call {
	_c.Run(run)
	return _c
}

// NewMockRPCAsyncInstance creates a new instance of MockRPCAsyncInstance. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRPCAsyncInstance(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRPCAsyncInstance {
	mock := &MockRPCAsyncInstance{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRPCAsyncInstance is an autogenerated mock type for the RPCAsyncInstance type
type MockRPCAsyncInstance struct {
	mock.Mock
}

type MockRPCAsyncInstance_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRPCAsyncInstance) EXPECT() *MockRPCAsyncInstance_Expecter {
	return &MockRPCAsyncInstance_Expecter{mock: &_m.Mock}
}

// ConnectionClosed provides a mock function for the type MockRPCAsyncInstance
func (_mock *MockRPCAsyncInstance) ConnectionClosed() {
	_mock.Called()
	return
}

// MockRPCAsyncInstance_ConnectionClosed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConnectionClosed'
type MockRPCAsyncInstance_ConnectionClosed_Call struct {
	*mock.Call
}

// ConnectionClosed is a helper method to define mock.On call
func (_e *MockRPCAsyncInstance_Expecter) ConnectionClosed() *MockRPCAsyncInstance_ConnectionClosed_Call {
	return &MockRPCAsyncInstance_ConnectionClosed_Call{Call: _e.mock.On("ConnectionClosed")}
}

func (_c *MockRPCAsyncInstance_ConnectionClosed_Call) Run(run func()) *MockRPCAsyncInstance_ConnectionClosed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRPCAsyncInstance_ConnectionClosed_Call) Return() *MockRPCAsyncInstance_ConnectionClosed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRPCAsyncInstance_ConnectionClosed_Call) RunAndReturn(run func()) *MockRPCAsyncInstance_ConnectionClosed_Call {
	_c.Run(run)
	return _c
}

// NewMockRPCAsyncHandler creates a new instance of MockRPCAsyncHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRPCAsyncHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRPCAsyncHandler {
	mock := &MockRPCAsyncHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRPCAsyncHandler is an autogenerated mock type for the RPCAsyncHandler type
type MockRPCAsyncHandler struct {
	mock.Mock
}

type MockRPCAsyncHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRPCAsyncHandler) EXPECT() *MockRPCAsyncHandler_Expecter {
	return &MockRPCAsyncHandler_Expecter{mock: &_m.Mock}
}

// HandleLifecycle provides a mock function for the type MockRPCAsyncHandler
func (_mock *MockRPCAsyncHandler) HandleLifecycle(ctx context.Context, req *rpcclient.RPCRequest) *rpcclient.RPCResponse {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for HandleLifecycle")
	}

	var r0 *rpcclient.RPCResponse
	if returnFunc, ok := ret.Get(0).(func(context.Context, *rpcclient.RPCRequest) *rpcclient.RPCResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcclient.RPCResponse)
		}
	}
	return r0
}

// MockRPCAsyncHandler_HandleLifecycle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleLifecycle'
type MockRPCAsyncHandler_HandleLifecycle_Call struct {
	*mock.Call
}

// HandleLifecycle is a helper method to define mock.On call
//   - ctx context.Context
//   - req *rpcclient.RPCRequest
func (_e *MockRPCAsyncHandler_Expecter) HandleLifecycle(ctx interface{}, req interface{}) *MockRPCAsyncHandler_HandleLifecycle_Call {
	return &MockRPCAsyncHandler_HandleLifecycle_Call{Call: _e.mock.On("HandleLifecycle", ctx, req)}
}

func (_c *MockRPCAsyncHandler_HandleLifecycle_Call) Run(run func(ctx context.Context, req *rpcclient.RPCRequest)) *MockRPCAsyncHandler_HandleLifecycle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *rpcclient.RPCRequest
		if args[1] != nil {
			arg1 = args[1].(*rpcclient.RPCRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRPCAsyncHandler_HandleLifecycle_Call) Return(rPCResponse *rpcclient.RPCResponse) *MockRPCAsyncHandler_HandleLifecycle_Call {
	_c.Call.Return(rPCResponse)
	return _c
}

func (_c *MockRPCAsyncHandler_HandleLifecycle_Call) RunAndReturn(run func(ctx context.Context, req *rpcclient.RPCRequest) *rpcclient.RPCResponse) *MockRPCAsyncHandler_HandleLifecycle_Call {
	_c.Call.Return(run)
	return _c
}

// HandleStart provides a mock function for the type MockRPCAsyncHandler
func (_mock *MockRPCAsyncHandler) HandleStart(ctx context.Context, req *rpcclient.RPCRequest, ctrl RPCAsyncControl) (RPCAsyncInstance, *rpcclient.RPCResponse) {
	ret := _mock.Called(ctx, req, ctrl)

	if len(ret) == 0 {
		panic("no return value specified for HandleStart")
	}

	var r0 RPCAsyncInstance
	var r1 *rpcclient.RPCResponse
	if returnFunc, ok := ret.Get(0).(func(context.Context, *rpcclient.RPCRequest, RPCAsyncControl) (RPCAsyncInstance, *rpcclient.RPCResponse)); ok {
		return returnFunc(ctx, req, ctrl)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *rpcclient.RPCRequest, RPCAsyncControl) RPCAsyncInstance); ok {
		r0 = returnFunc(ctx, req, ctrl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RPCAsyncInstance)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *rpcclient.RPCRequest, RPCAsyncControl) *rpcclient.RPCResponse); ok {
		r1 = returnFunc(ctx, req, ctrl)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*rpcclient.RPCResponse)
		}
	}
	return r0, r1
}

// MockRPCAsyncHandler_HandleStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleStart'
type MockRPCAsyncHandler_HandleStart_Call struct {
	*mock.Call
}

// HandleStart is a helper method to define mock.On call
//   - ctx context.Context
//   - req *rpcclient.RPCRequest
//   - ctrl RPCAsyncControl
func (_e *MockRPCAsyncHandler_Expecter) HandleStart(ctx interface{}, req interface{}, ctrl interface{}) *MockRPCAsyncHandler_HandleStart_Call {
	return &MockRPCAsyncHandler_HandleStart_Call{Call: _e.mock.On("HandleStart", ctx, req, ctrl)}
}

func (_c *MockRPCAsyncHandler_HandleStart_Call) Run(run func(ctx context.Context, req *rpcclient.RPCRequest, ctrl RPCAsyncControl)) *MockRPCAsyncHandler_HandleStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *rpcclient.RPCRequest
		if args[1] != nil {
			arg1 = args[1].(*rpcclient.RPCRequest)
		}
		var arg2 RPCAsyncControl
		if args[2] != nil {
			arg2 = args[2].(RPCAsyncControl)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRPCAsyncHandler_HandleStart_Call) Return(rPCAsyncInstance RPCAsyncInstance, rPCResponse *rpcclient.RPCResponse) *MockRPCAsyncHandler_HandleStart_Call {
	_c.Call.Return(rPCAsyncInstance, rPCResponse)
	return _c
}

func (_c *MockRPCAsyncHandler_HandleStart_Call) RunAndReturn(run func(ctx context.Context, req *rpcclient.RPCRequest, ctrl RPCAsyncControl) (RPCAsyncInstance, *rpcclient.RPCResponse)) *MockRPCAsyncHandler_HandleStart_Call {
	_c.Call.Return(run)
	return _c
}

// LifecycleMethods provides a mock function for the type MockRPCAsyncHandler
func (_mock *MockRPCAsyncHandler) LifecycleMethods() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for LifecycleMethods")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockRPCAsyncHandler_LifecycleMethods_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LifecycleMethods'
type MockRPCAsyncHandler_LifecycleMethods_Call struct {
	*mock.Call
}

// LifecycleMethods is a helper method to define mock.On call
func (_e *MockRPCAsyncHandler_Expecter) LifecycleMethods() *MockRPCAsyncHandler_LifecycleMethods_Call {
	return &MockRPCAsyncHandler_LifecycleMethods_Call{Call: _e.mock.On("LifecycleMethods")}
}

func (_c *MockRPCAsyncHandler_LifecycleMethods_Call) Run(run func()) *MockRPCAsyncHandler_LifecycleMethods_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRPCAsyncHandler_LifecycleMethods_Call) Return(strings []string) *MockRPCAsyncHandler_LifecycleMethods_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockRPCAsyncHandler_LifecycleMethods_Call) RunAndReturn(run func() []string) *MockRPCAsyncHandler_LifecycleMethods_Call {
	_c.Call.Return(run)
	return _c
}

// StartMethod provides a mock function for the type MockRPCAsyncHandler
func (_mock *MockRPCAsyncHandler) StartMethod() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for StartMethod")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockRPCAsyncHandler_StartMethod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartMethod'
type MockRPCAsyncHandler_StartMethod_Call struct {
	*mock.Call
}

// StartMethod is a helper method to define mock.On call
func (_e *MockRPCAsyncHandler_Expecter) StartMethod() *MockRPCAsyncHandler_StartMethod_Call {
	return &MockRPCAsyncHandler_StartMethod_Call{Call: _e.mock.On("StartMethod")}
}

func (_c *MockRPCAsyncHandler_StartMethod_Call) Run(run func()) *MockRPCAsyncHandler_StartMethod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRPCAsyncHandler_StartMethod_Call) Return(s string) *MockRPCAsyncHandler_StartMethod_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockRPCAsyncHandler_StartMethod_Call) RunAndReturn(run func() string) *MockRPCAsyncHandler_StartMethod_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRPCServer creates a new instance of MockRPCServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRPCServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRPCServer {
	mock := &MockRPCServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRPCServer is an autogenerated mock type for the RPCServer type
type MockRPCServer struct {
	mock.Mock
}

type MockRPCServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRPCServer) EXPECT() *MockRPCServer_Expecter {
	return &MockRPCServer_Expecter{mock: &_m.Mock}
}

// HTTPAddr provides a mock function for the type MockRPCServer
func (_mock *MockRPCServer) HTTPAddr() net.Addr {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for HTTPAddr")
	}

	var r0 net.Addr
	if returnFunc, ok := ret.Get(0).(func() net.Addr); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Addr)
		}
	}
	return r0
}

// MockRPCServer_HTTPAddr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HTTPAddr'
type MockRPCServer_HTTPAddr_Call struct {
	*mock.Call
}

// HTTPAddr is a helper method to define mock.On call
func (_e *MockRPCServer_Expecter) HTTPAddr() *MockRPCServer_HTTPAddr_Call {
	return &MockRPCServer_HTTPAddr_Call{Call: _e.mock.On("HTTPAddr")}
}

func (_c *MockRPCServer_HTTPAddr_Call) Run(run func()) *MockRPCServer_HTTPAddr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRPCServer_HTTPAddr_Call) Return(addr net.Addr) *MockRPCServer_HTTPAddr_Call {
	_c.Call.Return(addr)
	return _c
}

func (_c *MockRPCServer_HTTPAddr_Call) RunAndReturn(run func() net.Addr) *MockRPCServer_HTTPAddr_Call {
	_c.Call.Return(run)
	return _c
}

// HTTPHandler provides a mock function for the type MockRPCServer
func (_mock *MockRPCServer) HTTPHandler(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// MockRPCServer_HTTPHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HTTPHandler'
type MockRPCServer_HTTPHandler_Call struct {
	*mock.Call
}

// HTTPHandler is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *MockRPCServer_Expecter) HTTPHandler(w interface{}, r interface{}) *MockRPCServer_HTTPHandler_Call {
	return &MockRPCServer_HTTPHandler_Call{Call: _e.mock.On("HTTPHandler", w, r)}
}

func (_c *MockRPCServer_HTTPHandler_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockRPCServer_HTTPHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRPCServer_HTTPHandler_Call) Return() *MockRPCServer_HTTPHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRPCServer_HTTPHandler_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *MockRPCServer_HTTPHandler_Call {
	_c.Run(run)
	return _c
}

// Register provides a mock function for the type MockRPCServer
func (_mock *MockRPCServer) Register(module *RPCModule) {
	_mock.Called(module)
	return
}

// MockRPCServer_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockRPCServer_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - module *RPCModule
func (_e *MockRPCServer_Expecter) Register(module interface{}) *MockRPCServer_Register_Call {
	return &MockRPCServer_Register_Call{Call: _e.mock.On("Register", module)}
}

func (_c *MockRPCServer_Register_Call) Run(run func(module *RPCModule)) *MockRPCServer_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *RPCModule
		if args[0] != nil {
			arg0 = args[0].(*RPCModule)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRPCServer_Register_Call) Return() *MockRPCServer_Register_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRPCServer_Register_Call) RunAndReturn(run func(module *RPCModule)) *MockRPCServer_Register_Call {
	_c.Run(run)
	return _c
}

// Start provides a mock function for the type MockRPCServer
func (_mock *MockRPCServer) Start() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRPCServer_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockRPCServer_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockRPCServer_Expecter) Start() *MockRPCServer_Start_Call {
	return &MockRPCServer_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockRPCServer_Start_Call) Run(run func()) *MockRPCServer_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRPCServer_Start_Call) Return(err error) *MockRPCServer_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRPCServer_Start_Call) RunAndReturn(run func() error) *MockRPCServer_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockRPCServer
func (_mock *MockRPCServer) Stop() {
	_mock.Called()
	return
}

// MockRPCServer_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockRPCServer_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockRPCServer_Expecter) Stop() *MockRPCServer_Stop_Call {
	return &MockRPCServer_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockRPCServer_Stop_Call) Run(run func()) *MockRPCServer_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRPCServer_Stop_Call) Return() *MockRPCServer_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRPCServer_Stop_Call) RunAndReturn(run func()) *MockRPCServer_Stop_Call {
	_c.Run(run)
	return _c
}

// WSAddr provides a mock function for the type MockRPCServer
func (_mock *MockRPCServer) WSAddr() net.Addr {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for WSAddr")
	}

	var r0 net.Addr
	if returnFunc, ok := ret.Get(0).(func() net.Addr); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Addr)
		}
	}
	return r0
}

// MockRPCServer_WSAddr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WSAddr'
type MockRPCServer_WSAddr_Call struct {
	*mock.Call
}

// WSAddr is a helper method to define mock.On call
func (_e *MockRPCServer_Expecter) WSAddr() *MockRPCServer_WSAddr_Call {
	return &MockRPCServer_WSAddr_Call{Call: _e.mock.On("WSAddr")}
}

func (_c *MockRPCServer_WSAddr_Call) Run(run func()) *MockRPCServer_WSAddr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRPCServer_WSAddr_Call) Return(addr net.Addr) *MockRPCServer_WSAddr_Call {
	_c.Call.Return(addr)
	return _c
}

func (_c *MockRPCServer_WSAddr_Call) RunAndReturn(run func() net.Addr) *MockRPCServer_WSAddr_Call {
	_c.Call.Return(run)
	return _c
}

// WSHandler provides a mock function for the type MockRPCServer
func (_mock *MockRPCServer) WSHandler(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// MockRPCServer_WSHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WSHandler'
type MockRPCServer_WSHandler_Call struct {
	*mock.Call
}

// WSHandler is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *MockRPCServer_Expecter) WSHandler(w interface{}, r interface{}) *MockRPCServer_WSHandler_Call {
	return &MockRPCServer_WSHandler_Call{Call: _e.mock.On("WSHandler", w, r)}
}

func (_c *MockRPCServer_WSHandler_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockRPCServer_WSHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRPCServer_WSHandler_Call) Return() *MockRPCServer_WSHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRPCServer_WSHandler_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *MockRPCServer_WSHandler_Call {
	_c.Run(run)
	return _c
}
