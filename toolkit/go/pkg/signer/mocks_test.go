// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package signer

import (
	"context"

	"github.com/LF-Decentralized-Trust-labs/paladin/toolkit/pkg/prototk"
	"github.com/LF-Decentralized-Trust-labs/paladin/toolkit/pkg/signerapi"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSigningModule creates a new instance of MockSigningModule. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSigningModule(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSigningModule {
	mock := &MockSigningModule{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSigningModule is an autogenerated mock type for the SigningModule type
type MockSigningModule struct {
	mock.Mock
}

type MockSigningModule_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSigningModule) EXPECT() *MockSigningModule_Expecter {
	return &MockSigningModule_Expecter{mock: &_m.Mock}
}

// AddInMemorySigner provides a mock function for the type MockSigningModule
func (_mock *MockSigningModule) AddInMemorySigner(prefix string, signer signerapi.InMemorySigner) {
	_mock.Called(prefix, signer)
	return
}

// MockSigningModule_AddInMemorySigner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddInMemorySigner'
type MockSigningModule_AddInMemorySigner_Call struct {
	*mock.Call
}

// AddInMemorySigner is a helper method to define mock.On call
//   - prefix string
//   - signer signerapi.InMemorySigner
func (_e *MockSigningModule_Expecter) AddInMemorySigner(prefix interface{}, signer interface{}) *MockSigningModule_AddInMemorySigner_Call {
	return &MockSigningModule_AddInMemorySigner_Call{Call: _e.mock.On("AddInMemorySigner", prefix, signer)}
}

func (_c *MockSigningModule_AddInMemorySigner_Call) Run(run func(prefix string, signer signerapi.InMemorySigner)) *MockSigningModule_AddInMemorySigner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 signerapi.InMemorySigner
		if args[1] != nil {
			arg1 = args[1].(signerapi.InMemorySigner)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSigningModule_AddInMemorySigner_Call) Return() *MockSigningModule_AddInMemorySigner_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSigningModule_AddInMemorySigner_Call) RunAndReturn(run func(prefix string, signer signerapi.InMemorySigner)) *MockSigningModule_AddInMemorySigner_Call {
	_c.Run(run)
	return _c
}

// Close provides a mock function for the type MockSigningModule
func (_mock *MockSigningModule) Close() {
	_mock.Called()
	return
}

// MockSigningModule_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockSigningModule_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockSigningModule_Expecter) Close() *MockSigningModule_Close_Call {
	return &MockSigningModule_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockSigningModule_Close_Call) Run(run func()) *MockSigningModule_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSigningModule_Close_Call) Return() *MockSigningModule_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSigningModule_Close_Call) RunAndReturn(run func()) *MockSigningModule_Close_Call {
	_c.Run(run)
	return _c
}

// List provides a mock function for the type MockSigningModule
func (_mock *MockSigningModule) List(ctx context.Context, req *prototk.ListKeysRequest) (*prototk.ListKeysResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *prototk.ListKeysResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.ListKeysRequest) (*prototk.ListKeysResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.ListKeysRequest) *prototk.ListKeysResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.ListKeysResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.ListKeysRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSigningModule_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockSigningModule_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - req *prototk.ListKeysRequest
func (_e *MockSigningModule_Expecter) List(ctx interface{}, req interface{}) *MockSigningModule_List_Call {
	return &MockSigningModule_List_Call{Call: _e.mock.On("List", ctx, req)}
}

func (_c *MockSigningModule_List_Call) Run(run func(ctx context.Context, req *prototk.ListKeysRequest)) *MockSigningModule_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.ListKeysRequest
		if args[1] != nil {
			arg1 = args[1].(*prototk.ListKeysRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSigningModule_List_Call) Return(res *prototk.ListKeysResponse, err error) *MockSigningModule_List_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockSigningModule_List_Call) RunAndReturn(run func(ctx context.Context, req *prototk.ListKeysRequest) (*prototk.ListKeysResponse, error)) *MockSigningModule_List_Call {
	_c.Call.Return(run)
	return _c
}

// Resolve provides a mock function for the type MockSigningModule
func (_mock *MockSigningModule) Resolve(ctx context.Context, req *prototk.ResolveKeyRequest) (*prototk.ResolveKeyResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Resolve")
	}

	var r0 *prototk.ResolveKeyResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.ResolveKeyRequest) (*prototk.ResolveKeyResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.ResolveKeyRequest) *prototk.ResolveKeyResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.ResolveKeyResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.ResolveKeyRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSigningModule_Resolve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resolve'
type MockSigningModule_Resolve_Call struct {
	*mock.Call
}

// Resolve is a helper method to define mock.On call
//   - ctx context.Context
//   - req *prototk.ResolveKeyRequest
func (_e *MockSigningModule_Expecter) Resolve(ctx interface{}, req interface{}) *MockSigningModule_Resolve_Call {
	return &MockSigningModule_Resolve_Call{Call: _e.mock.On("Resolve", ctx, req)}
}

func (_c *MockSigningModule_Resolve_Call) Run(run func(ctx context.Context, req *prototk.ResolveKeyRequest)) *MockSigningModule_Resolve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.ResolveKeyRequest
		if args[1] != nil {
			arg1 = args[1].(*prototk.ResolveKeyRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSigningModule_Resolve_Call) Return(res *prototk.ResolveKeyResponse, err error) *MockSigningModule_Resolve_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockSigningModule_Resolve_Call) RunAndReturn(run func(ctx context.Context, req *prototk.ResolveKeyRequest) (*prototk.ResolveKeyResponse, error)) *MockSigningModule_Resolve_Call {
	_c.Call.Return(run)
	return _c
}

// Sign provides a mock function for the type MockSigningModule
func (_mock *MockSigningModule) Sign(ctx context.Context, req *prototk.SignWithKeyRequest) (*prototk.SignWithKeyResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 *prototk.SignWithKeyResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.SignWithKeyRequest) (*prototk.SignWithKeyResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *prototk.SignWithKeyRequest) *prototk.SignWithKeyResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prototk.SignWithKeyResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *prototk.SignWithKeyRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSigningModule_Sign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sign'
type MockSigningModule_Sign_Call struct {
	*mock.Call
}

// Sign is a helper method to define mock.On call
//   - ctx context.Context
//   - req *prototk.SignWithKeyRequest
func (_e *MockSigningModule_Expecter) Sign(ctx interface{}, req interface{}) *MockSigningModule_Sign_Call {
	return &MockSigningModule_Sign_Call{Call: _e.mock.On("Sign", ctx, req)}
}

func (_c *MockSigningModule_Sign_Call) Run(run func(ctx context.Context, req *prototk.SignWithKeyRequest)) *MockSigningModule_Sign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *prototk.SignWithKeyRequest
		if args[1] != nil {
			arg1 = args[1].(*prototk.SignWithKeyRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSigningModule_Sign_Call) Return(res *prototk.SignWithKeyResponse, err error) *MockSigningModule_Sign_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockSigningModule_Sign_Call) RunAndReturn(run func(ctx context.Context, req *prototk.SignWithKeyRequest) (*prototk.SignWithKeyResponse, error)) *MockSigningModule_Sign_Call {
	_c.Call.Return(run)
	return _c
}
